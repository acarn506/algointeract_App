{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/node/Node.jsx\";\nimport React from \"react\";\nimport CONST from \"./node.const\";\nimport nodeHelper from \"./node.helper\";\n/**\n * Node component is responsible for encapsulating node render.\n * @example\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node', nodeId);\n * };\n *\n * const onRightClickNode = function(nodeId) {\n *      window.alert('Right clicked node', nodeId);\n * }\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert('Mouse over node', nodeId);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert('Mouse out node', nodeId);\n * };\n *\n * <Node\n *     id='nodeId'\n *     cx=22\n *     cy=22\n *     fill='green'\n *     fontSize=10\n *     fontColor='black'\n *     fontWeight='normal'\n *     dx=90\n *     label='label text'\n *     opacity=1\n *     renderLabel=true\n *     size=200\n *     stroke='none'\n *     strokeWidth=1.5\n *     svg='assets/my-svg.svg'\n *     type='square'\n *     viewGenerator=(node) => <CustomComponent node={node} />\n *     className='node'\n *     onClickNode={onClickNode}\n *     onRightClickNode={onRightClickNode}\n *     onMouseOverNode={onMouseOverNode}\n *     onMouseOutNode={onMouseOutNode} />\n */\n\nexport default class Node extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleOnClickNode = () => this.props.onClickNode && this.props.onClickNode(this.props.id);\n\n    this.handleOnRightClickNode = event => this.props.onRightClickNode && this.props.onRightClickNode(event, this.props.id);\n\n    this.handleOnMouseOverNode = () => this.props.onMouseOverNode && this.props.onMouseOverNode(this.props.id);\n\n    this.handleOnMouseOutNode = () => this.props.onMouseOut && this.props.onMouseOut(this.props.id);\n  }\n\n  render() {\n    const nodeProps = {\n      cursor: this.props.cursor,\n      onClick: this.handleOnClickNode,\n      onContextMenu: this.handleOnRightClickNode,\n      onMouseOut: this.handleOnMouseOutNode,\n      onMouseOver: this.handleOnMouseOverNode,\n      opacity: this.props.opacity\n    };\n    const textProps = {\n      dx: this.props.dx || CONST.NODE_LABEL_DX,\n      dy: CONST.NODE_LABEL_DY,\n      fill: this.props.fontColor,\n      fontSize: this.props.fontSize,\n      fontWeight: this.props.fontWeight,\n      opacity: this.props.opacity\n    };\n    const size = this.props.size;\n    let gtx = this.props.cx,\n        gty = this.props.cy,\n        label = null,\n        node = null;\n\n    if (this.props.svg || this.props.viewGenerator) {\n      const height = size / 10;\n      const width = size / 10;\n      const tx = width / 2;\n      const ty = height / 2;\n      const transform = `translate(${tx},${ty})`;\n      label = React.createElement(\"text\", Object.assign({}, textProps, {\n        transform: transform,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), this.props.label); // By default, if a view generator is set, it takes precedence over any svg image url\n\n      if (this.props.viewGenerator && !this.props.overrideGlobalViewGenerator) {\n        node = React.createElement(\"svg\", Object.assign({}, nodeProps, {\n          width: width,\n          height: height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), React.createElement(\"foreignObject\", {\n          x: \"0\",\n          y: \"0\",\n          width: \"100%\",\n          height: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          style: {\n            height,\n            width,\n            backgroundColor: \"transparent\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, this.props.viewGenerator(this.props))));\n      } else {\n        node = React.createElement(\"image\", Object.assign({}, nodeProps, {\n          href: this.props.svg,\n          width: width,\n          height: height,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }));\n      } // svg offset transform regarding svg width/height\n\n\n      gtx -= tx;\n      gty -= ty;\n    } else {\n      nodeProps.d = nodeHelper.buildSvgSymbol(size, this.props.type);\n      nodeProps.fill = this.props.fill;\n      nodeProps.stroke = this.props.stroke;\n      nodeProps.strokeWidth = this.props.strokeWidth;\n      label = React.createElement(\"text\", Object.assign({}, textProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), this.props.label);\n      node = React.createElement(\"path\", Object.assign({}, nodeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }));\n    }\n\n    const gProps = {\n      className: this.props.className,\n      cx: this.props.cx,\n      cy: this.props.cy,\n      id: this.props.id,\n      transform: `translate(${gtx},${gty})`\n    };\n    return React.createElement(\"g\", Object.assign({}, gProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), node, this.props.renderLabel && label);\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/node/Node.jsx"],"names":["React","CONST","nodeHelper","Node","Component","handleOnClickNode","props","onClickNode","id","handleOnRightClickNode","event","onRightClickNode","handleOnMouseOverNode","onMouseOverNode","handleOnMouseOutNode","onMouseOut","render","nodeProps","cursor","onClick","onContextMenu","onMouseOver","opacity","textProps","dx","NODE_LABEL_DX","dy","NODE_LABEL_DY","fill","fontColor","fontSize","fontWeight","size","gtx","cx","gty","cy","label","node","svg","viewGenerator","height","width","tx","ty","transform","overrideGlobalViewGenerator","backgroundColor","d","buildSvgSymbol","type","stroke","strokeWidth","gProps","className","renderLabel"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport CONST from \"./node.const\";\n\nimport nodeHelper from \"./node.helper\";\n\n/**\n * Node component is responsible for encapsulating node render.\n * @example\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node', nodeId);\n * };\n *\n * const onRightClickNode = function(nodeId) {\n *      window.alert('Right clicked node', nodeId);\n * }\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert('Mouse over node', nodeId);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert('Mouse out node', nodeId);\n * };\n *\n * <Node\n *     id='nodeId'\n *     cx=22\n *     cy=22\n *     fill='green'\n *     fontSize=10\n *     fontColor='black'\n *     fontWeight='normal'\n *     dx=90\n *     label='label text'\n *     opacity=1\n *     renderLabel=true\n *     size=200\n *     stroke='none'\n *     strokeWidth=1.5\n *     svg='assets/my-svg.svg'\n *     type='square'\n *     viewGenerator=(node) => <CustomComponent node={node} />\n *     className='node'\n *     onClickNode={onClickNode}\n *     onRightClickNode={onRightClickNode}\n *     onMouseOverNode={onMouseOverNode}\n *     onMouseOutNode={onMouseOutNode} />\n */\nexport default class Node extends React.Component {\n    /**\n     * Handle click on the node.\n     * @returns {undefined}\n     */\n    handleOnClickNode = () => this.props.onClickNode && this.props.onClickNode(this.props.id);\n\n    /**\n     * Handle right click on the node.\n     * @param {Object} event - native event.\n     * @returns {undefined}\n     */\n    handleOnRightClickNode = event => this.props.onRightClickNode && this.props.onRightClickNode(event, this.props.id);\n\n    /**\n     * Handle mouse over node event.\n     * @returns {undefined}\n     */\n    handleOnMouseOverNode = () => this.props.onMouseOverNode && this.props.onMouseOverNode(this.props.id);\n\n    /**\n     * Handle mouse out node event.\n     * @returns {undefined}\n     */\n    handleOnMouseOutNode = () => this.props.onMouseOut && this.props.onMouseOut(this.props.id);\n\n    render() {\n        const nodeProps = {\n            cursor: this.props.cursor,\n            onClick: this.handleOnClickNode,\n            onContextMenu: this.handleOnRightClickNode,\n            onMouseOut: this.handleOnMouseOutNode,\n            onMouseOver: this.handleOnMouseOverNode,\n            opacity: this.props.opacity,\n        };\n\n        const textProps = {\n            dx: this.props.dx || CONST.NODE_LABEL_DX,\n            dy: CONST.NODE_LABEL_DY,\n            fill: this.props.fontColor,\n            fontSize: this.props.fontSize,\n            fontWeight: this.props.fontWeight,\n            opacity: this.props.opacity,\n        };\n\n        const size = this.props.size;\n\n        let gtx = this.props.cx,\n            gty = this.props.cy,\n            label = null,\n            node = null;\n\n        if (this.props.svg || this.props.viewGenerator) {\n            const height = size / 10;\n            const width = size / 10;\n            const tx = width / 2;\n            const ty = height / 2;\n            const transform = `translate(${tx},${ty})`;\n\n            label = (\n                <text {...textProps} transform={transform}>\n                    {this.props.label}\n                </text>\n            );\n\n            // By default, if a view generator is set, it takes precedence over any svg image url\n            if (this.props.viewGenerator && !this.props.overrideGlobalViewGenerator) {\n                node = (\n                    <svg {...nodeProps} width={width} height={height}>\n                        <foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n                            <section style={{ height, width, backgroundColor: \"transparent\" }}>\n                                {this.props.viewGenerator(this.props)}\n                            </section>\n                        </foreignObject>\n                    </svg>\n                );\n            } else {\n                node = <image {...nodeProps} href={this.props.svg} width={width} height={height} />;\n            }\n\n            // svg offset transform regarding svg width/height\n            gtx -= tx;\n            gty -= ty;\n        } else {\n            nodeProps.d = nodeHelper.buildSvgSymbol(size, this.props.type);\n            nodeProps.fill = this.props.fill;\n            nodeProps.stroke = this.props.stroke;\n            nodeProps.strokeWidth = this.props.strokeWidth;\n\n            label = <text {...textProps}>{this.props.label}</text>;\n            node = <path {...nodeProps} />;\n        }\n\n        const gProps = {\n            className: this.props.className,\n            cx: this.props.cx,\n            cy: this.props.cy,\n            id: this.props.id,\n            transform: `translate(${gtx},${gty})`,\n        };\n\n        return (\n            <g {...gProps}>\n                {node}\n                {this.props.renderLabel && label}\n            </g>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}