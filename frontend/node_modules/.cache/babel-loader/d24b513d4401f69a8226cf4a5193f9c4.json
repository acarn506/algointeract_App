{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/Graph/graph/Graph.jsx\";\nimport React from \"react\";\nimport { drag as d3Drag } from \"d3-drag\";\nimport { forceLink as d3ForceLink } from \"d3-force\";\nimport { select as d3Select, selectAll as d3SelectAll, event as d3Event } from \"d3-selection\";\nimport { zoom as d3Zoom } from \"d3-zoom\";\nimport CONST from \"./graph.const\";\nimport DEFAULT_CONFIG from \"./graph.config\";\nimport ERRORS from \"../err\";\nimport { getTargetLeafConnections, toggleLinksMatrixConnections, toggleLinksConnections } from \"./collapse.helper\";\nimport { updateNodeHighlightedValue, checkForGraphConfigChanges, checkForGraphElementsChanges, getCenterAndZoomTransformation, initializeGraphState } from \"./graph.helper\";\nimport { renderGraph } from \"./graph.renderer\";\nimport { merge, throwErr } from \"../utils\";\n/**\n * Graph component is the main component for react-d3-graph components, its interface allows its user\n * to build the graph once the user provides the data, configuration (optional) and callback interactions (also optional).\n * The code for the [live example](https://danielcaldas.github.io/react-d3-graph/sandbox/index.html)\n * can be consulted [here](https://github.com/danielcaldas/react-d3-graph/blob/master/sandbox/Sandbox.jsx)\n * @example\n * import { Graph } from 'react-d3-graph';\n *\n * // graph payload (with minimalist structure)\n * const data = {\n *     nodes: [\n *       {id: 'Harry'},\n *       {id: 'Sally'},\n *       {id: 'Alice'}\n *     ],\n *     links: [\n *         {source: 'Harry', target: 'Sally'},\n *         {source: 'Harry', target: 'Alice'},\n *     ]\n * };\n *\n * // the graph configuration, you only need to pass down properties\n * // that you want to override, otherwise default ones will be used\n * const myConfig = {\n *     nodeHighlightBehavior: true,\n *     node: {\n *         color: 'lightgreen',\n *         size: 120,\n *         highlightStrokeColor: 'blue'\n *     },\n *     link: {\n *         highlightColor: 'lightblue'\n *     }\n * };\n *\n * // Callback to handle click on the graph.\n * // @param {Object} event click dom event\n * const onClickGraph = function(event) {\n *      window.alert('Clicked the graph background');\n * };\n *\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node ${nodeId}');\n * };\n *\n * const onDoubleClickNode = function(nodeId) {\n *      window.alert('Double clicked node ${nodeId}');\n * };\n *\n * const onRightClickNode = function(event, nodeId) {\n *      window.alert('Right clicked node ${nodeId}');\n * };\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert(`Mouse over node ${nodeId}`);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert(`Mouse out node ${nodeId}`);\n * };\n *\n * const onClickLink = function(source, target) {\n *      window.alert(`Clicked link between ${source} and ${target}`);\n * };\n *\n * const onRightClickLink = function(event, source, target) {\n *      window.alert('Right clicked link between ${source} and ${target}');\n * };\n *\n * const onMouseOverLink = function(source, target) {\n *      window.alert(`Mouse over in link between ${source} and ${target}`);\n * };\n *\n * const onMouseOutLink = function(source, target) {\n *      window.alert(`Mouse out link between ${source} and ${target}`);\n * };\n *\n * const onNodePositionChange = function(nodeId, x, y) {\n *      window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n * };\n *\n *\n * <Graph\n *      id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n *      data={data}\n *      config={myConfig}\n *      onClickGraph={onClickGraph}\n *      onClickNode={onClickNode}\n *      onDoubleClickNode={onDoubleClickNode}\n *      onRightClickNode={onRightClickNode}\n *      onClickLink={onClickLink}\n *      onRightClickLink={onRightClickLink}\n *      onMouseOverNode={onMouseOverNode}\n *      onMouseOutNode={onMouseOutNode}\n *      onMouseOverLink={onMouseOverLink}\n *      onMouseOutLink={onMouseOutLink}/>\n */\n\nexport default class Graph extends React.Component {\n  /**\n   * Obtain a set of properties which will be used to perform the focus and zoom animation if\n   * required. In case there's not a focus and zoom animation in progress, it should reset the\n   * transition duration to zero and clear transformation styles.\n   * @returns {Object} - Focus and zoom animation properties.\n   */\n\n  /**\n   * This method runs {@link d3-force|https://github.com/d3/d3-force}\n   * against the current graph.\n   * @returns {undefined}\n   */\n  _graphLinkForceConfig() {\n    const forceLink = d3ForceLink(this.state.d3Links).id(l => l.id).distance(this.state.config.d3.linkLength).strength(this.state.config.d3.linkStrength);\n    this.state.simulation.force(CONST.LINK_CLASS_NAME, forceLink);\n  }\n  /**\n   * This method runs {@link d3-drag|https://github.com/d3/d3-drag}\n   * against the current graph.\n   * @returns {undefined}\n   */\n\n\n  _graphNodeDragConfig() {\n    const customNodeDrag = d3Drag().on(\"start\", this._onDragStart).on(\"drag\", this._onDragMove).on(\"end\", this._onDragEnd);\n    d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`).selectAll(\".node\").call(customNodeDrag);\n  }\n  /**\n   * Sets d3 tick function and configures other d3 stuff such as forces and drag events.\n   * Whenever called binds Graph component state with d3.\n   * @returns {undefined}\n   */\n\n\n  _graphBindD3ToReactComponent() {\n    if (!this.state.config.d3.disableLinkForce) {\n      this.state.simulation.nodes(this.state.d3Nodes).on(\"tick\", this._tick);\n\n      this._graphLinkForceConfig();\n    }\n\n    this._graphNodeDragConfig();\n  }\n  /**\n   * Handles d3 drag 'end' event.\n   * @returns {undefined}\n   */\n\n\n  constructor(props) {\n    super(props);\n\n    this._generateFocusAnimationProps = () => {\n      const {\n        focusedNodeId\n      } = this.state; // In case an older animation was still not complete, clear previous timeout to ensure the new one is not cancelled\n\n      if (this.state.enableFocusAnimation) {\n        if (this.focusAnimationTimeout) {\n          clearTimeout(this.focusAnimationTimeout);\n        }\n\n        this.focusAnimationTimeout = setTimeout(() => this.setState({\n          enableFocusAnimation: false\n        }), this.state.config.focusAnimationDuration * 1000);\n      }\n\n      const transitionDuration = this.state.enableFocusAnimation ? this.state.config.focusAnimationDuration : 0;\n      return {\n        style: {\n          transitionDuration: `${transitionDuration}s`\n        },\n        transform: focusedNodeId ? this.state.focusTransformation : null\n      };\n    };\n\n    this._onDragEnd = () => {\n      this.isDraggingNode = false;\n\n      if (this.state.draggedNode) {\n        this.onNodePositionChange(this.state.draggedNode);\n\n        this._tick({\n          draggedNode: null\n        });\n      }\n\n      !this.state.config.staticGraph && this.state.config.automaticRearrangeAfterDropNode && this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n    };\n\n    this._onDragMove = (ev, index, nodeList) => {\n      const id = nodeList[index].id;\n\n      if (!this.state.config.staticGraph) {\n        // this is where d3 and react bind\n        let draggedNode = this.state.nodes[id];\n        draggedNode.oldX = draggedNode.x;\n        draggedNode.oldY = draggedNode.y; // set nodes fixing coords fx and fy\n\n        draggedNode[\"fx\"] = draggedNode.x;\n        draggedNode[\"fy\"] = draggedNode.y;\n\n        this._tick({\n          draggedNode\n        });\n      }\n    };\n\n    this._onDragStart = () => {\n      this.isDraggingNode = true;\n      this.pauseSimulation();\n\n      if (this.state.enableFocusAnimation) {\n        this.setState({\n          enableFocusAnimation: false\n        });\n      }\n    };\n\n    this._setNodeHighlightedValue = (id, value = false) => this._tick(updateNodeHighlightedValue(this.state.nodes, this.state.links, this.state.config, id, value));\n\n    this._tick = (state = {}, cb) => {\n      cb ? this.setState(state, cb) : this.setState(state);\n    };\n\n    this._zoomConfig = () => {\n      d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`).call(d3Zoom().scaleExtent([this.state.config.minZoom, this.state.config.maxZoom]).on(\"zoom\", this._zoomed)).on(\"dblclick.zoom\", null);\n    };\n\n    this._zoomed = () => {\n      const transform = d3Event.transform;\n      d3SelectAll(`#${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`).attr(\"transform\", transform);\n      this.state.config.panAndZoom && this.setState({\n        transform: transform.k\n      });\n    };\n\n    this.onClickGraph = e => {\n      var _e$target, _e$target$attributes, _e$target$attributes$;\n\n      if (this.state.enableFocusAnimation) {\n        this.setState({\n          enableFocusAnimation: false\n        });\n      } // Only trigger the graph onClickHandler, if not clicked a node or link.\n      // toUpperCase() is added as a precaution, as the documentation says tagName should always\n      // return in UPPERCASE, but chrome returns lowercase\n\n\n      const tagName = e.target && e.target.tagName;\n      const name = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$attributes = _e$target.attributes) === null || _e$target$attributes === void 0 ? void 0 : (_e$target$attributes$ = _e$target$attributes.name) === null || _e$target$attributes$ === void 0 ? void 0 : _e$target$attributes$.value;\n      const svgContainerName = `svg-container-${this.state.id}`;\n\n      if (tagName.toUpperCase() === \"SVG\" && name === svgContainerName) {\n        this.props.onClickGraph && this.props.onClickGraph(e);\n      }\n    };\n\n    this.onClickNode = clickedNodeId => {\n      if (this.state.config.collapsible) {\n        const leafConnections = getTargetLeafConnections(clickedNodeId, this.state.links, this.state.config);\n        const links = toggleLinksMatrixConnections(this.state.links, leafConnections, this.state.config);\n        const d3Links = toggleLinksConnections(this.state.d3Links, links);\n        const firstLeaf = leafConnections === null || leafConnections === void 0 ? void 0 : leafConnections[\"0\"];\n        let isExpanding = false;\n\n        if (firstLeaf) {\n          const visibility = links[firstLeaf.source][firstLeaf.target];\n          isExpanding = visibility === 1;\n        }\n\n        this._tick({\n          links,\n          d3Links\n        }, () => {\n          this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n\n          if (isExpanding) {\n            this._graphNodeDragConfig();\n          }\n        });\n      } else {\n        if (!this.nodeClickTimer) {\n          this.nodeClickTimer = setTimeout(() => {\n            this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n            this.nodeClickTimer = null;\n          }, CONST.TTL_DOUBLE_CLICK_IN_MS);\n        } else {\n          this.props.onDoubleClickNode && this.props.onDoubleClickNode(clickedNodeId);\n          this.nodeClickTimer = clearTimeout(this.nodeClickTimer);\n        }\n      }\n    };\n\n    this.onMouseOverNode = id => {\n      if (this.isDraggingNode) {\n        return;\n      }\n\n      this.props.onMouseOverNode && this.props.onMouseOverNode(id);\n      this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, true);\n    };\n\n    this.onMouseOutNode = id => {\n      if (this.isDraggingNode) {\n        return;\n      }\n\n      this.props.onMouseOutNode && this.props.onMouseOutNode(id);\n      this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, false);\n    };\n\n    this.onMouseOverLink = (source, target) => {\n      this.props.onMouseOverLink && this.props.onMouseOverLink(source, target);\n\n      if (this.state.config.linkHighlightBehavior) {\n        const highlightedLink = {\n          source,\n          target\n        };\n\n        this._tick({\n          highlightedLink\n        });\n      }\n    };\n\n    this.onMouseOutLink = (source, target) => {\n      this.props.onMouseOutLink && this.props.onMouseOutLink(source, target);\n\n      if (this.state.config.linkHighlightBehavior) {\n        const highlightedLink = undefined;\n\n        this._tick({\n          highlightedLink\n        });\n      }\n    };\n\n    this.onNodePositionChange = node => {\n      if (!this.props.onNodePositionChange) {\n        return;\n      }\n\n      const {\n        id,\n        x,\n        y\n      } = node;\n      this.props.onNodePositionChange(id, x, y);\n    };\n\n    this.pauseSimulation = () => this.state.simulation.stop();\n\n    this.resetNodesPositions = () => {\n      if (!this.state.config.staticGraph) {\n        for (let nodeId in this.state.nodes) {\n          let node = this.state.nodes[nodeId];\n\n          if (node.fx && node.fy) {\n            Reflect.deleteProperty(node, \"fx\");\n            Reflect.deleteProperty(node, \"fy\");\n          }\n        }\n\n        this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n\n        this._tick();\n      }\n    };\n\n    this.restartSimulation = () => !this.state.config.staticGraph && this.state.simulation.restart();\n\n    if (!this.props.id) {\n      throwErr(this.constructor.name, ERRORS.GRAPH_NO_ID_PROP);\n    }\n\n    this.focusAnimationTimeout = null;\n    this.nodeClickTimer = null;\n    this.isDraggingNode = false;\n    this.state = initializeGraphState(this.props, this.state);\n  }\n  /**\n   * @deprecated\n   * `componentWillReceiveProps` has a replacement method in react v16.3 onwards.\n   * that is getDerivedStateFromProps.\n   * But one needs to be aware that if an anti pattern of `componentWillReceiveProps` is\n   * in place for this implementation the migration might not be that easy.\n   * See {@link https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html}.\n   * @param {Object} nextProps - props.\n   * @returns {undefined}\n   */\n  // eslint-disable-next-line\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      graphElementsUpdated,\n      newGraphElements\n    } = checkForGraphElementsChanges(nextProps, this.state);\n    const state = graphElementsUpdated ? initializeGraphState(nextProps, this.state) : this.state;\n    const newConfig = nextProps.config || {};\n    const {\n      configUpdated,\n      d3ConfigUpdated\n    } = checkForGraphConfigChanges(nextProps, this.state);\n    const config = configUpdated ? merge(DEFAULT_CONFIG, newConfig) : this.state.config; // in order to properly update graph data we need to pause eventual d3 ongoing animations\n\n    newGraphElements && this.pauseSimulation();\n    const transform = newConfig.panAndZoom !== this.state.config.panAndZoom ? 1 : this.state.transform;\n    const focusedNodeId = nextProps.data.focusedNodeId;\n    const d3FocusedNode = this.state.d3Nodes.find(node => `${node.id}` === `${focusedNodeId}`);\n    const focusTransformation = getCenterAndZoomTransformation(d3FocusedNode, this.state.config);\n    const enableFocusAnimation = this.props.data.focusedNodeId !== nextProps.data.focusedNodeId;\n    this.setState({ ...state,\n      config,\n      configUpdated,\n      d3ConfigUpdated,\n      newGraphElements,\n      transform,\n      focusedNodeId,\n      enableFocusAnimation,\n      focusTransformation\n    });\n  }\n\n  componentDidUpdate() {\n    // if the property staticGraph was activated we want to stop possible ongoing simulation\n    const shouldPause = this.state.config.staticGraph || this.state.config.staticGraphWithDragAndDrop;\n\n    if (shouldPause) {\n      this.pauseSimulation();\n    }\n\n    if (!this.state.config.staticGraph && (this.state.newGraphElements || this.state.d3ConfigUpdated)) {\n      this._graphBindD3ToReactComponent();\n\n      if (!this.state.config.staticGraphWithDragAndDrop) {\n        this.restartSimulation();\n      }\n\n      this.setState({\n        newGraphElements: false,\n        d3ConfigUpdated: false\n      });\n    } else if (this.state.configUpdated) {\n      this._graphNodeDragConfig();\n    }\n\n    if (this.state.configUpdated) {\n      this._zoomConfig();\n\n      this.setState({\n        configUpdated: false\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.config.staticGraph) {\n      this._graphBindD3ToReactComponent();\n    } // graph zoom and drag&drop all network\n\n\n    this._zoomConfig();\n  }\n\n  componentWillUnmount() {\n    this.pauseSimulation();\n\n    if (this.nodeClickTimer) {\n      clearTimeout(this.nodeClickTimer);\n      this.nodeClickTimer = null;\n    }\n\n    if (this.focusAnimationTimeout) {\n      clearTimeout(this.focusAnimationTimeout);\n      this.focusAnimationTimeout = null;\n    }\n  }\n\n  render() {\n    const {\n      nodes,\n      links,\n      defs\n    } = renderGraph(this.state.nodes, {\n      onClickNode: this.onClickNode,\n      onDoubleClickNode: this.onDoubleClickNode,\n      onRightClickNode: this.props.onRightClickNode,\n      onMouseOverNode: this.onMouseOverNode,\n      onMouseOut: this.onMouseOutNode\n    }, this.state.d3Links, this.state.links, {\n      onClickLink: this.props.onClickLink,\n      onRightClickLink: this.props.onRightClickLink,\n      onMouseOverLink: this.onMouseOverLink,\n      onMouseOutLink: this.onMouseOutLink\n    }, this.state.config, this.state.highlightedNode, this.state.highlightedLink, this.state.transform);\n    const svgStyle = {\n      height: this.state.config.height,\n      width: this.state.config.width\n    };\n\n    const containerProps = this._generateFocusAnimationProps();\n\n    return React.createElement(\"div\", {\n      id: `${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      name: `svg-container-${this.state.id}`,\n      style: svgStyle,\n      onClick: this.onClickGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, defs, React.createElement(\"g\", Object.assign({\n      id: `${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`\n    }, containerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684\n      },\n      __self: this\n    }), links, nodes)));\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Tree/Graph/graph/Graph.jsx"],"names":["React","drag","d3Drag","forceLink","d3ForceLink","select","d3Select","selectAll","d3SelectAll","event","d3Event","zoom","d3Zoom","CONST","DEFAULT_CONFIG","ERRORS","getTargetLeafConnections","toggleLinksMatrixConnections","toggleLinksConnections","updateNodeHighlightedValue","checkForGraphConfigChanges","checkForGraphElementsChanges","getCenterAndZoomTransformation","initializeGraphState","renderGraph","merge","throwErr","Graph","Component","_graphLinkForceConfig","state","d3Links","id","l","distance","config","d3","linkLength","strength","linkStrength","simulation","force","LINK_CLASS_NAME","_graphNodeDragConfig","customNodeDrag","on","_onDragStart","_onDragMove","_onDragEnd","GRAPH_WRAPPER_ID","call","_graphBindD3ToReactComponent","disableLinkForce","nodes","d3Nodes","_tick","constructor","props","_generateFocusAnimationProps","focusedNodeId","enableFocusAnimation","focusAnimationTimeout","clearTimeout","setTimeout","setState","focusAnimationDuration","transitionDuration","style","transform","focusTransformation","isDraggingNode","draggedNode","onNodePositionChange","staticGraph","automaticRearrangeAfterDropNode","alphaTarget","restart","ev","index","nodeList","oldX","x","oldY","y","pauseSimulation","_setNodeHighlightedValue","value","links","cb","_zoomConfig","scaleExtent","minZoom","maxZoom","_zoomed","GRAPH_CONTAINER_ID","attr","panAndZoom","k","onClickGraph","e","tagName","target","name","attributes","svgContainerName","toUpperCase","onClickNode","clickedNodeId","collapsible","leafConnections","firstLeaf","isExpanding","visibility","source","nodeClickTimer","TTL_DOUBLE_CLICK_IN_MS","onDoubleClickNode","onMouseOverNode","nodeHighlightBehavior","onMouseOutNode","onMouseOverLink","linkHighlightBehavior","highlightedLink","onMouseOutLink","undefined","node","stop","resetNodesPositions","nodeId","fx","fy","Reflect","deleteProperty","restartSimulation","GRAPH_NO_ID_PROP","UNSAFE_componentWillReceiveProps","nextProps","graphElementsUpdated","newGraphElements","newConfig","configUpdated","d3ConfigUpdated","data","d3FocusedNode","find","componentDidUpdate","shouldPause","staticGraphWithDragAndDrop","componentDidMount","componentWillUnmount","render","defs","onRightClickNode","onMouseOut","onClickLink","onRightClickLink","highlightedNode","svgStyle","height","width","containerProps"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { drag as d3Drag } from \"d3-drag\";\nimport { forceLink as d3ForceLink } from \"d3-force\";\nimport {\n  select as d3Select,\n  selectAll as d3SelectAll,\n  event as d3Event,\n} from \"d3-selection\";\nimport { zoom as d3Zoom } from \"d3-zoom\";\n\nimport CONST from \"./graph.const\";\nimport DEFAULT_CONFIG from \"./graph.config\";\nimport ERRORS from \"../err\";\n\nimport {\n  getTargetLeafConnections,\n  toggleLinksMatrixConnections,\n  toggleLinksConnections,\n} from \"./collapse.helper\";\nimport {\n  updateNodeHighlightedValue,\n  checkForGraphConfigChanges,\n  checkForGraphElementsChanges,\n  getCenterAndZoomTransformation,\n  initializeGraphState,\n} from \"./graph.helper\";\nimport { renderGraph } from \"./graph.renderer\";\nimport { merge, throwErr } from \"../utils\";\n\n/**\n * Graph component is the main component for react-d3-graph components, its interface allows its user\n * to build the graph once the user provides the data, configuration (optional) and callback interactions (also optional).\n * The code for the [live example](https://danielcaldas.github.io/react-d3-graph/sandbox/index.html)\n * can be consulted [here](https://github.com/danielcaldas/react-d3-graph/blob/master/sandbox/Sandbox.jsx)\n * @example\n * import { Graph } from 'react-d3-graph';\n *\n * // graph payload (with minimalist structure)\n * const data = {\n *     nodes: [\n *       {id: 'Harry'},\n *       {id: 'Sally'},\n *       {id: 'Alice'}\n *     ],\n *     links: [\n *         {source: 'Harry', target: 'Sally'},\n *         {source: 'Harry', target: 'Alice'},\n *     ]\n * };\n *\n * // the graph configuration, you only need to pass down properties\n * // that you want to override, otherwise default ones will be used\n * const myConfig = {\n *     nodeHighlightBehavior: true,\n *     node: {\n *         color: 'lightgreen',\n *         size: 120,\n *         highlightStrokeColor: 'blue'\n *     },\n *     link: {\n *         highlightColor: 'lightblue'\n *     }\n * };\n *\n * // Callback to handle click on the graph.\n * // @param {Object} event click dom event\n * const onClickGraph = function(event) {\n *      window.alert('Clicked the graph background');\n * };\n *\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node ${nodeId}');\n * };\n *\n * const onDoubleClickNode = function(nodeId) {\n *      window.alert('Double clicked node ${nodeId}');\n * };\n *\n * const onRightClickNode = function(event, nodeId) {\n *      window.alert('Right clicked node ${nodeId}');\n * };\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert(`Mouse over node ${nodeId}`);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert(`Mouse out node ${nodeId}`);\n * };\n *\n * const onClickLink = function(source, target) {\n *      window.alert(`Clicked link between ${source} and ${target}`);\n * };\n *\n * const onRightClickLink = function(event, source, target) {\n *      window.alert('Right clicked link between ${source} and ${target}');\n * };\n *\n * const onMouseOverLink = function(source, target) {\n *      window.alert(`Mouse over in link between ${source} and ${target}`);\n * };\n *\n * const onMouseOutLink = function(source, target) {\n *      window.alert(`Mouse out link between ${source} and ${target}`);\n * };\n *\n * const onNodePositionChange = function(nodeId, x, y) {\n *      window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n * };\n *\n *\n * <Graph\n *      id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n *      data={data}\n *      config={myConfig}\n *      onClickGraph={onClickGraph}\n *      onClickNode={onClickNode}\n *      onDoubleClickNode={onDoubleClickNode}\n *      onRightClickNode={onRightClickNode}\n *      onClickLink={onClickLink}\n *      onRightClickLink={onRightClickLink}\n *      onMouseOverNode={onMouseOverNode}\n *      onMouseOutNode={onMouseOutNode}\n *      onMouseOverLink={onMouseOverLink}\n *      onMouseOutLink={onMouseOutLink}/>\n */\nexport default class Graph extends React.Component {\n  /**\n   * Obtain a set of properties which will be used to perform the focus and zoom animation if\n   * required. In case there's not a focus and zoom animation in progress, it should reset the\n   * transition duration to zero and clear transformation styles.\n   * @returns {Object} - Focus and zoom animation properties.\n   */\n  _generateFocusAnimationProps = () => {\n    const { focusedNodeId } = this.state;\n\n    // In case an older animation was still not complete, clear previous timeout to ensure the new one is not cancelled\n    if (this.state.enableFocusAnimation) {\n      if (this.focusAnimationTimeout) {\n        clearTimeout(this.focusAnimationTimeout);\n      }\n\n      this.focusAnimationTimeout = setTimeout(\n        () => this.setState({ enableFocusAnimation: false }),\n        this.state.config.focusAnimationDuration * 1000\n      );\n    }\n\n    const transitionDuration = this.state.enableFocusAnimation\n      ? this.state.config.focusAnimationDuration\n      : 0;\n\n    return {\n      style: { transitionDuration: `${transitionDuration}s` },\n      transform: focusedNodeId ? this.state.focusTransformation : null,\n    };\n  };\n\n  /**\n   * This method runs {@link d3-force|https://github.com/d3/d3-force}\n   * against the current graph.\n   * @returns {undefined}\n   */\n  _graphLinkForceConfig() {\n    const forceLink = d3ForceLink(this.state.d3Links)\n      .id((l) => l.id)\n      .distance(this.state.config.d3.linkLength)\n      .strength(this.state.config.d3.linkStrength);\n\n    this.state.simulation.force(CONST.LINK_CLASS_NAME, forceLink);\n  }\n\n  /**\n   * This method runs {@link d3-drag|https://github.com/d3/d3-drag}\n   * against the current graph.\n   * @returns {undefined}\n   */\n  _graphNodeDragConfig() {\n    const customNodeDrag = d3Drag()\n      .on(\"start\", this._onDragStart)\n      .on(\"drag\", this._onDragMove)\n      .on(\"end\", this._onDragEnd);\n\n    d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`)\n      .selectAll(\".node\")\n      .call(customNodeDrag);\n  }\n\n  /**\n   * Sets d3 tick function and configures other d3 stuff such as forces and drag events.\n   * Whenever called binds Graph component state with d3.\n   * @returns {undefined}\n   */\n  _graphBindD3ToReactComponent() {\n    if (!this.state.config.d3.disableLinkForce) {\n      this.state.simulation.nodes(this.state.d3Nodes).on(\"tick\", this._tick);\n      this._graphLinkForceConfig();\n    }\n    this._graphNodeDragConfig();\n  }\n\n  /**\n   * Handles d3 drag 'end' event.\n   * @returns {undefined}\n   */\n  _onDragEnd = () => {\n    this.isDraggingNode = false;\n\n    if (this.state.draggedNode) {\n      this.onNodePositionChange(this.state.draggedNode);\n      this._tick({ draggedNode: null });\n    }\n\n    !this.state.config.staticGraph &&\n      this.state.config.automaticRearrangeAfterDropNode &&\n      this.state.simulation\n        .alphaTarget(this.state.config.d3.alphaTarget)\n        .restart();\n  };\n\n  /**\n   * Handles d3 'drag' event.\n   * {@link https://github.com/d3/d3-drag/blob/master/README.md#drag_subject|more about d3 drag}\n   * @param  {Object} ev - if not undefined it will contain event data.\n   * @param  {number} index - index of the node that is being dragged.\n   * @param  {Array.<Object>} nodeList - array of d3 nodes. This list of nodes is provided by d3, each\n   * node contains all information that was previously fed by rd3g.\n   * @returns {undefined}\n   */\n  _onDragMove = (ev, index, nodeList) => {\n    const id = nodeList[index].id;\n\n    if (!this.state.config.staticGraph) {\n      // this is where d3 and react bind\n      let draggedNode = this.state.nodes[id];\n\n      draggedNode.oldX = draggedNode.x;\n      draggedNode.oldY = draggedNode.y;\n\n      // set nodes fixing coords fx and fy\n      draggedNode[\"fx\"] = draggedNode.x;\n      draggedNode[\"fy\"] = draggedNode.y;\n\n      this._tick({ draggedNode });\n    }\n  };\n\n  /**\n   * Handles d3 drag 'start' event.\n   * @returns {undefined}\n   */\n  _onDragStart = () => {\n    this.isDraggingNode = true;\n    this.pauseSimulation();\n\n    if (this.state.enableFocusAnimation) {\n      this.setState({ enableFocusAnimation: false });\n    }\n  };\n\n  /**\n   * Sets nodes and links highlighted value.\n   * @param  {string} id - the id of the node to highlight.\n   * @param  {boolean} [value=false] - the highlight value to be set (true or false).\n   * @returns {undefined}\n   */\n  _setNodeHighlightedValue = (id, value = false) =>\n    this._tick(\n      updateNodeHighlightedValue(\n        this.state.nodes,\n        this.state.links,\n        this.state.config,\n        id,\n        value\n      )\n    );\n\n  /**\n   * The tick function simply calls React set state in order to update component and render nodes\n   * along time as d3 calculates new node positioning.\n   * @param {Object} state - new state to pass on.\n   * @param {Function} [cb] - optional callback to fed in to {@link setState()|https://reactjs.org/docs/react-component.html#setstate}.\n   * @returns {undefined}\n   */\n  _tick = (state = {}, cb) => {\n    cb ? this.setState(state, cb) : this.setState(state);\n  };\n\n  /**\n   * Configures zoom upon graph with default or user provided values.<br/>\n   * NOTE: in order for users to be able to double click on nodes, we\n   * are disabling the native dblclick.zoom from d3 that performs a zoom\n   * whenever a user double clicks on top of the graph.\n   * {@link https://github.com/d3/d3-zoom#zoom}\n   * @returns {undefined}\n   */\n  _zoomConfig = () => {\n    d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`)\n      .call(\n        d3Zoom()\n          .scaleExtent([this.state.config.minZoom, this.state.config.maxZoom])\n          .on(\"zoom\", this._zoomed)\n      )\n      .on(\"dblclick.zoom\", null);\n  };\n\n  /**\n   * Handler for 'zoom' event within zoom config.\n   * @returns {Object} returns the transformed elements within the svg graph area.\n   */\n  _zoomed = () => {\n    const transform = d3Event.transform;\n\n    d3SelectAll(`#${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`).attr(\n      \"transform\",\n      transform\n    );\n\n    this.state.config.panAndZoom && this.setState({ transform: transform.k });\n  };\n\n  /**\n   * Calls the callback passed to the component.\n   * @param  {Object} e - The event of onClick handler.\n   * @returns {undefined}\n   */\n  onClickGraph = (e) => {\n    if (this.state.enableFocusAnimation) {\n      this.setState({ enableFocusAnimation: false });\n    }\n\n    // Only trigger the graph onClickHandler, if not clicked a node or link.\n    // toUpperCase() is added as a precaution, as the documentation says tagName should always\n    // return in UPPERCASE, but chrome returns lowercase\n    const tagName = e.target && e.target.tagName;\n    const name = e?.target?.attributes?.name?.value;\n    const svgContainerName = `svg-container-${this.state.id}`;\n\n    if (tagName.toUpperCase() === \"SVG\" && name === svgContainerName) {\n      this.props.onClickGraph && this.props.onClickGraph(e);\n    }\n  };\n\n  /**\n   * Collapses the nodes, then checks if the click is doubled and calls the callback passed to the component.\n   * @param  {string} clickedNodeId - The id of the node where the click was performed.\n   * @returns {undefined}\n   */\n  onClickNode = (clickedNodeId) => {\n    if (this.state.config.collapsible) {\n      const leafConnections = getTargetLeafConnections(\n        clickedNodeId,\n        this.state.links,\n        this.state.config\n      );\n      const links = toggleLinksMatrixConnections(\n        this.state.links,\n        leafConnections,\n        this.state.config\n      );\n      const d3Links = toggleLinksConnections(this.state.d3Links, links);\n      const firstLeaf = leafConnections?.[\"0\"];\n\n      let isExpanding = false;\n\n      if (firstLeaf) {\n        const visibility = links[firstLeaf.source][firstLeaf.target];\n\n        isExpanding = visibility === 1;\n      }\n\n      this._tick(\n        {\n          links,\n          d3Links,\n        },\n        () => {\n          this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n\n          if (isExpanding) {\n            this._graphNodeDragConfig();\n          }\n        }\n      );\n    } else {\n      if (!this.nodeClickTimer) {\n        this.nodeClickTimer = setTimeout(() => {\n          this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n          this.nodeClickTimer = null;\n        }, CONST.TTL_DOUBLE_CLICK_IN_MS);\n      } else {\n        this.props.onDoubleClickNode &&\n          this.props.onDoubleClickNode(clickedNodeId);\n        this.nodeClickTimer = clearTimeout(this.nodeClickTimer);\n      }\n    }\n  };\n\n  /**\n   * Handles mouse over node event.\n   * @param  {string} id - id of the node that participates in the event.\n   * @returns {undefined}\n   */\n  onMouseOverNode = (id) => {\n    if (this.isDraggingNode) {\n      return;\n    }\n\n    this.props.onMouseOverNode && this.props.onMouseOverNode(id);\n\n    this.state.config.nodeHighlightBehavior &&\n      this._setNodeHighlightedValue(id, true);\n  };\n\n  /**\n   * Handles mouse out node event.\n   * @param  {string} id - id of the node that participates in the event.\n   * @returns {undefined}\n   */\n  onMouseOutNode = (id) => {\n    if (this.isDraggingNode) {\n      return;\n    }\n\n    this.props.onMouseOutNode && this.props.onMouseOutNode(id);\n\n    this.state.config.nodeHighlightBehavior &&\n      this._setNodeHighlightedValue(id, false);\n  };\n\n  /**\n   * Handles mouse over link event.\n   * @param  {string} source - id of the source node that participates in the event.\n   * @param  {string} target - id of the target node that participates in the event.\n   * @returns {undefined}\n   */\n  onMouseOverLink = (source, target) => {\n    this.props.onMouseOverLink && this.props.onMouseOverLink(source, target);\n\n    if (this.state.config.linkHighlightBehavior) {\n      const highlightedLink = { source, target };\n\n      this._tick({ highlightedLink });\n    }\n  };\n\n  /**\n   * Handles mouse out link event.\n   * @param  {string} source - id of the source node that participates in the event.\n   * @param  {string} target - id of the target node that participates in the event.\n   * @returns {undefined}\n   */\n  onMouseOutLink = (source, target) => {\n    this.props.onMouseOutLink && this.props.onMouseOutLink(source, target);\n\n    if (this.state.config.linkHighlightBehavior) {\n      const highlightedLink = undefined;\n\n      this._tick({ highlightedLink });\n    }\n  };\n\n  /**\n   * Handles node position change.\n   * @param {Object} node - an object holding information about the dragged node.\n   * @returns {undefined}\n   */\n  onNodePositionChange = (node) => {\n    if (!this.props.onNodePositionChange) {\n      return;\n    }\n\n    const { id, x, y } = node;\n\n    this.props.onNodePositionChange(id, x, y);\n  };\n\n  /**\n   * Calls d3 simulation.stop().<br/>\n   * {@link https://github.com/d3/d3-force#simulation_stop}\n   * @returns {undefined}\n   */\n  pauseSimulation = () => this.state.simulation.stop();\n\n  /**\n   * This method resets all nodes fixed positions by deleting the properties fx (fixed x)\n   * and fy (fixed y). Following this, a simulation is triggered in order to force nodes to go back\n   * to their original positions (or at least new positions according to the d3 force parameters).\n   * @returns {undefined}\n   */\n  resetNodesPositions = () => {\n    if (!this.state.config.staticGraph) {\n      for (let nodeId in this.state.nodes) {\n        let node = this.state.nodes[nodeId];\n\n        if (node.fx && node.fy) {\n          Reflect.deleteProperty(node, \"fx\");\n          Reflect.deleteProperty(node, \"fy\");\n        }\n      }\n\n      this.state.simulation\n        .alphaTarget(this.state.config.d3.alphaTarget)\n        .restart();\n\n      this._tick();\n    }\n  };\n\n  /**\n   * Calls d3 simulation.restart().<br/>\n   * {@link https://github.com/d3/d3-force#simulation_restart}\n   * @returns {undefined}\n   */\n  restartSimulation = () =>\n    !this.state.config.staticGraph && this.state.simulation.restart();\n\n  constructor(props) {\n    super(props);\n\n    if (!this.props.id) {\n      throwErr(this.constructor.name, ERRORS.GRAPH_NO_ID_PROP);\n    }\n\n    this.focusAnimationTimeout = null;\n    this.nodeClickTimer = null;\n    this.isDraggingNode = false;\n    this.state = initializeGraphState(this.props, this.state);\n  }\n\n  /**\n   * @deprecated\n   * `componentWillReceiveProps` has a replacement method in react v16.3 onwards.\n   * that is getDerivedStateFromProps.\n   * But one needs to be aware that if an anti pattern of `componentWillReceiveProps` is\n   * in place for this implementation the migration might not be that easy.\n   * See {@link https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html}.\n   * @param {Object} nextProps - props.\n   * @returns {undefined}\n   */\n  // eslint-disable-next-line\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      graphElementsUpdated,\n      newGraphElements,\n    } = checkForGraphElementsChanges(nextProps, this.state);\n    const state = graphElementsUpdated\n      ? initializeGraphState(nextProps, this.state)\n      : this.state;\n    const newConfig = nextProps.config || {};\n    const { configUpdated, d3ConfigUpdated } = checkForGraphConfigChanges(\n      nextProps,\n      this.state\n    );\n    const config = configUpdated\n      ? merge(DEFAULT_CONFIG, newConfig)\n      : this.state.config;\n\n    // in order to properly update graph data we need to pause eventual d3 ongoing animations\n    newGraphElements && this.pauseSimulation();\n\n    const transform =\n      newConfig.panAndZoom !== this.state.config.panAndZoom\n        ? 1\n        : this.state.transform;\n    const focusedNodeId = nextProps.data.focusedNodeId;\n    const d3FocusedNode = this.state.d3Nodes.find(\n      (node) => `${node.id}` === `${focusedNodeId}`\n    );\n    const focusTransformation = getCenterAndZoomTransformation(\n      d3FocusedNode,\n      this.state.config\n    );\n    const enableFocusAnimation =\n      this.props.data.focusedNodeId !== nextProps.data.focusedNodeId;\n\n    this.setState({\n      ...state,\n      config,\n      configUpdated,\n      d3ConfigUpdated,\n      newGraphElements,\n      transform,\n      focusedNodeId,\n      enableFocusAnimation,\n      focusTransformation,\n    });\n  }\n\n  componentDidUpdate() {\n    // if the property staticGraph was activated we want to stop possible ongoing simulation\n    const shouldPause =\n      this.state.config.staticGraph ||\n      this.state.config.staticGraphWithDragAndDrop;\n\n    if (shouldPause) {\n      this.pauseSimulation();\n    }\n\n    if (\n      !this.state.config.staticGraph &&\n      (this.state.newGraphElements || this.state.d3ConfigUpdated)\n    ) {\n      this._graphBindD3ToReactComponent();\n\n      if (!this.state.config.staticGraphWithDragAndDrop) {\n        this.restartSimulation();\n      }\n\n      this.setState({ newGraphElements: false, d3ConfigUpdated: false });\n    } else if (this.state.configUpdated) {\n      this._graphNodeDragConfig();\n    }\n\n    if (this.state.configUpdated) {\n      this._zoomConfig();\n      this.setState({ configUpdated: false });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.config.staticGraph) {\n      this._graphBindD3ToReactComponent();\n    }\n\n    // graph zoom and drag&drop all network\n    this._zoomConfig();\n  }\n\n  componentWillUnmount() {\n    this.pauseSimulation();\n\n    if (this.nodeClickTimer) {\n      clearTimeout(this.nodeClickTimer);\n      this.nodeClickTimer = null;\n    }\n\n    if (this.focusAnimationTimeout) {\n      clearTimeout(this.focusAnimationTimeout);\n      this.focusAnimationTimeout = null;\n    }\n  }\n\n  render() {\n    const { nodes, links, defs } = renderGraph(\n      this.state.nodes,\n      {\n        onClickNode: this.onClickNode,\n        onDoubleClickNode: this.onDoubleClickNode,\n        onRightClickNode: this.props.onRightClickNode,\n        onMouseOverNode: this.onMouseOverNode,\n        onMouseOut: this.onMouseOutNode,\n      },\n      this.state.d3Links,\n      this.state.links,\n      {\n        onClickLink: this.props.onClickLink,\n        onRightClickLink: this.props.onRightClickLink,\n        onMouseOverLink: this.onMouseOverLink,\n        onMouseOutLink: this.onMouseOutLink,\n      },\n      this.state.config,\n      this.state.highlightedNode,\n      this.state.highlightedLink,\n      this.state.transform\n    );\n\n    const svgStyle = {\n      height: this.state.config.height,\n      width: this.state.config.width,\n    };\n\n    const containerProps = this._generateFocusAnimationProps();\n\n    return (\n      <div id={`${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`}>\n        <svg\n          name={`svg-container-${this.state.id}`}\n          style={svgStyle}\n          onClick={this.onClickGraph}\n        >\n          {defs}\n          <g\n            id={`${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`}\n            {...containerProps}\n          >\n            {links}\n            {nodes}\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}