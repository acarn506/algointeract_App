{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/graph/Graph.jsx\";\nimport React from \"react\";\nimport { drag as d3Drag } from \"d3-drag\";\nimport { forceLink as d3ForceLink } from \"d3-force\";\nimport { select as d3Select, selectAll as d3SelectAll, event as d3Event } from \"d3-selection\";\nimport { zoom as d3Zoom } from \"d3-zoom\";\nimport CONST from \"./graph.const\";\nimport DEFAULT_CONFIG from \"./graph.config\";\nimport ERRORS from \"../../err\";\nimport { getTargetLeafConnections, toggleLinksMatrixConnections, toggleLinksConnections } from \"./collapse.helper\";\nimport { updateNodeHighlightedValue, checkForGraphConfigChanges, checkForGraphElementsChanges, getCenterAndZoomTransformation, initializeGraphState } from \"./graph.helper\";\nimport { renderGraph } from \"./graph.renderer\";\nimport { merge, throwErr } from \"../../utils\";\n/**\n * Graph component is the main component for react-d3-graph components, its interface allows its user\n * to build the graph once the user provides the data, configuration (optional) and callback interactions (also optional).\n * The code for the [live example](https://danielcaldas.github.io/react-d3-graph/sandbox/index.html)\n * can be consulted [here](https://github.com/danielcaldas/react-d3-graph/blob/master/sandbox/Sandbox.jsx)\n * @example\n * import { Graph } from 'react-d3-graph';\n *\n * // graph payload (with minimalist structure)\n * const data = {\n *     nodes: [\n *       {id: 'Harry'},\n *       {id: 'Sally'},\n *       {id: 'Alice'}\n *     ],\n *     links: [\n *         {source: 'Harry', target: 'Sally'},\n *         {source: 'Harry', target: 'Alice'},\n *     ]\n * };\n *\n * // the graph configuration, you only need to pass down properties\n * // that you want to override, otherwise default ones will be used\n * const myConfig = {\n *     nodeHighlightBehavior: true,\n *     node: {\n *         color: 'lightgreen',\n *         size: 120,\n *         highlightStrokeColor: 'blue'\n *     },\n *     link: {\n *         highlightColor: 'lightblue'\n *     }\n * };\n *\n * // Callback to handle click on the graph.\n * // @param {Object} event click dom event\n * const onClickGraph = function(event) {\n *      window.alert('Clicked the graph background');\n * };\n *\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node ${nodeId}');\n * };\n *\n * const onDoubleClickNode = function(nodeId) {\n *      window.alert('Double clicked node ${nodeId}');\n * };\n *\n * const onRightClickNode = function(event, nodeId) {\n *      window.alert('Right clicked node ${nodeId}');\n * };\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert(`Mouse over node ${nodeId}`);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert(`Mouse out node ${nodeId}`);\n * };\n *\n * const onClickLink = function(source, target) {\n *      window.alert(`Clicked link between ${source} and ${target}`);\n * };\n *\n * const onRightClickLink = function(event, source, target) {\n *      window.alert('Right clicked link between ${source} and ${target}');\n * };\n *\n * const onMouseOverLink = function(source, target) {\n *      window.alert(`Mouse over in link between ${source} and ${target}`);\n * };\n *\n * const onMouseOutLink = function(source, target) {\n *      window.alert(`Mouse out link between ${source} and ${target}`);\n * };\n *\n * const onNodePositionChange = function(nodeId, x, y) {\n *      window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n * };\n *\n *\n * <Graph\n *      id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n *      data={data}\n *      config={myConfig}\n *      onClickGraph={onClickGraph}\n *      onClickNode={onClickNode}\n *      onDoubleClickNode={onDoubleClickNode}\n *      onRightClickNode={onRightClickNode}\n *      onClickLink={onClickLink}\n *      onRightClickLink={onRightClickLink}\n *      onMouseOverNode={onMouseOverNode}\n *      onMouseOutNode={onMouseOutNode}\n *      onMouseOverLink={onMouseOverLink}\n *      onMouseOutLink={onMouseOutLink}/>\n */\n\nexport default class Graph extends React.Component {\n  /**\n   * Obtain a set of properties which will be used to perform the focus and zoom animation if\n   * required. In case there's not a focus and zoom animation in progress, it should reset the\n   * transition duration to zero and clear transformation styles.\n   * @returns {Object} - Focus and zoom animation properties.\n   */\n\n  /**\n   * This method runs {@link d3-force|https://github.com/d3/d3-force}\n   * against the current graph.\n   * @returns {undefined}\n   */\n  _graphLinkForceConfig() {\n    const forceLink = d3ForceLink(this.state.d3Links).id(l => l.id).distance(this.state.config.d3.linkLength).strength(this.state.config.d3.linkStrength);\n    this.state.simulation.force(CONST.LINK_CLASS_NAME, forceLink);\n  }\n  /**\n   * This method runs {@link d3-drag|https://github.com/d3/d3-drag}\n   * against the current graph.\n   * @returns {undefined}\n   */\n\n\n  _graphNodeDragConfig() {\n    const customNodeDrag = d3Drag().on(\"start\", this._onDragStart).on(\"drag\", this._onDragMove).on(\"end\", this._onDragEnd);\n    d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`).selectAll(\".node\").call(customNodeDrag);\n  }\n  /**\n   * Sets d3 tick function and configures other d3 stuff such as forces and drag events.\n   * Whenever called binds Graph component state with d3.\n   * @returns {undefined}\n   */\n\n\n  _graphBindD3ToReactComponent() {\n    if (!this.state.config.d3.disableLinkForce) {\n      this.state.simulation.nodes(this.state.d3Nodes).on(\"tick\", this._tick);\n\n      this._graphLinkForceConfig();\n    }\n\n    this._graphNodeDragConfig();\n  }\n  /**\n   * Handles d3 drag 'end' event.\n   * @returns {undefined}\n   */\n\n\n  constructor(props) {\n    super(props);\n\n    this._generateFocusAnimationProps = () => {\n      const {\n        focusedNodeId\n      } = this.state; // In case an older animation was still not complete, clear previous timeout to ensure the new one is not cancelled\n\n      if (this.state.enableFocusAnimation) {\n        if (this.focusAnimationTimeout) {\n          clearTimeout(this.focusAnimationTimeout);\n        }\n\n        this.focusAnimationTimeout = setTimeout(() => this.setState({\n          enableFocusAnimation: false\n        }), this.state.config.focusAnimationDuration * 1000);\n      }\n\n      const transitionDuration = this.state.enableFocusAnimation ? this.state.config.focusAnimationDuration : 0;\n      return {\n        style: {\n          transitionDuration: `${transitionDuration}s`\n        },\n        transform: focusedNodeId ? this.state.focusTransformation : null\n      };\n    };\n\n    this._onDragEnd = () => {\n      this.isDraggingNode = false;\n\n      if (this.state.draggedNode) {\n        this.onNodePositionChange(this.state.draggedNode);\n\n        this._tick({\n          draggedNode: null\n        });\n      }\n\n      !this.state.config.staticGraph && this.state.config.automaticRearrangeAfterDropNode && this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n    };\n\n    this._onDragMove = (ev, index, nodeList) => {\n      const id = nodeList[index].id;\n\n      if (!this.state.config.staticGraph) {\n        // this is where d3 and react bind\n        let draggedNode = this.state.nodes[id];\n        draggedNode.oldX = draggedNode.x;\n        draggedNode.oldY = draggedNode.y;\n        draggedNode.x += d3Event.dx;\n        draggedNode.y += d3Event.dy; // set nodes fixing coords fx and fy\n\n        draggedNode[\"fx\"] = draggedNode.x;\n        draggedNode[\"fy\"] = draggedNode.y;\n\n        this._tick({\n          draggedNode\n        });\n      }\n    };\n\n    this._onDragStart = () => {\n      this.isDraggingNode = true;\n      this.pauseSimulation();\n\n      if (this.state.enableFocusAnimation) {\n        this.setState({\n          enableFocusAnimation: false\n        });\n      }\n    };\n\n    this._setNodeHighlightedValue = (id, value = false) => this._tick(updateNodeHighlightedValue(this.state.nodes, this.state.links, this.state.config, id, value));\n\n    this._tick = (state = {}, cb) => cb ? this.setState(state, cb) : this.setState(state);\n\n    this._zoomConfig = () => {\n      d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`).call(d3Zoom().scaleExtent([this.state.config.minZoom, this.state.config.maxZoom]).on(\"zoom\", this._zoomed)).on(\"dblclick.zoom\", null);\n    };\n\n    this._zoomed = () => {\n      const transform = d3Event.transform;\n      d3SelectAll(`#${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`).attr(\"transform\", transform);\n      this.state.config.panAndZoom && this.setState({\n        transform: transform.k\n      });\n    };\n\n    this.onClickGraph = e => {\n      var _e$target, _e$target$attributes, _e$target$attributes$;\n\n      if (this.state.enableFocusAnimation) {\n        this.setState({\n          enableFocusAnimation: false\n        });\n      } // Only trigger the graph onClickHandler, if not clicked a node or link.\n      // toUpperCase() is added as a precaution, as the documentation says tagName should always\n      // return in UPPERCASE, but chrome returns lowercase\n\n\n      const tagName = e.target && e.target.tagName;\n      const name = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$attributes = _e$target.attributes) === null || _e$target$attributes === void 0 ? void 0 : (_e$target$attributes$ = _e$target$attributes.name) === null || _e$target$attributes$ === void 0 ? void 0 : _e$target$attributes$.value;\n      const svgContainerName = `svg-container-${this.state.id}`;\n\n      if (tagName.toUpperCase() === \"SVG\" && name === svgContainerName) {\n        this.props.onClickGraph && this.props.onClickGraph(e);\n      }\n    };\n\n    this.onClickNode = clickedNodeId => {\n      if (this.state.config.collapsible) {\n        const leafConnections = getTargetLeafConnections(clickedNodeId, this.state.links, this.state.config);\n        const links = toggleLinksMatrixConnections(this.state.links, leafConnections, this.state.config);\n        const d3Links = toggleLinksConnections(this.state.d3Links, links);\n        const firstLeaf = leafConnections === null || leafConnections === void 0 ? void 0 : leafConnections[\"0\"];\n        let isExpanding = false;\n\n        if (firstLeaf) {\n          const visibility = links[firstLeaf.source][firstLeaf.target];\n          isExpanding = visibility === 1;\n        }\n\n        this._tick({\n          links,\n          d3Links\n        }, () => {\n          this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n\n          if (isExpanding) {\n            this._graphNodeDragConfig();\n          }\n        });\n      } else {\n        if (!this.nodeClickTimer) {\n          this.nodeClickTimer = setTimeout(() => {\n            this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n            this.nodeClickTimer = null;\n          }, CONST.TTL_DOUBLE_CLICK_IN_MS);\n        } else {\n          this.props.onDoubleClickNode && this.props.onDoubleClickNode(clickedNodeId);\n          this.nodeClickTimer = clearTimeout(this.nodeClickTimer);\n        }\n      }\n    };\n\n    this.onMouseOverNode = id => {\n      if (this.isDraggingNode) {\n        return;\n      }\n\n      this.props.onMouseOverNode && this.props.onMouseOverNode(id);\n      this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, true);\n    };\n\n    this.onMouseOutNode = id => {\n      if (this.isDraggingNode) {\n        return;\n      }\n\n      this.props.onMouseOutNode && this.props.onMouseOutNode(id);\n      this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, false);\n    };\n\n    this.onMouseOverLink = (source, target) => {\n      this.props.onMouseOverLink && this.props.onMouseOverLink(source, target);\n\n      if (this.state.config.linkHighlightBehavior) {\n        const highlightedLink = {\n          source,\n          target\n        };\n\n        this._tick({\n          highlightedLink\n        });\n      }\n    };\n\n    this.onMouseOutLink = (source, target) => {\n      this.props.onMouseOutLink && this.props.onMouseOutLink(source, target);\n\n      if (this.state.config.linkHighlightBehavior) {\n        const highlightedLink = undefined;\n\n        this._tick({\n          highlightedLink\n        });\n      }\n    };\n\n    this.onNodePositionChange = node => {\n      if (!this.props.onNodePositionChange) {\n        return;\n      }\n\n      const {\n        id,\n        x,\n        y\n      } = node;\n      this.props.onNodePositionChange(id, x, y);\n    };\n\n    this.pauseSimulation = () => this.state.simulation.stop();\n\n    this.resetNodesPositions = () => {\n      if (!this.state.config.staticGraph) {\n        for (let nodeId in this.state.nodes) {\n          let node = this.state.nodes[nodeId];\n\n          if (node.fx && node.fy) {\n            Reflect.deleteProperty(node, \"fx\");\n            Reflect.deleteProperty(node, \"fy\");\n          }\n        }\n\n        this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n\n        this._tick();\n      }\n    };\n\n    this.restartSimulation = () => !this.state.config.staticGraph && this.state.simulation.restart();\n\n    if (!this.props.id) {\n      throwErr(this.constructor.name, ERRORS.GRAPH_NO_ID_PROP);\n    }\n\n    this.focusAnimationTimeout = null;\n    this.nodeClickTimer = null;\n    this.isDraggingNode = false;\n    this.state = initializeGraphState(this.props, this.state);\n  }\n  /**\n   * @deprecated\n   * `componentWillReceiveProps` has a replacement method in react v16.3 onwards.\n   * that is getDerivedStateFromProps.\n   * But one needs to be aware that if an anti pattern of `componentWillReceiveProps` is\n   * in place for this implementation the migration might not be that easy.\n   * See {@link https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html}.\n   * @param {Object} nextProps - props.\n   * @returns {undefined}\n   */\n  // eslint-disable-next-line\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      graphElementsUpdated,\n      newGraphElements\n    } = checkForGraphElementsChanges(nextProps, this.state);\n    const state = graphElementsUpdated ? initializeGraphState(nextProps, this.state) : this.state;\n    const newConfig = nextProps.config || {};\n    const {\n      configUpdated,\n      d3ConfigUpdated\n    } = checkForGraphConfigChanges(nextProps, this.state);\n    const config = configUpdated ? merge(DEFAULT_CONFIG, newConfig) : this.state.config; // in order to properly update graph data we need to pause eventual d3 ongoing animations\n\n    newGraphElements && this.pauseSimulation();\n    const transform = newConfig.panAndZoom !== this.state.config.panAndZoom ? 1 : this.state.transform;\n    const focusedNodeId = nextProps.data.focusedNodeId;\n    const d3FocusedNode = this.state.d3Nodes.find(node => `${node.id}` === `${focusedNodeId}`);\n    const focusTransformation = getCenterAndZoomTransformation(d3FocusedNode, this.state.config);\n    const enableFocusAnimation = this.props.data.focusedNodeId !== nextProps.data.focusedNodeId;\n    this.setState({ ...state,\n      config,\n      configUpdated,\n      d3ConfigUpdated,\n      newGraphElements,\n      transform,\n      focusedNodeId,\n      enableFocusAnimation,\n      focusTransformation\n    });\n  }\n\n  componentDidUpdate() {\n    // if the property staticGraph was activated we want to stop possible ongoing simulation\n    const shouldPause = this.state.config.staticGraph || this.state.config.staticGraphWithDragAndDrop;\n\n    if (shouldPause) {\n      this.pauseSimulation();\n    }\n\n    if (!this.state.config.staticGraph && (this.state.newGraphElements || this.state.d3ConfigUpdated)) {\n      this._graphBindD3ToReactComponent();\n\n      if (!this.state.config.staticGraphWithDragAndDrop) {\n        this.restartSimulation();\n      }\n\n      this.setState({\n        newGraphElements: false,\n        d3ConfigUpdated: false\n      });\n    } else if (this.state.configUpdated) {\n      this._graphNodeDragConfig();\n    }\n\n    if (this.state.configUpdated) {\n      this._zoomConfig();\n\n      this.setState({\n        configUpdated: false\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.config.staticGraph) {\n      this._graphBindD3ToReactComponent();\n    } // graph zoom and drag&drop all network\n\n\n    this._zoomConfig();\n  }\n\n  componentWillUnmount() {\n    this.pauseSimulation();\n\n    if (this.nodeClickTimer) {\n      clearTimeout(this.nodeClickTimer);\n      this.nodeClickTimer = null;\n    }\n\n    if (this.focusAnimationTimeout) {\n      clearTimeout(this.focusAnimationTimeout);\n      this.focusAnimationTimeout = null;\n    }\n  }\n\n  render() {\n    const {\n      nodes,\n      links,\n      defs\n    } = renderGraph(this.state.nodes, {\n      onClickNode: this.onClickNode,\n      onDoubleClickNode: this.onDoubleClickNode,\n      onRightClickNode: this.props.onRightClickNode,\n      onMouseOverNode: this.onMouseOverNode,\n      onMouseOut: this.onMouseOutNode\n    }, this.state.d3Links, this.state.links, {\n      onClickLink: this.props.onClickLink,\n      onRightClickLink: this.props.onRightClickLink,\n      onMouseOverLink: this.onMouseOverLink,\n      onMouseOutLink: this.onMouseOutLink\n    }, this.state.config, this.state.highlightedNode, this.state.highlightedLink, this.state.transform);\n    const svgStyle = {\n      height: this.state.config.height,\n      width: this.state.config.width\n    };\n\n    const containerProps = this._generateFocusAnimationProps();\n\n    return React.createElement(\"div\", {\n      id: `${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      name: `svg-container-${this.state.id}`,\n      style: svgStyle,\n      onClick: this.onClickGraph,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, defs, React.createElement(\"g\", Object.assign({\n      id: `${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`\n    }, containerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }), links, nodes)));\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/graph/Graph.jsx"],"names":["React","drag","d3Drag","forceLink","d3ForceLink","select","d3Select","selectAll","d3SelectAll","event","d3Event","zoom","d3Zoom","CONST","DEFAULT_CONFIG","ERRORS","getTargetLeafConnections","toggleLinksMatrixConnections","toggleLinksConnections","updateNodeHighlightedValue","checkForGraphConfigChanges","checkForGraphElementsChanges","getCenterAndZoomTransformation","initializeGraphState","renderGraph","merge","throwErr","Graph","Component","_graphLinkForceConfig","state","d3Links","id","l","distance","config","d3","linkLength","strength","linkStrength","simulation","force","LINK_CLASS_NAME","_graphNodeDragConfig","customNodeDrag","on","_onDragStart","_onDragMove","_onDragEnd","GRAPH_WRAPPER_ID","call","_graphBindD3ToReactComponent","disableLinkForce","nodes","d3Nodes","_tick","constructor","props","_generateFocusAnimationProps","focusedNodeId","enableFocusAnimation","focusAnimationTimeout","clearTimeout","setTimeout","setState","focusAnimationDuration","transitionDuration","style","transform","focusTransformation","isDraggingNode","draggedNode","onNodePositionChange","staticGraph","automaticRearrangeAfterDropNode","alphaTarget","restart","ev","index","nodeList","oldX","x","oldY","y","dx","dy","pauseSimulation","_setNodeHighlightedValue","value","links","cb","_zoomConfig","scaleExtent","minZoom","maxZoom","_zoomed","GRAPH_CONTAINER_ID","attr","panAndZoom","k","onClickGraph","e","tagName","target","name","attributes","svgContainerName","toUpperCase","onClickNode","clickedNodeId","collapsible","leafConnections","firstLeaf","isExpanding","visibility","source","nodeClickTimer","TTL_DOUBLE_CLICK_IN_MS","onDoubleClickNode","onMouseOverNode","nodeHighlightBehavior","onMouseOutNode","onMouseOverLink","linkHighlightBehavior","highlightedLink","onMouseOutLink","undefined","node","stop","resetNodesPositions","nodeId","fx","fy","Reflect","deleteProperty","restartSimulation","GRAPH_NO_ID_PROP","UNSAFE_componentWillReceiveProps","nextProps","graphElementsUpdated","newGraphElements","newConfig","configUpdated","d3ConfigUpdated","data","d3FocusedNode","find","componentDidUpdate","shouldPause","staticGraphWithDragAndDrop","componentDidMount","componentWillUnmount","render","defs","onRightClickNode","onMouseOut","onClickLink","onRightClickLink","highlightedNode","svgStyle","height","width","containerProps"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { drag as d3Drag } from \"d3-drag\";\nimport { forceLink as d3ForceLink } from \"d3-force\";\nimport { select as d3Select, selectAll as d3SelectAll, event as d3Event } from \"d3-selection\";\nimport { zoom as d3Zoom } from \"d3-zoom\";\n\nimport CONST from \"./graph.const\";\nimport DEFAULT_CONFIG from \"./graph.config\";\nimport ERRORS from \"../../err\";\n\nimport { getTargetLeafConnections, toggleLinksMatrixConnections, toggleLinksConnections } from \"./collapse.helper\";\nimport {\n    updateNodeHighlightedValue,\n    checkForGraphConfigChanges,\n    checkForGraphElementsChanges,\n    getCenterAndZoomTransformation,\n    initializeGraphState,\n} from \"./graph.helper\";\nimport { renderGraph } from \"./graph.renderer\";\nimport { merge, throwErr } from \"../../utils\";\n\n/**\n * Graph component is the main component for react-d3-graph components, its interface allows its user\n * to build the graph once the user provides the data, configuration (optional) and callback interactions (also optional).\n * The code for the [live example](https://danielcaldas.github.io/react-d3-graph/sandbox/index.html)\n * can be consulted [here](https://github.com/danielcaldas/react-d3-graph/blob/master/sandbox/Sandbox.jsx)\n * @example\n * import { Graph } from 'react-d3-graph';\n *\n * // graph payload (with minimalist structure)\n * const data = {\n *     nodes: [\n *       {id: 'Harry'},\n *       {id: 'Sally'},\n *       {id: 'Alice'}\n *     ],\n *     links: [\n *         {source: 'Harry', target: 'Sally'},\n *         {source: 'Harry', target: 'Alice'},\n *     ]\n * };\n *\n * // the graph configuration, you only need to pass down properties\n * // that you want to override, otherwise default ones will be used\n * const myConfig = {\n *     nodeHighlightBehavior: true,\n *     node: {\n *         color: 'lightgreen',\n *         size: 120,\n *         highlightStrokeColor: 'blue'\n *     },\n *     link: {\n *         highlightColor: 'lightblue'\n *     }\n * };\n *\n * // Callback to handle click on the graph.\n * // @param {Object} event click dom event\n * const onClickGraph = function(event) {\n *      window.alert('Clicked the graph background');\n * };\n *\n * const onClickNode = function(nodeId) {\n *      window.alert('Clicked node ${nodeId}');\n * };\n *\n * const onDoubleClickNode = function(nodeId) {\n *      window.alert('Double clicked node ${nodeId}');\n * };\n *\n * const onRightClickNode = function(event, nodeId) {\n *      window.alert('Right clicked node ${nodeId}');\n * };\n *\n * const onMouseOverNode = function(nodeId) {\n *      window.alert(`Mouse over node ${nodeId}`);\n * };\n *\n * const onMouseOutNode = function(nodeId) {\n *      window.alert(`Mouse out node ${nodeId}`);\n * };\n *\n * const onClickLink = function(source, target) {\n *      window.alert(`Clicked link between ${source} and ${target}`);\n * };\n *\n * const onRightClickLink = function(event, source, target) {\n *      window.alert('Right clicked link between ${source} and ${target}');\n * };\n *\n * const onMouseOverLink = function(source, target) {\n *      window.alert(`Mouse over in link between ${source} and ${target}`);\n * };\n *\n * const onMouseOutLink = function(source, target) {\n *      window.alert(`Mouse out link between ${source} and ${target}`);\n * };\n *\n * const onNodePositionChange = function(nodeId, x, y) {\n *      window.alert(`Node ${nodeId} moved to new position x= ${x} y= ${y}`);\n * };\n *\n *\n * <Graph\n *      id='graph-id' // id is mandatory, if no id is defined rd3g will throw an error\n *      data={data}\n *      config={myConfig}\n *      onClickGraph={onClickGraph}\n *      onClickNode={onClickNode}\n *      onDoubleClickNode={onDoubleClickNode}\n *      onRightClickNode={onRightClickNode}\n *      onClickLink={onClickLink}\n *      onRightClickLink={onRightClickLink}\n *      onMouseOverNode={onMouseOverNode}\n *      onMouseOutNode={onMouseOutNode}\n *      onMouseOverLink={onMouseOverLink}\n *      onMouseOutLink={onMouseOutLink}/>\n */\nexport default class Graph extends React.Component {\n    /**\n     * Obtain a set of properties which will be used to perform the focus and zoom animation if\n     * required. In case there's not a focus and zoom animation in progress, it should reset the\n     * transition duration to zero and clear transformation styles.\n     * @returns {Object} - Focus and zoom animation properties.\n     */\n    _generateFocusAnimationProps = () => {\n        const { focusedNodeId } = this.state;\n\n        // In case an older animation was still not complete, clear previous timeout to ensure the new one is not cancelled\n        if (this.state.enableFocusAnimation) {\n            if (this.focusAnimationTimeout) {\n                clearTimeout(this.focusAnimationTimeout);\n            }\n\n            this.focusAnimationTimeout = setTimeout(\n                () => this.setState({ enableFocusAnimation: false }),\n                this.state.config.focusAnimationDuration * 1000\n            );\n        }\n\n        const transitionDuration = this.state.enableFocusAnimation ? this.state.config.focusAnimationDuration : 0;\n\n        return {\n            style: { transitionDuration: `${transitionDuration}s` },\n            transform: focusedNodeId ? this.state.focusTransformation : null,\n        };\n    };\n\n    /**\n     * This method runs {@link d3-force|https://github.com/d3/d3-force}\n     * against the current graph.\n     * @returns {undefined}\n     */\n    _graphLinkForceConfig() {\n        const forceLink = d3ForceLink(this.state.d3Links)\n            .id(l => l.id)\n            .distance(this.state.config.d3.linkLength)\n            .strength(this.state.config.d3.linkStrength);\n\n        this.state.simulation.force(CONST.LINK_CLASS_NAME, forceLink);\n    }\n\n    /**\n     * This method runs {@link d3-drag|https://github.com/d3/d3-drag}\n     * against the current graph.\n     * @returns {undefined}\n     */\n    _graphNodeDragConfig() {\n        const customNodeDrag = d3Drag()\n            .on(\"start\", this._onDragStart)\n            .on(\"drag\", this._onDragMove)\n            .on(\"end\", this._onDragEnd);\n\n        d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`)\n            .selectAll(\".node\")\n            .call(customNodeDrag);\n    }\n\n    /**\n     * Sets d3 tick function and configures other d3 stuff such as forces and drag events.\n     * Whenever called binds Graph component state with d3.\n     * @returns {undefined}\n     */\n    _graphBindD3ToReactComponent() {\n        if (!this.state.config.d3.disableLinkForce) {\n            this.state.simulation.nodes(this.state.d3Nodes).on(\"tick\", this._tick);\n            this._graphLinkForceConfig();\n        }\n        this._graphNodeDragConfig();\n    }\n\n    /**\n     * Handles d3 drag 'end' event.\n     * @returns {undefined}\n     */\n    _onDragEnd = () => {\n        this.isDraggingNode = false;\n\n        if (this.state.draggedNode) {\n            this.onNodePositionChange(this.state.draggedNode);\n            this._tick({ draggedNode: null });\n        }\n\n        !this.state.config.staticGraph &&\n            this.state.config.automaticRearrangeAfterDropNode &&\n            this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n    };\n\n    /**\n     * Handles d3 'drag' event.\n     * {@link https://github.com/d3/d3-drag/blob/master/README.md#drag_subject|more about d3 drag}\n     * @param  {Object} ev - if not undefined it will contain event data.\n     * @param  {number} index - index of the node that is being dragged.\n     * @param  {Array.<Object>} nodeList - array of d3 nodes. This list of nodes is provided by d3, each\n     * node contains all information that was previously fed by rd3g.\n     * @returns {undefined}\n     */\n    _onDragMove = (ev, index, nodeList) => {\n        const id = nodeList[index].id;\n\n        if (!this.state.config.staticGraph) {\n            // this is where d3 and react bind\n            let draggedNode = this.state.nodes[id];\n\n            draggedNode.oldX = draggedNode.x;\n            draggedNode.oldY = draggedNode.y;\n\n            draggedNode.x += d3Event.dx;\n            draggedNode.y += d3Event.dy;\n\n            // set nodes fixing coords fx and fy\n            draggedNode[\"fx\"] = draggedNode.x;\n            draggedNode[\"fy\"] = draggedNode.y;\n\n            this._tick({ draggedNode });\n        }\n    };\n\n    /**\n     * Handles d3 drag 'start' event.\n     * @returns {undefined}\n     */\n    _onDragStart = () => {\n        this.isDraggingNode = true;\n        this.pauseSimulation();\n\n        if (this.state.enableFocusAnimation) {\n            this.setState({ enableFocusAnimation: false });\n        }\n    };\n\n    /**\n     * Sets nodes and links highlighted value.\n     * @param  {string} id - the id of the node to highlight.\n     * @param  {boolean} [value=false] - the highlight value to be set (true or false).\n     * @returns {undefined}\n     */\n    _setNodeHighlightedValue = (id, value = false) =>\n        this._tick(updateNodeHighlightedValue(this.state.nodes, this.state.links, this.state.config, id, value));\n\n    /**\n     * The tick function simply calls React set state in order to update component and render nodes\n     * along time as d3 calculates new node positioning.\n     * @param {Object} state - new state to pass on.\n     * @param {Function} [cb] - optional callback to fed in to {@link setState()|https://reactjs.org/docs/react-component.html#setstate}.\n     * @returns {undefined}\n     */\n    _tick = (state = {}, cb) => (cb ? this.setState(state, cb) : this.setState(state));\n\n    /**\n     * Configures zoom upon graph with default or user provided values.<br/>\n     * NOTE: in order for users to be able to double click on nodes, we\n     * are disabling the native dblclick.zoom from d3 that performs a zoom\n     * whenever a user double clicks on top of the graph.\n     * {@link https://github.com/d3/d3-zoom#zoom}\n     * @returns {undefined}\n     */\n    _zoomConfig = () => {\n        d3Select(`#${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`)\n            .call(\n                d3Zoom()\n                    .scaleExtent([this.state.config.minZoom, this.state.config.maxZoom])\n                    .on(\"zoom\", this._zoomed)\n            )\n            .on(\"dblclick.zoom\", null);\n    };\n\n    /**\n     * Handler for 'zoom' event within zoom config.\n     * @returns {Object} returns the transformed elements within the svg graph area.\n     */\n    _zoomed = () => {\n        const transform = d3Event.transform;\n\n        d3SelectAll(`#${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`).attr(\"transform\", transform);\n\n        this.state.config.panAndZoom && this.setState({ transform: transform.k });\n    };\n\n    /**\n     * Calls the callback passed to the component.\n     * @param  {Object} e - The event of onClick handler.\n     * @returns {undefined}\n     */\n    onClickGraph = e => {\n        if (this.state.enableFocusAnimation) {\n            this.setState({ enableFocusAnimation: false });\n        }\n\n        // Only trigger the graph onClickHandler, if not clicked a node or link.\n        // toUpperCase() is added as a precaution, as the documentation says tagName should always\n        // return in UPPERCASE, but chrome returns lowercase\n        const tagName = e.target && e.target.tagName;\n        const name = e?.target?.attributes?.name?.value;\n        const svgContainerName = `svg-container-${this.state.id}`;\n\n        if (tagName.toUpperCase() === \"SVG\" && name === svgContainerName) {\n            this.props.onClickGraph && this.props.onClickGraph(e);\n        }\n    };\n\n    /**\n     * Collapses the nodes, then checks if the click is doubled and calls the callback passed to the component.\n     * @param  {string} clickedNodeId - The id of the node where the click was performed.\n     * @returns {undefined}\n     */\n    onClickNode = clickedNodeId => {\n        if (this.state.config.collapsible) {\n            const leafConnections = getTargetLeafConnections(clickedNodeId, this.state.links, this.state.config);\n            const links = toggleLinksMatrixConnections(this.state.links, leafConnections, this.state.config);\n            const d3Links = toggleLinksConnections(this.state.d3Links, links);\n            const firstLeaf = leafConnections?.[\"0\"];\n\n            let isExpanding = false;\n\n            if (firstLeaf) {\n                const visibility = links[firstLeaf.source][firstLeaf.target];\n\n                isExpanding = visibility === 1;\n            }\n\n            this._tick(\n                {\n                    links,\n                    d3Links,\n                },\n                () => {\n                    this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n\n                    if (isExpanding) {\n                        this._graphNodeDragConfig();\n                    }\n                }\n            );\n        } else {\n            if (!this.nodeClickTimer) {\n                this.nodeClickTimer = setTimeout(() => {\n                    this.props.onClickNode && this.props.onClickNode(clickedNodeId);\n                    this.nodeClickTimer = null;\n                }, CONST.TTL_DOUBLE_CLICK_IN_MS);\n            } else {\n                this.props.onDoubleClickNode && this.props.onDoubleClickNode(clickedNodeId);\n                this.nodeClickTimer = clearTimeout(this.nodeClickTimer);\n            }\n        }\n    };\n\n    /**\n     * Handles mouse over node event.\n     * @param  {string} id - id of the node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOverNode = id => {\n        if (this.isDraggingNode) {\n            return;\n        }\n\n        this.props.onMouseOverNode && this.props.onMouseOverNode(id);\n\n        this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, true);\n    };\n\n    /**\n     * Handles mouse out node event.\n     * @param  {string} id - id of the node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOutNode = id => {\n        if (this.isDraggingNode) {\n            return;\n        }\n\n        this.props.onMouseOutNode && this.props.onMouseOutNode(id);\n\n        this.state.config.nodeHighlightBehavior && this._setNodeHighlightedValue(id, false);\n    };\n\n    /**\n     * Handles mouse over link event.\n     * @param  {string} source - id of the source node that participates in the event.\n     * @param  {string} target - id of the target node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOverLink = (source, target) => {\n        this.props.onMouseOverLink && this.props.onMouseOverLink(source, target);\n\n        if (this.state.config.linkHighlightBehavior) {\n            const highlightedLink = { source, target };\n\n            this._tick({ highlightedLink });\n        }\n    };\n\n    /**\n     * Handles mouse out link event.\n     * @param  {string} source - id of the source node that participates in the event.\n     * @param  {string} target - id of the target node that participates in the event.\n     * @returns {undefined}\n     */\n    onMouseOutLink = (source, target) => {\n        this.props.onMouseOutLink && this.props.onMouseOutLink(source, target);\n\n        if (this.state.config.linkHighlightBehavior) {\n            const highlightedLink = undefined;\n\n            this._tick({ highlightedLink });\n        }\n    };\n\n    /**\n     * Handles node position change.\n     * @param {Object} node - an object holding information about the dragged node.\n     * @returns {undefined}\n     */\n    onNodePositionChange = node => {\n        if (!this.props.onNodePositionChange) {\n            return;\n        }\n\n        const { id, x, y } = node;\n\n        this.props.onNodePositionChange(id, x, y);\n    };\n\n    /**\n     * Calls d3 simulation.stop().<br/>\n     * {@link https://github.com/d3/d3-force#simulation_stop}\n     * @returns {undefined}\n     */\n    pauseSimulation = () => this.state.simulation.stop();\n\n    /**\n     * This method resets all nodes fixed positions by deleting the properties fx (fixed x)\n     * and fy (fixed y). Following this, a simulation is triggered in order to force nodes to go back\n     * to their original positions (or at least new positions according to the d3 force parameters).\n     * @returns {undefined}\n     */\n    resetNodesPositions = () => {\n        if (!this.state.config.staticGraph) {\n            for (let nodeId in this.state.nodes) {\n                let node = this.state.nodes[nodeId];\n\n                if (node.fx && node.fy) {\n                    Reflect.deleteProperty(node, \"fx\");\n                    Reflect.deleteProperty(node, \"fy\");\n                }\n            }\n\n            this.state.simulation.alphaTarget(this.state.config.d3.alphaTarget).restart();\n\n            this._tick();\n        }\n    };\n\n    /**\n     * Calls d3 simulation.restart().<br/>\n     * {@link https://github.com/d3/d3-force#simulation_restart}\n     * @returns {undefined}\n     */\n    restartSimulation = () => !this.state.config.staticGraph && this.state.simulation.restart();\n\n    constructor(props) {\n        super(props);\n\n        if (!this.props.id) {\n            throwErr(this.constructor.name, ERRORS.GRAPH_NO_ID_PROP);\n        }\n\n        this.focusAnimationTimeout = null;\n        this.nodeClickTimer = null;\n        this.isDraggingNode = false;\n        this.state = initializeGraphState(this.props, this.state);\n    }\n\n    /**\n     * @deprecated\n     * `componentWillReceiveProps` has a replacement method in react v16.3 onwards.\n     * that is getDerivedStateFromProps.\n     * But one needs to be aware that if an anti pattern of `componentWillReceiveProps` is\n     * in place for this implementation the migration might not be that easy.\n     * See {@link https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html}.\n     * @param {Object} nextProps - props.\n     * @returns {undefined}\n     */\n    // eslint-disable-next-line\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const { graphElementsUpdated, newGraphElements } = checkForGraphElementsChanges(nextProps, this.state);\n        const state = graphElementsUpdated ? initializeGraphState(nextProps, this.state) : this.state;\n        const newConfig = nextProps.config || {};\n        const { configUpdated, d3ConfigUpdated } = checkForGraphConfigChanges(nextProps, this.state);\n        const config = configUpdated ? merge(DEFAULT_CONFIG, newConfig) : this.state.config;\n\n        // in order to properly update graph data we need to pause eventual d3 ongoing animations\n        newGraphElements && this.pauseSimulation();\n\n        const transform = newConfig.panAndZoom !== this.state.config.panAndZoom ? 1 : this.state.transform;\n        const focusedNodeId = nextProps.data.focusedNodeId;\n        const d3FocusedNode = this.state.d3Nodes.find(node => `${node.id}` === `${focusedNodeId}`);\n        const focusTransformation = getCenterAndZoomTransformation(d3FocusedNode, this.state.config);\n        const enableFocusAnimation = this.props.data.focusedNodeId !== nextProps.data.focusedNodeId;\n\n        this.setState({\n            ...state,\n            config,\n            configUpdated,\n            d3ConfigUpdated,\n            newGraphElements,\n            transform,\n            focusedNodeId,\n            enableFocusAnimation,\n            focusTransformation,\n        });\n    }\n\n    componentDidUpdate() {\n        // if the property staticGraph was activated we want to stop possible ongoing simulation\n        const shouldPause = this.state.config.staticGraph || this.state.config.staticGraphWithDragAndDrop;\n\n        if (shouldPause) {\n            this.pauseSimulation();\n        }\n\n        if (!this.state.config.staticGraph && (this.state.newGraphElements || this.state.d3ConfigUpdated)) {\n            this._graphBindD3ToReactComponent();\n\n            if (!this.state.config.staticGraphWithDragAndDrop) {\n                this.restartSimulation();\n            }\n\n            this.setState({ newGraphElements: false, d3ConfigUpdated: false });\n        } else if (this.state.configUpdated) {\n            this._graphNodeDragConfig();\n        }\n\n        if (this.state.configUpdated) {\n            this._zoomConfig();\n            this.setState({ configUpdated: false });\n        }\n    }\n\n    componentDidMount() {\n        if (!this.state.config.staticGraph) {\n            this._graphBindD3ToReactComponent();\n        }\n\n        // graph zoom and drag&drop all network\n        this._zoomConfig();\n    }\n\n    componentWillUnmount() {\n        this.pauseSimulation();\n\n        if (this.nodeClickTimer) {\n            clearTimeout(this.nodeClickTimer);\n            this.nodeClickTimer = null;\n        }\n\n        if (this.focusAnimationTimeout) {\n            clearTimeout(this.focusAnimationTimeout);\n            this.focusAnimationTimeout = null;\n        }\n    }\n\n    render() {\n        const { nodes, links, defs } = renderGraph(\n            this.state.nodes,\n            {\n                onClickNode: this.onClickNode,\n                onDoubleClickNode: this.onDoubleClickNode,\n                onRightClickNode: this.props.onRightClickNode,\n                onMouseOverNode: this.onMouseOverNode,\n                onMouseOut: this.onMouseOutNode,\n            },\n            this.state.d3Links,\n            this.state.links,\n            {\n                onClickLink: this.props.onClickLink,\n                onRightClickLink: this.props.onRightClickLink,\n                onMouseOverLink: this.onMouseOverLink,\n                onMouseOutLink: this.onMouseOutLink,\n            },\n            this.state.config,\n            this.state.highlightedNode,\n            this.state.highlightedLink,\n            this.state.transform\n        );\n\n        const svgStyle = {\n            height: this.state.config.height,\n            width: this.state.config.width,\n        };\n\n        const containerProps = this._generateFocusAnimationProps();\n\n        return (\n            <div id={`${this.state.id}-${CONST.GRAPH_WRAPPER_ID}`}>\n                <svg name={`svg-container-${this.state.id}`} style={svgStyle} onClick={this.onClickGraph}>\n                    {defs}\n                    <g id={`${this.state.id}-${CONST.GRAPH_CONTAINER_ID}`} {...containerProps}>\n                        {links}\n                        {nodes}\n                    </g>\n                </svg>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}