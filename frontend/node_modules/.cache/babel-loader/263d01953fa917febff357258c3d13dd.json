{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/LeftWindow/LeftWindow.jsx\";\nimport React, { useState } from 'react';\nimport D3Node from '../d3Node/D3Node';\nimport './LeftWindow.css';\n\nconst LeftWindow = () => {\n  //set state of Configurations \n  const [myConfig, setMyConfig] = useState({\n    nodeHighlightBehavior: true,\n    height: window.innerHeight * 0.811,\n    width: window.innerWidth,\n    node: {\n      color: \"lightgreen\",\n      size: 500,\n      highlightStrokeColor: \"blue\",\n      symbolType: \"\"\n    },\n    link: {\n      highlightColor: \"lightblue\"\n    }\n  }); // Change state of Configurations \n\n  const handleConfig = color => {\n    setMyConfig({\n      nodeHighlightBehavior: true,\n      height: window.innerHeight * 0.811,\n      width: window.innerWidth,\n      node: {\n        color: color,\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    });\n  };\n\n  const [color, setColor] = useState('');\n\n  const inputHandler = event => {\n    //prevent the forn submission from refreshing the page\n    event.preventDefault();\n    console.log(color);\n    handleConfig(color); //reset inputs\n    //setName('')\n  };\n\n  return React.createElement(\"div\", {\n    class: \"leftWindow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    class: \"font-weight-light pt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \" Node Size \"), React.createElement(\"div\", {\n    class: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"linkInput\",\n    type: \"text\",\n    name: \"addLink\",\n    placeholder: this.state.addLinkPlaceholder,\n    value: this.state.addLink,\n    onChange: this._addLinkHandleChange,\n    onKeyPress: this._handleLinkKeyEnter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"h5\", {\n    class: \"font-weight-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \" Node Color \"), React.createElement(\"div\", {\n    class: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"color\",\n    id: \"color\",\n    type: \"text\",\n    name: \"nodeColor\",\n    placeholder: this.state.addLinkPlaceholder,\n    value: this.state.addLink,\n    onChange: e => setColor(document.getElementById('color').value),\n    onKeyPress: this._handleLinkKeyEnter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"select\", {\n    class: \"color\",\n    id: \"color\",\n    onChange: e => setColor(document.getElementById('color').value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Color\"), React.createElement(\"option\", {\n    value: \"lightgreen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"lightgreen\"), React.createElement(\"option\", {\n    value: \"blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"blue\"), React.createElement(\"option\", {\n    value: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"red\"), React.createElement(\"option\", {\n    value: \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"orange\"), React.createElement(\"option\", {\n    value: \"purple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"purple\"), React.createElement(\"option\", {\n    value: \"yellow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"yellow\")), React.createElement(\"input\", {\n    class: \"submit\",\n    type: \"submit\",\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }));\n};\n\nexport default LeftWindow;\n/*Name and Target with hooks\n\nconst Input = ({createNode, handleConfig}) => {\n const [name, setName] = useState('')\n const [color, setColor] = useState('')\n const [target, setTarget] = useState('')\n const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        console.log(target)\n        createNode(name, target)\n        handleConfig(color)\n\n        //reset inputs\n        setName('')\n    }\n\n\n    return(\n        <div className='form grid'>\n            <form onSubmit={inputHandler}>\n                \n                <label class='nameL' htmlFor='name'>Name</label>\n                <input\n                    class='name'\n                    type='text'\n                    label=\"Name\"\n                    value={name}\n                    placeholder='Enter a Name'\n                    required onChange={(e) => setName(e.target.value)}\n                />\n             \n                <select class='color' id='color' onChange={ (e) => setColor(document.getElementById('color').value)}>\n                    <option value='default'>Color</option>\n                    <option value='lightgreen'>lightgreen</option>\n                    <option value='blue'>blue</option>\n                    <option value='red'>red</option>\n                    <option value='orange'>orange</option>\n                    <option value='purple'>purple</option>\n                    <option value='yellow'>yellow</option>\n                </select>\n\n\n                <select class='connect' id='connect' onChange={ (e) => setTarget(document.getElementById('connect').value)}>\n                    <option value='default'>Target</option>\n                    <option value='Harry'>Harry</option>\n                    <option value='Sally'>Sally</option>\n                    <option value='Alice'>Alice</option>\n                </select>\n\n            <input class='submit' type='submit' value='Create Node'/>\n            </form>\n        </div>\n    )\n}\n*/","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/LeftWindow/LeftWindow.jsx"],"names":["React","useState","D3Node","LeftWindow","myConfig","setMyConfig","nodeHighlightBehavior","height","window","innerHeight","width","innerWidth","node","color","size","highlightStrokeColor","symbolType","link","highlightColor","handleConfig","setColor","inputHandler","event","preventDefault","console","log","state","addLinkPlaceholder","addLink","_addLinkHandleChange","_handleLinkKeyEnter","e","document","getElementById","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport D3Node from '../d3Node/D3Node'\nimport './LeftWindow.css'\n\nconst LeftWindow = () => {\n\n    //set state of Configurations \n    const [myConfig, setMyConfig] = useState({\n        nodeHighlightBehavior: true,\n        height: window.innerHeight * 0.811,\n        width: window.innerWidth,\n        node: {\n          color: \"lightgreen\",\n          size: 500,\n          highlightStrokeColor: \"blue\",\n          symbolType: \"\"\n        },\n        link: {\n          highlightColor: \"lightblue\"\n        }\n        });\n  \n  \n           // Change state of Configurations \n    const handleConfig = (color) => {\n      setMyConfig({\n        nodeHighlightBehavior: true,\n        height: window.innerHeight * 0.811,\n        width: window.innerWidth,\n        node: {\n          color: color,\n          size: 500,\n          highlightStrokeColor: \"blue\",\n        },\n        link: {\n          highlightColor: \"lightblue\"\n        }\n      })\n    }\n\n    const [color, setColor] = useState('')\n\n    const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        console.log(color)\n        handleConfig(color)\n\n        //reset inputs\n        //setName('')\n    }\n\n\n    return(\n        <div class=\"leftWindow\">\n            <h5 class=\"font-weight-light pt-3\"> Node Size </h5>\n            <div class=\"input-group mb-3\">\n                <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={this._addLinkHandleChange}\n                onKeyPress={this._handleLinkKeyEnter}\n                />\n            </div>\n            \n            <h5 class=\"font-weight-light\"> Node Color </h5>\n            <div class=\"input-group mb-3\">\n                <input\n                class=\"color\"\n                id='color'\n                type=\"text\"\n                name=\"nodeColor\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={(e) => setColor(document.getElementById('color').value)}\n                onKeyPress={this._handleLinkKeyEnter}\n                />\n            </div>\n\n        \n                \n             \n            <select class='color' id='color' onChange={ (e) => setColor(document.getElementById('color').value)}>\n                <option value='default'>Color</option>\n                <option value='lightgreen'>lightgreen</option>\n                <option value='blue'>blue</option>\n                <option value='red'>red</option>\n                <option value='orange'>orange</option>\n                <option value='purple'>purple</option>\n                <option value='yellow'>yellow</option>\n            </select>\n\n\n\n            <input class='submit' type='submit' value=''/>\n        </div>\n    )\n}\n\nexport default LeftWindow\n\n\n\n\n\n/*Name and Target with hooks\n\nconst Input = ({createNode, handleConfig}) => {\n const [name, setName] = useState('')\n const [color, setColor] = useState('')\n const [target, setTarget] = useState('')\n const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        console.log(target)\n        createNode(name, target)\n        handleConfig(color)\n\n        //reset inputs\n        setName('')\n    }\n\n\n    return(\n        <div className='form grid'>\n            <form onSubmit={inputHandler}>\n                \n                <label class='nameL' htmlFor='name'>Name</label>\n                <input\n                    class='name'\n                    type='text'\n                    label=\"Name\"\n                    value={name}\n                    placeholder='Enter a Name'\n                    required onChange={(e) => setName(e.target.value)}\n                />\n             \n                <select class='color' id='color' onChange={ (e) => setColor(document.getElementById('color').value)}>\n                    <option value='default'>Color</option>\n                    <option value='lightgreen'>lightgreen</option>\n                    <option value='blue'>blue</option>\n                    <option value='red'>red</option>\n                    <option value='orange'>orange</option>\n                    <option value='purple'>purple</option>\n                    <option value='yellow'>yellow</option>\n                </select>\n\n\n                <select class='connect' id='connect' onChange={ (e) => setTarget(document.getElementById('connect').value)}>\n                    <option value='default'>Target</option>\n                    <option value='Harry'>Harry</option>\n                    <option value='Sally'>Sally</option>\n                    <option value='Alice'>Alice</option>\n                </select>\n\n            <input class='submit' type='submit' value='Create Node'/>\n            </form>\n        </div>\n    )\n}\n*/"]},"metadata":{},"sourceType":"module"}