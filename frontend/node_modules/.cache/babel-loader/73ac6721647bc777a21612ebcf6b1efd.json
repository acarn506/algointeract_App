{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/AlgoTab/Algorithm.jsx\";\nimport React, { useState } from 'react';\nimport Graph from '../Visualizer/Graph/GraphVisualizer';\nimport LinkedList from '../Visualizer/LinkedList/LinkedListVisualizer';\nimport Tree from '../Visualizer/Tree/TreeVisualizer';\n/*AlgoTab passes current tabKey \nso Algorithm knows which component to render */\n\nconst Algorithm = props => {\n  const [show, setShow] = useState('Graph'); //Selected Algo Component is stored into this variable\n\n  let selectedAlgo = null; //Conditional Rendering \n  //update state \n\n  setShow(prop.algoKey);\n\n  switch (show) {\n    case \"Graph\":\n      selectedAlgo = React.createElement(Graph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      });\n      break;\n\n    case \"LinkedList\":\n      selectedAlgo = React.createElement(LinkedList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n      break;\n\n    case \"Tree\":\n      selectedAlgo = React.createElement(Tree, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n      break;\n\n    default:\n      selectedAlgo = React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Warning something went wrong!!!\");\n  }\n  /*\n  if (props.algoKey === 'LinkedList') {\n      selectedAlgo = <LinkedList/>\n  } else if (props.algoKey === 'Tree') {\n      selectedAlgo = <Tree/>\n  } else {\n      selectedAlgo = <GraphVisualizer/> //Graph by default\n  } */\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, selectedAlgo);\n};\n\nexport default Algorithm;","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/AlgoTab/Algorithm.jsx"],"names":["React","useState","Graph","LinkedList","Tree","Algorithm","props","show","setShow","selectedAlgo","prop","algoKey"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AAEA;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAEzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,OAAD,CAAhC,CAFyB,CAGzB;;AAEA,MAAIQ,YAAY,GAAG,IAAnB,CALyB,CAMzB;AAEA;;AACAD,EAAAA,OAAO,CAACE,IAAI,CAACC,OAAN,CAAP;;AACA,UAAQJ,IAAR;AACI,SAAK,OAAL;AACIE,MAAAA,YAAY,GAAG,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACA;;AACJ,SAAK,YAAL;AACIA,MAAAA,YAAY,GAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACA;;AACJ,SAAK,MAAL;AACIA,MAAAA,YAAY,GAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACA;;AACJ;AACIA,MAAAA,YAAY,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAf;AAXR;AAcA;;;;;;;;;;AASA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,YADL,CADJ;AAKH,CAtCD;;AAwCA,eAAeJ,SAAf","sourcesContent":["import React, {useState} from 'react'\nimport Graph from '../Visualizer/Graph/GraphVisualizer'\nimport LinkedList from '../Visualizer/LinkedList/LinkedListVisualizer'\nimport Tree from '../Visualizer/Tree/TreeVisualizer'\n\n/*AlgoTab passes current tabKey \nso Algorithm knows which component to render */\nconst Algorithm = (props) => {\n\n    const [show, setShow] = useState('Graph')\n    //Selected Algo Component is stored into this variable\n\n    let selectedAlgo = null\n    //Conditional Rendering \n\n    //update state \n    setShow(prop.algoKey)\n    switch (show) {\n        case \"Graph\":\n            selectedAlgo = <Graph/>\n            break\n        case \"LinkedList\":\n            selectedAlgo = <LinkedList/>\n            break\n        case \"Tree\":\n            selectedAlgo = <Tree/>\n            break\n        default:\n            selectedAlgo = <h1>Warning something went wrong!!!</h1>\n    }\n\n    /*\n    if (props.algoKey === 'LinkedList') {\n        selectedAlgo = <LinkedList/>\n    } else if (props.algoKey === 'Tree') {\n        selectedAlgo = <Tree/>\n    } else {\n        selectedAlgo = <GraphVisualizer/> //Graph by default\n    } */\n\n    return(\n        <div>\n            {selectedAlgo}\n        </div>\n    )\n}\n\nexport default Algorithm"]},"metadata":{},"sourceType":"module"}