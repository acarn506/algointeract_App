{"ast":null,"code":"import _objectSpread from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n * @module Graph/collapse-helper\n * @description\n * Offers a series of methods that allow graph to perform the necessary operations to\n * create the collapsible behavior. These functions will most likely operate on\n * the links matrix.\n */import{getId}from\"./graph.helper\";/**\n * For directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */function _isLeafDirected(inDegree,outDegree){return inDegree<=1&&outDegree<1;}/**\n * For not directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */function _isLeafNotDirected(inDegree,outDegree){return inDegree<=1&&outDegree<=1;}/**\n * Given in and out degree tells whether degrees indicate a leaf or non leaf scenario.\n * @param {string} nodeId - The id of the node to get the cardinality of.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @param {boolean} directed - whether graph in context is directed or not.\n * @returns {boolean} flag that indicates whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */function _isLeaf(nodeId,linksMatrix,directed){var _computeNodeDegree=computeNodeDegree(nodeId,linksMatrix),inDegree=_computeNodeDegree.inDegree,outDegree=_computeNodeDegree.outDegree;var fn=directed?_isLeafDirected:_isLeafNotDirected;return fn(inDegree,outDegree);}/**\n * Calculates degree (in and out) of some provided node.\n * @param {string|number} nodeId - the id of the node whom degree we want to compute.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, number>} returns object containing in and out degree of the node:\n * - inDegree: number\n * - outDegree: number\n * @memberof Graph/collapse-helper\n */function computeNodeDegree(nodeId){var linksMatrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return Object.keys(linksMatrix).reduce(function(acc,source){if(!linksMatrix[source]){return acc;}var currentNodeConnections=Object.keys(linksMatrix[source]);return currentNodeConnections.reduce(function(_acc,target){if(nodeId===source){_acc.outDegree+=linksMatrix[nodeId][target];}if(nodeId===target){_acc.inDegree+=linksMatrix[source][nodeId];}return _acc;},acc);},{inDegree:0,outDegree:0});}/**\n * Given a node id we want to calculate the list of leaf connections\n * @param {string} rootNodeId - node who's leafs we want to calculate.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Array.<Object.<string, string>>} a list of leaf connections.\n * What is a leaf connection? A leaf connection is a link between some node A and other node B\n * where A has id equal to rootNodeId and B has inDegree 1 and outDegree 0 (or outDegree 1 but the connection is with A).\n * @memberof Graph/collapse-helper\n */function getTargetLeafConnections(rootNodeId){var linksMatrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _ref=arguments.length>2?arguments[2]:undefined,directed=_ref.directed;var rootConnectionsNodesIds=Object.keys(linksMatrix[rootNodeId]);return rootConnectionsNodesIds.reduce(function(leafConnections,target){if(_isLeaf(target,linksMatrix,directed)){leafConnections.push({source:rootNodeId,target:target});}return leafConnections;},[]);}/**\n * Given a node and the connections matrix, check if node should be displayed\n * NOTE: this function is meant to be used under the `collapsible` toggle, meaning\n * that the `isNodeVisible` actually is checking visibility on collapsible graphs.\n * If you think that this code is confusing and could potentially collide (ðŸ¤ž) with #_isLeaf\n * always remember that *A leaf can, throughout time, both a visible or an invisible node!*.\n *\n * @param {string} nodeId - The id of the node to get the cardinality of\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @returns {boolean} flag that indicates whether node should or not be displayed.\n * @memberof Graph/collapse-helper\n */function isNodeVisible(nodeId,nodes,linksMatrix){if(nodes[nodeId]._orphan){return true;}var _computeNodeDegree2=computeNodeDegree(nodeId,linksMatrix),inDegree=_computeNodeDegree2.inDegree,outDegree=_computeNodeDegree2.outDegree;return inDegree>0||outDegree>0;}/**\n * Updates d3Links by toggling given connections\n * @param {Array.<Object>} d3Links - An array containing all the d3 links.\n * @param {Array.<Object.<string, string>>} connectionMatrix - connections to toggle.\n * @returns {Array.<Object>} updated d3Links.\n * @memberof Graph/collapse-helper\n */function toggleLinksConnections(d3Links,connectionMatrix){return d3Links.map(function(d3Link){var source=d3Link.source,target=d3Link.target;var sourceId=getId(source);var targetId=getId(target);// connectionMatrix[sourceId][targetId] can be 0 or non existent\nvar connection=connectionMatrix&&connectionMatrix[sourceId]&&connectionMatrix[sourceId][targetId];var isHidden=!connection;return _objectSpread({},d3Link,{isHidden:isHidden});});}/**\n * Update matrix given array of connections to toggle.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param {Array.<Object.<string, string>>} connections - connections to toggle on matrix.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Object.<string, Object>} updated linksMatrix\n * @memberof Graph/collapse-helper\n */function toggleLinksMatrixConnections(linksMatrix,connections,_ref2){var directed=_ref2.directed;return connections.reduce(function(newMatrix,link){if(!newMatrix[link.source]){newMatrix[link.source]={};}if(!newMatrix[link.source][link.target]){newMatrix[link.source][link.target]=0;}var newConnectionValue=newMatrix[link.source][link.target]===0?1:0;newMatrix[link.source][link.target]=newConnectionValue;if(!directed){newMatrix[link.target][link.source]=newConnectionValue;}return newMatrix;},_objectSpread({},linksMatrix));}export{computeNodeDegree,getTargetLeafConnections,isNodeVisible,toggleLinksConnections,toggleLinksMatrixConnections};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/LinkedList/Graph/graph/collapse.helper.js"],"names":["getId","_isLeafDirected","inDegree","outDegree","_isLeafNotDirected","_isLeaf","nodeId","linksMatrix","directed","computeNodeDegree","fn","Object","keys","reduce","acc","source","currentNodeConnections","_acc","target","getTargetLeafConnections","rootNodeId","rootConnectionsNodesIds","leafConnections","push","isNodeVisible","nodes","_orphan","toggleLinksConnections","d3Links","connectionMatrix","map","d3Link","sourceId","targetId","connection","isHidden","toggleLinksMatrixConnections","connections","newMatrix","link","newConnectionValue"],"mappings":"kJAAA;;;;;;GAOA,OAASA,KAAT,KAAsB,gBAAtB,CAEA;;;;;;;GAQA,QAASC,CAAAA,eAAT,CAAyBC,QAAzB,CAAmCC,SAAnC,CAA8C,CAC1C,MAAOD,CAAAA,QAAQ,EAAI,CAAZ,EAAiBC,SAAS,CAAG,CAApC,CACH,CAED;;;;;;;GAQA,QAASC,CAAAA,kBAAT,CAA4BF,QAA5B,CAAsCC,SAAtC,CAAiD,CAC7C,MAAOD,CAAAA,QAAQ,EAAI,CAAZ,EAAiBC,SAAS,EAAI,CAArC,CACH,CAED;;;;;;;GAQA,QAASE,CAAAA,OAAT,CAAiBC,MAAjB,CAAyBC,WAAzB,CAAsCC,QAAtC,CAAgD,wBACZC,iBAAiB,CAACH,MAAD,CAASC,WAAT,CADL,CACpCL,QADoC,oBACpCA,QADoC,CAC1BC,SAD0B,oBAC1BA,SAD0B,CAE5C,GAAMO,CAAAA,EAAE,CAAGF,QAAQ,CAAGP,eAAH,CAAqBG,kBAAxC,CAEA,MAAOM,CAAAA,EAAE,CAACR,QAAD,CAAWC,SAAX,CAAT,CACH,CAED;;;;;;;;;GAUA,QAASM,CAAAA,iBAAT,CAA2BH,MAA3B,CAAqD,IAAlBC,CAAAA,WAAkB,2DAAJ,EAAI,CACjD,MAAOI,CAAAA,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBM,MAAzB,CACH,SAACC,GAAD,CAAMC,MAAN,CAAiB,CACb,GAAI,CAACR,WAAW,CAACQ,MAAD,CAAhB,CAA0B,CACtB,MAAOD,CAAAA,GAAP,CACH,CAED,GAAME,CAAAA,sBAAsB,CAAGL,MAAM,CAACC,IAAP,CAAYL,WAAW,CAACQ,MAAD,CAAvB,CAA/B,CAEA,MAAOC,CAAAA,sBAAsB,CAACH,MAAvB,CAA8B,SAACI,IAAD,CAAOC,MAAP,CAAkB,CACnD,GAAIZ,MAAM,GAAKS,MAAf,CAAuB,CACnBE,IAAI,CAACd,SAAL,EAAkBI,WAAW,CAACD,MAAD,CAAX,CAAoBY,MAApB,CAAlB,CACH,CAED,GAAIZ,MAAM,GAAKY,MAAf,CAAuB,CACnBD,IAAI,CAACf,QAAL,EAAiBK,WAAW,CAACQ,MAAD,CAAX,CAAoBT,MAApB,CAAjB,CACH,CAED,MAAOW,CAAAA,IAAP,CACH,CAVM,CAUJH,GAVI,CAAP,CAWH,CAnBE,CAoBH,CACIZ,QAAQ,CAAE,CADd,CAEIC,SAAS,CAAE,CAFf,CApBG,CAAP,CAyBH,CAED;;;;;;;;;;;GAYA,QAASgB,CAAAA,wBAAT,CAAkCC,UAAlC,CAA8E,IAAhCb,CAAAA,WAAgC,2DAAlB,EAAkB,oDAAZC,QAAY,MAAZA,QAAY,CAC1E,GAAMa,CAAAA,uBAAuB,CAAGV,MAAM,CAACC,IAAP,CAAYL,WAAW,CAACa,UAAD,CAAvB,CAAhC,CAEA,MAAOC,CAAAA,uBAAuB,CAACR,MAAxB,CAA+B,SAACS,eAAD,CAAkBJ,MAAlB,CAA6B,CAC/D,GAAIb,OAAO,CAACa,MAAD,CAASX,WAAT,CAAsBC,QAAtB,CAAX,CAA4C,CACxCc,eAAe,CAACC,IAAhB,CAAqB,CACjBR,MAAM,CAAEK,UADS,CAEjBF,MAAM,CAANA,MAFiB,CAArB,EAIH,CAED,MAAOI,CAAAA,eAAP,CACH,CATM,CASJ,EATI,CAAP,CAUH,CAED;;;;;;;;;;;;GAaA,QAASE,CAAAA,aAAT,CAAuBlB,MAAvB,CAA+BmB,KAA/B,CAAsClB,WAAtC,CAAmD,CAC/C,GAAIkB,KAAK,CAACnB,MAAD,CAAL,CAAcoB,OAAlB,CAA2B,CACvB,MAAO,KAAP,CACH,CAH8C,wBAKfjB,iBAAiB,CAACH,MAAD,CAASC,WAAT,CALF,CAKvCL,QALuC,qBAKvCA,QALuC,CAK7BC,SAL6B,qBAK7BA,SAL6B,CAO/C,MAAOD,CAAAA,QAAQ,CAAG,CAAX,EAAgBC,SAAS,CAAG,CAAnC,CACH,CAED;;;;;;GAOA,QAASwB,CAAAA,sBAAT,CAAgCC,OAAhC,CAAyCC,gBAAzC,CAA2D,CACvD,MAAOD,CAAAA,OAAO,CAACE,GAAR,CAAY,SAAAC,MAAM,CAAI,IACjBhB,CAAAA,MADiB,CACEgB,MADF,CACjBhB,MADiB,CACTG,MADS,CACEa,MADF,CACTb,MADS,CAEzB,GAAMc,CAAAA,QAAQ,CAAGhC,KAAK,CAACe,MAAD,CAAtB,CACA,GAAMkB,CAAAA,QAAQ,CAAGjC,KAAK,CAACkB,MAAD,CAAtB,CACA;AACA,GAAMgB,CAAAA,UAAU,CAAGL,gBAAgB,EAAIA,gBAAgB,CAACG,QAAD,CAApC,EAAkDH,gBAAgB,CAACG,QAAD,CAAhB,CAA2BC,QAA3B,CAArE,CACA,GAAME,CAAAA,QAAQ,CAAG,CAACD,UAAlB,CAEA,wBAAYH,MAAZ,EAAoBI,QAAQ,CAARA,QAApB,GACH,CATM,CAAP,CAUH,CAED;;;;;;;;;GAUA,QAASC,CAAAA,4BAAT,CAAsC7B,WAAtC,CAAmD8B,WAAnD,OAA8E,IAAZ7B,CAAAA,QAAY,OAAZA,QAAY,CAC1E,MAAO6B,CAAAA,WAAW,CAACxB,MAAZ,CACH,SAACyB,SAAD,CAAYC,IAAZ,CAAqB,CACjB,GAAI,CAACD,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAd,CAA6B,CACzBuB,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAT,CAAyB,EAAzB,CACH,CAED,GAAI,CAACuB,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAT,CAAuBwB,IAAI,CAACrB,MAA5B,CAAL,CAA0C,CACtCoB,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAT,CAAuBwB,IAAI,CAACrB,MAA5B,EAAsC,CAAtC,CACH,CAED,GAAMsB,CAAAA,kBAAkB,CAAGF,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAT,CAAuBwB,IAAI,CAACrB,MAA5B,IAAwC,CAAxC,CAA4C,CAA5C,CAAgD,CAA3E,CAEAoB,SAAS,CAACC,IAAI,CAACxB,MAAN,CAAT,CAAuBwB,IAAI,CAACrB,MAA5B,EAAsCsB,kBAAtC,CAEA,GAAI,CAAChC,QAAL,CAAe,CACX8B,SAAS,CAACC,IAAI,CAACrB,MAAN,CAAT,CAAuBqB,IAAI,CAACxB,MAA5B,EAAsCyB,kBAAtC,CACH,CAED,MAAOF,CAAAA,SAAP,CACH,CAnBE,kBAoBE/B,WApBF,EAAP,CAsBH,CAED,OACIE,iBADJ,CAEIU,wBAFJ,CAGIK,aAHJ,CAIIG,sBAJJ,CAKIS,4BALJ","sourcesContent":["/**\n * @module Graph/collapse-helper\n * @description\n * Offers a series of methods that allow graph to perform the necessary operations to\n * create the collapsible behavior. These functions will most likely operate on\n * the links matrix.\n */\nimport { getId } from \"./graph.helper\";\n\n/**\n * For directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeafDirected(inDegree, outDegree) {\n    return inDegree <= 1 && outDegree < 1;\n}\n\n/**\n * For not directed graphs.\n * Check based on node degrees whether it is a leaf node or not.\n * @param {number} inDegree - the in degree for a given node.\n * @param {number} outDegree - the out degree for a given node.\n * @returns {boolean} based on the degrees tells whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeafNotDirected(inDegree, outDegree) {\n    return inDegree <= 1 && outDegree <= 1;\n}\n\n/**\n * Given in and out degree tells whether degrees indicate a leaf or non leaf scenario.\n * @param {string} nodeId - The id of the node to get the cardinality of.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @param {boolean} directed - whether graph in context is directed or not.\n * @returns {boolean} flag that indicates whether node is leaf or not.\n * @memberof Graph/collapse-helper\n */\nfunction _isLeaf(nodeId, linksMatrix, directed) {\n    const { inDegree, outDegree } = computeNodeDegree(nodeId, linksMatrix);\n    const fn = directed ? _isLeafDirected : _isLeafNotDirected;\n\n    return fn(inDegree, outDegree);\n}\n\n/**\n * Calculates degree (in and out) of some provided node.\n * @param {string|number} nodeId - the id of the node whom degree we want to compute.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, number>} returns object containing in and out degree of the node:\n * - inDegree: number\n * - outDegree: number\n * @memberof Graph/collapse-helper\n */\nfunction computeNodeDegree(nodeId, linksMatrix = {}) {\n    return Object.keys(linksMatrix).reduce(\n        (acc, source) => {\n            if (!linksMatrix[source]) {\n                return acc;\n            }\n\n            const currentNodeConnections = Object.keys(linksMatrix[source]);\n\n            return currentNodeConnections.reduce((_acc, target) => {\n                if (nodeId === source) {\n                    _acc.outDegree += linksMatrix[nodeId][target];\n                }\n\n                if (nodeId === target) {\n                    _acc.inDegree += linksMatrix[source][nodeId];\n                }\n\n                return _acc;\n            }, acc);\n        },\n        {\n            inDegree: 0,\n            outDegree: 0,\n        }\n    );\n}\n\n/**\n * Given a node id we want to calculate the list of leaf connections\n * @param {string} rootNodeId - node who's leafs we want to calculate.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Array.<Object.<string, string>>} a list of leaf connections.\n * What is a leaf connection? A leaf connection is a link between some node A and other node B\n * where A has id equal to rootNodeId and B has inDegree 1 and outDegree 0 (or outDegree 1 but the connection is with A).\n * @memberof Graph/collapse-helper\n */\nfunction getTargetLeafConnections(rootNodeId, linksMatrix = {}, { directed }) {\n    const rootConnectionsNodesIds = Object.keys(linksMatrix[rootNodeId]);\n\n    return rootConnectionsNodesIds.reduce((leafConnections, target) => {\n        if (_isLeaf(target, linksMatrix, directed)) {\n            leafConnections.push({\n                source: rootNodeId,\n                target,\n            });\n        }\n\n        return leafConnections;\n    }, []);\n}\n\n/**\n * Given a node and the connections matrix, check if node should be displayed\n * NOTE: this function is meant to be used under the `collapsible` toggle, meaning\n * that the `isNodeVisible` actually is checking visibility on collapsible graphs.\n * If you think that this code is confusing and could potentially collide (ðŸ¤ž) with #_isLeaf\n * always remember that *A leaf can, throughout time, both a visible or an invisible node!*.\n *\n * @param {string} nodeId - The id of the node to get the cardinality of\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, number>} linksMatrix - An object containing a matrix of connections of the nodes.\n * @returns {boolean} flag that indicates whether node should or not be displayed.\n * @memberof Graph/collapse-helper\n */\nfunction isNodeVisible(nodeId, nodes, linksMatrix) {\n    if (nodes[nodeId]._orphan) {\n        return true;\n    }\n\n    const { inDegree, outDegree } = computeNodeDegree(nodeId, linksMatrix);\n\n    return inDegree > 0 || outDegree > 0;\n}\n\n/**\n * Updates d3Links by toggling given connections\n * @param {Array.<Object>} d3Links - An array containing all the d3 links.\n * @param {Array.<Object.<string, string>>} connectionMatrix - connections to toggle.\n * @returns {Array.<Object>} updated d3Links.\n * @memberof Graph/collapse-helper\n */\nfunction toggleLinksConnections(d3Links, connectionMatrix) {\n    return d3Links.map(d3Link => {\n        const { source, target } = d3Link;\n        const sourceId = getId(source);\n        const targetId = getId(target);\n        // connectionMatrix[sourceId][targetId] can be 0 or non existent\n        const connection = connectionMatrix && connectionMatrix[sourceId] && connectionMatrix[sourceId][targetId];\n        const isHidden = !connection;\n\n        return { ...d3Link, isHidden };\n    });\n}\n\n/**\n * Update matrix given array of connections to toggle.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @param {Array.<Object.<string, string>>} connections - connections to toggle on matrix.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {boolean} config.directed - tells whether linksMatrix represents a directed graph or not.\n * @returns {Object.<string, Object>} updated linksMatrix\n * @memberof Graph/collapse-helper\n */\nfunction toggleLinksMatrixConnections(linksMatrix, connections, { directed }) {\n    return connections.reduce(\n        (newMatrix, link) => {\n            if (!newMatrix[link.source]) {\n                newMatrix[link.source] = {};\n            }\n\n            if (!newMatrix[link.source][link.target]) {\n                newMatrix[link.source][link.target] = 0;\n            }\n\n            const newConnectionValue = newMatrix[link.source][link.target] === 0 ? 1 : 0;\n\n            newMatrix[link.source][link.target] = newConnectionValue;\n\n            if (!directed) {\n                newMatrix[link.target][link.source] = newConnectionValue;\n            }\n\n            return newMatrix;\n        },\n        { ...linksMatrix }\n    );\n}\n\nexport {\n    computeNodeDegree,\n    getTargetLeafConnections,\n    isNodeVisible,\n    toggleLinksConnections,\n    toggleLinksMatrixConnections,\n};\n"]},"metadata":{},"sourceType":"module"}