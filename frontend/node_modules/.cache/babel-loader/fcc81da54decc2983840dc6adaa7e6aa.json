{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/graph/graph.renderer.jsx\";\n\n/**\n * @module Graph/renderer\n * @description\n * Offers a series of methods that isolate render logic for Graph component.\n */\nimport React from \"react\";\nimport CONST from \"./graph.const\";\nimport { MARKERS, MARKER_SMALL_SIZE, MARKER_MEDIUM_OFFSET, MARKER_LARGE_OFFSET } from \"../marker/marker.const\";\nimport Link from \"../link/Link\";\nimport Node from \"../node/Node\";\nimport Marker from \"../marker/Marker\";\nimport { buildLinkProps, buildNodeProps } from \"./graph.builder\";\nimport { getId } from \"../graph/graph.helper\";\nimport { isNodeVisible } from \"./collapse.helper\";\n/**\n * Build Link components given a list of links.\n * @param  {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Array.<Object>} linksMatrix - array of links {@link #Link|Link}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #graphrenderer|linkCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Array.<Object>} returns the generated array of Link components.\n * @memberof Graph/renderer\n */\n\nfunction _renderLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n  let outLinks = links;\n\n  if (config.collapsible) {\n    outLinks = outLinks.filter(({\n      isHidden\n    }) => !isHidden);\n  }\n\n  return outLinks.map(link => {\n    const {\n      source,\n      target\n    } = link;\n    const sourceId = getId(source);\n    const targetId = getId(target);\n    const key = `${sourceId}${CONST.COORDS_SEPARATOR}${targetId}`;\n    const props = buildLinkProps({ ...link,\n      source: `${sourceId}`,\n      target: `${targetId}`\n    }, nodes, linksMatrix, config, linkCallbacks, `${highlightedNode}`, highlightedLink, transform);\n    return React.createElement(Link, Object.assign({\n      key: key,\n      id: key\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  });\n}\n/**\n * Function that builds Node components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @param  {Object.<string, Object>} linksMatrix - the matrix of connections of the graph\n * @returns {Array.<Object>} returns the generated array of node components\n * @memberof Graph/renderer\n */\n\n\nfunction _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix) {\n  let outNodes = Object.keys(nodes);\n\n  if (config.collapsible) {\n    outNodes = outNodes.filter(nodeId => isNodeVisible(nodeId, nodes, linksMatrix));\n  }\n\n  return outNodes.map(nodeId => {\n    const props = buildNodeProps({ ...nodes[nodeId],\n      id: `${nodeId}`\n    }, config, nodeCallbacks, highlightedNode, highlightedLink, transform);\n    return React.createElement(Node, Object.assign({\n      key: nodeId\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  });\n}\n/**\n * Builds graph defs (for now markers, but we could also have gradients for instance).\n * NOTE: defs are static svg graphical objects, thus we only need to render them once, the result\n * is cached on the 1st call and from there we simply return the cached jsx.\n * @returns {Function} memoized build definitions function.\n * @memberof Graph/renderer\n */\n\n\nfunction _renderDefs() {\n  let cachedDefs;\n  return config => {\n    if (cachedDefs) {\n      return cachedDefs;\n    }\n\n    const small = MARKER_SMALL_SIZE;\n    const medium = small + MARKER_MEDIUM_OFFSET * config.maxZoom / 3;\n    const large = small + MARKER_LARGE_OFFSET * config.maxZoom / 3;\n    const markerProps = {\n      markerWidth: config.link.markerWidth,\n      markerHeight: config.link.markerHeight\n    };\n    cachedDefs = React.createElement(\"defs\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_S,\n      refX: small,\n      fill: config.link.color\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_SH,\n      refX: small,\n      fill: config.link.highlightColor\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_M,\n      refX: medium,\n      fill: config.link.color\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_MH,\n      refX: medium,\n      fill: config.link.highlightColor\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_L,\n      refX: large,\n      fill: config.link.color\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(Marker, Object.assign({\n      id: MARKERS.MARKER_LH,\n      refX: large,\n      fill: config.link.highlightColor\n    }, markerProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })));\n    return cachedDefs;\n  };\n}\n/**\n * Memoized reference for _renderDefs.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @returns {Object} graph reusable objects [defs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs).\n * @memberof Graph/renderer\n */\n\n\nconst _memoizedRenderDefs = _renderDefs();\n/**\n * Method that actually is exported an consumed by Graph component in order to build all Nodes and Link\n * components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an Object that maps adjacent nodes ids (string) and their values (number).\n * ```javascript\n *  // links example\n *  {\n *     \"Androsynth\": {\n *         \"Chenjesu\": 1,\n *         \"Ilwrath\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Guardian\": 1\n *     },\n *     \"Chenjesu\": {\n *         \"Androsynth\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Broodhmome\": 1\n *     },\n *     ...\n *  }\n * ```\n * @param  {Function[]} linkCallbacks - array of callbacks for used defined event handler for link interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object containing the generated nodes and links that form the graph.\n * @memberof Graph/renderer\n */\n\n\nfunction renderGraph(nodes, nodeCallbacks, links, linksMatrix, linkCallbacks, config, highlightedNode, highlightedLink, transform) {\n  return {\n    nodes: _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix),\n    links: _renderLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform),\n    defs: _memoizedRenderDefs(config)\n  };\n}\n\nexport { renderGraph };","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/components/graph/graph.renderer.jsx"],"names":["React","CONST","MARKERS","MARKER_SMALL_SIZE","MARKER_MEDIUM_OFFSET","MARKER_LARGE_OFFSET","Link","Node","Marker","buildLinkProps","buildNodeProps","getId","isNodeVisible","_renderLinks","nodes","links","linksMatrix","config","linkCallbacks","highlightedNode","highlightedLink","transform","outLinks","collapsible","filter","isHidden","map","link","source","target","sourceId","targetId","key","COORDS_SEPARATOR","props","_renderNodes","nodeCallbacks","outNodes","Object","keys","nodeId","id","_renderDefs","cachedDefs","small","medium","maxZoom","large","markerProps","markerWidth","markerHeight","MARKER_S","color","MARKER_SH","highlightColor","MARKER_M","MARKER_MH","MARKER_L","MARKER_LH","_memoizedRenderDefs","renderGraph","defs"],"mappings":"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","sourcesContent":["/**\n * @module Graph/renderer\n * @description\n * Offers a series of methods that isolate render logic for Graph component.\n */\nimport React from \"react\";\n\nimport CONST from \"./graph.const\";\nimport { MARKERS, MARKER_SMALL_SIZE, MARKER_MEDIUM_OFFSET, MARKER_LARGE_OFFSET } from \"../marker/marker.const\";\n\nimport Link from \"../link/Link\";\nimport Node from \"../node/Node\";\nimport Marker from \"../marker/Marker\";\nimport { buildLinkProps, buildNodeProps } from \"./graph.builder\";\nimport { getId } from \"../graph/graph.helper\";\nimport { isNodeVisible } from \"./collapse.helper\";\n\n/**\n * Build Link components given a list of links.\n * @param  {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Array.<Object>} linksMatrix - array of links {@link #Link|Link}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #graphrenderer|linkCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Array.<Object>} returns the generated array of Link components.\n * @memberof Graph/renderer\n */\nfunction _renderLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n    let outLinks = links;\n\n    if (config.collapsible) {\n        outLinks = outLinks.filter(({ isHidden }) => !isHidden);\n    }\n\n    return outLinks.map(link => {\n        const { source, target } = link;\n        const sourceId = getId(source);\n        const targetId = getId(target);\n        const key = `${sourceId}${CONST.COORDS_SEPARATOR}${targetId}`;\n        const props = buildLinkProps(\n            { ...link, source: `${sourceId}`, target: `${targetId}` },\n            nodes,\n            linksMatrix,\n            config,\n            linkCallbacks,\n            `${highlightedNode}`,\n            highlightedLink,\n            transform\n        );\n\n        return <Link key={key} id={key} {...props} />;\n    });\n}\n\n/**\n * Function that builds Node components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @param  {Object.<string, Object>} linksMatrix - the matrix of connections of the graph\n * @returns {Array.<Object>} returns the generated array of node components\n * @memberof Graph/renderer\n */\nfunction _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix) {\n    let outNodes = Object.keys(nodes);\n\n    if (config.collapsible) {\n        outNodes = outNodes.filter(nodeId => isNodeVisible(nodeId, nodes, linksMatrix));\n    }\n\n    return outNodes.map(nodeId => {\n        const props = buildNodeProps(\n            { ...nodes[nodeId], id: `${nodeId}` },\n            config,\n            nodeCallbacks,\n            highlightedNode,\n            highlightedLink,\n            transform\n        );\n\n        return <Node key={nodeId} {...props} />;\n    });\n}\n\n/**\n * Builds graph defs (for now markers, but we could also have gradients for instance).\n * NOTE: defs are static svg graphical objects, thus we only need to render them once, the result\n * is cached on the 1st call and from there we simply return the cached jsx.\n * @returns {Function} memoized build definitions function.\n * @memberof Graph/renderer\n */\nfunction _renderDefs() {\n    let cachedDefs;\n\n    return config => {\n        if (cachedDefs) {\n            return cachedDefs;\n        }\n\n        const small = MARKER_SMALL_SIZE;\n        const medium = small + (MARKER_MEDIUM_OFFSET * config.maxZoom) / 3;\n        const large = small + (MARKER_LARGE_OFFSET * config.maxZoom) / 3;\n\n        const markerProps = {\n            markerWidth: config.link.markerWidth,\n            markerHeight: config.link.markerHeight,\n        };\n\n        cachedDefs = (\n            <defs>\n                <Marker id={MARKERS.MARKER_S} refX={small} fill={config.link.color} {...markerProps} />\n                <Marker id={MARKERS.MARKER_SH} refX={small} fill={config.link.highlightColor} {...markerProps} />\n                <Marker id={MARKERS.MARKER_M} refX={medium} fill={config.link.color} {...markerProps} />\n                <Marker id={MARKERS.MARKER_MH} refX={medium} fill={config.link.highlightColor} {...markerProps} />\n                <Marker id={MARKERS.MARKER_L} refX={large} fill={config.link.color} {...markerProps} />\n                <Marker id={MARKERS.MARKER_LH} refX={large} fill={config.link.highlightColor} {...markerProps} />\n            </defs>\n        );\n\n        return cachedDefs;\n    };\n}\n\n/**\n * Memoized reference for _renderDefs.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @returns {Object} graph reusable objects [defs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs).\n * @memberof Graph/renderer\n */\nconst _memoizedRenderDefs = _renderDefs();\n\n/**\n * Method that actually is exported an consumed by Graph component in order to build all Nodes and Link\n * components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an Object that maps adjacent nodes ids (string) and their values (number).\n * ```javascript\n *  // links example\n *  {\n *     \"Androsynth\": {\n *         \"Chenjesu\": 1,\n *         \"Ilwrath\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Guardian\": 1\n *     },\n *     \"Chenjesu\": {\n *         \"Androsynth\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Broodhmome\": 1\n *     },\n *     ...\n *  }\n * ```\n * @param  {Function[]} linkCallbacks - array of callbacks for used defined event handler for link interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object containing the generated nodes and links that form the graph.\n * @memberof Graph/renderer\n */\nfunction renderGraph(\n    nodes,\n    nodeCallbacks,\n    links,\n    linksMatrix,\n    linkCallbacks,\n    config,\n    highlightedNode,\n    highlightedLink,\n    transform\n) {\n    return {\n        nodes: _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix),\n        links: _renderLinks(\n            nodes,\n            links,\n            linksMatrix,\n            config,\n            linkCallbacks,\n            highlightedNode,\n            highlightedLink,\n            transform\n        ),\n        defs: _memoizedRenderDefs(config),\n    };\n}\n\nexport { renderGraph };\n"]},"metadata":{},"sourceType":"module"}