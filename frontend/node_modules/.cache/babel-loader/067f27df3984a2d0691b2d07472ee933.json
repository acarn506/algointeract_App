{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.traverse = () => {};\n\n    this.appendNode = () => {\n      //get link list tail and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode(); //find the new tail index\n\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.tail;\n      }); //create instance of the tail node\n\n      const tailNode = { ...this.state.data.nodes[tailIndex]\n      }; //assign current tail to new node\n\n      tailNode.next = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //update copy of nodes\n\n      newNodes[tailIndex] = tailNode; //update tail to point to the new tail node\n\n      listInfo.tail = newNode.nodeid; //update state of nodes and tail state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      }); //update link state\n\n      this.state.data.links.push({\n        source: newNode.id,\n        target: tailNode.id\n      });\n    };\n\n    this.prependNode = () => {\n      //get link list head and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode(); //find the current head node\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.head;\n      }); //create instance of the head node\n\n      const headNode = { ...this.state.data.nodes[headIndex]\n      }; //update head positioning \n\n      newNode.next = headNode.nodeid;\n      listInfo.head = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //get index of newNode and update node array\n\n      let lastIndex = newNodes.lastIndexOf();\n      newNodes[lastIndex] = newNode; //update state of nodes \n\n      const data = {\n        nodes: newNodes\n      };\n      this.setState(data); //head state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.state.data.links.push({\n        source: newNode.id,\n        target: headNode.id\n      });\n    };\n\n    this.updateConnection = () => {\n      console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo);\n      let removeName = this.state.removeNodeName;\n      let listInfo = this.state.listInfo;\n      let removeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === removeName;\n      });\n      let newNodes = [...this.state.data.nodes];\n      let removeNode = newNodes[removeIndex];\n\n      if (this.state.data.nodes.length === 0) {\n        console.log(\"Remove last node\");\n        console.log('Length', this.state.data.nodes.length);\n        listInfo.head = null;\n        listInfo.tail = null;\n      } else if (listInfo.head === removeNode.nodeid) {\n        console.log(\"Remove Head\");\n        listInfo.head = removeNode.next;\n        removeNode.next = null;\n        newNodes[removeIndex] = removeNode;\n      } else if (listInfo.tail === removeNode.nodeid) {\n        console.log(\"Remove Tail\");\n        let newTailIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let newTailNode = newNodes[newTailIndex];\n        listInfo.tail = newTailNode.nodeid;\n        newTailNode.next = null;\n        newNodes[newTailIndex] = newTailNode;\n      } else {\n        console.log(\"Remove middle node\");\n        let prevIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let prevNode = newNodes[prevIndex];\n        prevNode.next = removeNode.next;\n        removeNode.next = null;\n        newNodes[prevIndex] = prevNode;\n        newNodes[removeIndex] = removeNode;\n        let middleIndex = this.state.data.links.findIndex(link => {\n          return link.target === removeNode.id;\n        });\n        let removeLinkIndex = this.state.data.links.findIndex(link => {\n          return link.source === removeNode.id;\n        });\n        let newLinks = [...this.state.data.links];\n        let modifyRemoveLink = newLinks[removeLinkIndex];\n        newLinks[middleIndex] = { ...newLinks[middleIndex],\n          target: modifyRemoveLink.target\n        };\n        let updateMiddle = newLinks[middleIndex];\n        let newLink = [...this.state.data.links];\n        let updateLink = newLink.filter((node, index) => {\n          return index !== middleIndex;\n        });\n        console.log(\"updated middle\", updateLink); // console.log('middle link', newLinks)\n\n        this.setState({ ...(this.state.data.links = updateLink)\n        });\n      }\n\n      let updateNode = newNodes.filter((node, index) => {\n        return index !== removeIndex;\n      });\n      this.setState({ ...(this.state.data.nodes = updateNode)\n      });\n      this.setState({\n        listInfo: listInfo\n      });\n      let links = [...this.state.data.links];\n      let removeLinkIndex = links.findIndex(link => {\n        return link.source === removeNode.id;\n      });\n      let updateLinks = links.filter((link, index) => {\n        return index !== removeLinkIndex;\n      });\n      this.setState({ ...(this.state.data.links = updateLinks)\n      });\n      console.log(\"Remove Middle Links\", this.state.data.links);\n      let update = {\n        source: \"b\",\n        target: \"Michael\"\n      }; //setTimeout(() => this.onClickAddLink(update), 500);\n\n      console.log(\"Link Update\", this.state.data.links);\n    };\n\n    this.updateListColor = index => {\n      console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo); //get index of head and tail\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.head;\n      });\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.tail;\n      }); //copy of array\n\n      let newNodes = [...this.state.data.nodes]; //set all nodes to original color\n\n      newNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n      }); //update new head or tail with color\n\n      newNodes[headIndex].color = 'blue';\n      newNodes[tailIndex].color = 'red'; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n    };\n\n    this.getCount = () => {\n      let curCount = this.state.data.nodes.length + Math.floor(Math.random() * 100);\n      curCount++;\n      return curCount;\n    };\n\n    this.getNewNode = () => {\n      let length = this.state.data.nodes.length;\n      return this.state.data.nodes[length - 1];\n    };\n\n    this.onClickAppNode = () => {\n      console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`; //create unique node id\n\n        let newid = this.getCount(); //add node id \n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\"\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.appendNode(); //call to update head and tail color \n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log('nodes', this.state.data.nodes);\n      console.log('listInfo', this.state.listInfo);\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickPreNode = () => {\n      console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.preNodeName === \"\") {\n        this.setState({\n          preNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.preNodeName}`; //create unique node id\n\n        let newid = this.getCount(); //add node id \n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\"\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.prependNode(); //call to update head and tail color \n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log('nodes', this.state.data.nodes);\n      console.log('listInfo', this.state.listInfo);\n      this.setState({\n        preNodeName: \"\",\n        preNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickRemoveNode = () => {\n      console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo);\n\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.updateConnection();\n        let index = this.state.listInfo;\n        this.updateListColor(index); //test\n\n        console.log('nodes', this.state.data.nodes);\n        console.log('listInfo', this.state.listInfo);\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      } //console.log('Before pass list', this.state.listInfo)\n      //console.log('links', this.state.data.links)\n\n    };\n\n    this.onClickAddLink = middleNode => {\n      /*\n        if (this.state.addLink === \"\") {\n          return;\n        }\n        if (this.state.data.nodes && this.state.data.nodes.length) {\n           let source, target;\n          [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n            return e.trim().length > 0;\n          });\n           var sourceExists, targetExists;\n          sourceExists = targetExists = false;\n           for (var i = 0; i < this.state.data.nodes.length; i++) {\n            if (this.state.data.nodes[i].id === source) {\n              sourceExists = true;\n            }\n            if (this.state.data.nodes[i].id === target) {\n              targetExists = true;\n            }\n          }\n           if (!sourceExists || !targetExists) {\n            console.log(\"NODE DOES NOT EXIST!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\",\n            });\n            return;\n          } */\n\n      /*\n            for (var j = 0; j < this.state.data.links.length; j++) {\n              if (\n                this.state.data.links[j].source === source &&\n                this.state.data.links[j].target === target\n              ) {\n                console.log(\"ALREADY EXISTS!\");\n                this.setState({\n                  addLink: \"\",\n                  addLinkPlaceholder: \"Enter as: source, target\",\n                });\n                return;\n              }\n            } */\n      this.state.data.links.push({\n        source: middleNode.source,\n        target: middleNode.target\n      });\n      var found = false;\n      /*\n            for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n              if (source in this.state.algoData.neighbors[i]) {\n                this.state.algoData.neighbors[i][source].push(target);\n                found = true;\n              }\n            }\n      \n            if (!found) {\n              var newNeighbor = {};\n              newNeighbor[source] = [target];\n              this.state.algoData.neighbors.push(newNeighbor);\n            }\n      \n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\",\n            }); */\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._preNodeHandleChange = event => {\n      this.setState({\n        preNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAppNode();\n      }\n    };\n\n    this._handlePreKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickPreNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      //nodeid gives each node a unique index\n      //next is our pointer \n      nodes: [{\n        id: \"Michael\",\n        nodeid: 1,\n        next: null,\n        color: \"\"\n      }],\n      links: [// { source: \"\", target: \"\" },\n      ]\n    }; //private info for linked list, head & tail refers to nodeid attribute of a node \n\n    const _listInfo = {\n      head: 1,\n      tail: 1\n    }; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n    const neighbors = [];\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo: _listInfo\n    }; //this.onClickAddNode = this.onClickAddNode.bind(this)\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  //LINK LIST METHODS\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 795\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 796\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 805\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 881\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 906\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 926\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 947\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 956\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957\n        },\n        __self: this\n      }, \" Append node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 959\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickAppNode(),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 960\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 966\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \" Prepend node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 981\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickPreNode(),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 989\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"preNodeName\",\n        placeholder: this.state.preNodePlaceholder,\n        value: this.state.preNodeName,\n        onChange: this._preNodeHandleChange,\n        onKeyPress: this._handlePreKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1004\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1005\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickRemoveNode(),\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1006\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1012\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015\n        },\n        __self: this\n      }))))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx"],"names":["React","Graph","ReactTooltip","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","traverse","appendNode","listInfo","state","newNode","getNewNode","tailIndex","data","nodes","findIndex","node","nodeid","tail","tailNode","next","newNodes","setState","links","push","source","id","target","prependNode","headIndex","head","headNode","lastIndex","lastIndexOf","updateConnection","console","log","removeName","removeNodeName","removeIndex","removeNode","length","newTailIndex","newTailNode","prevIndex","prevNode","middleIndex","link","removeLinkIndex","newLinks","modifyRemoveLink","updateMiddle","newLink","updateLink","filter","index","updateNode","updateLinks","update","updateListColor","forEach","color","nodeColor","getCount","curCount","Math","floor","random","onClickAppNode","addNodeName","addNodePlaceholder","newid","onClickPreNode","preNodeName","preNodePlaceholder","onClickRemoveNode","removeNodePlaceholder","l","onClickAddLink","middleNode","found","onClickRemoveLink","removeLink","split","e","trim","sourceExists","targetExists","i","removeLinkPlaceholder","algoData","neighbors","_addNodeHandleChange","event","value","_preNodeHandleChange","_removeNodeHandleChange","_handleAddKeyEnter","key","_handlePreKeyEnter","_handleRemoveKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","nodeColorHandler","linkColorHandler","linkColor","rotateHandler","setTimeout","highlightHandler","resetState","counter","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","strokeColor","then","nodeIndex","origNode","foundTarget","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","symbolType","highlightColor","startNode","endNode","algorithm","stack","queue","generatedConfig","nodeIdToBeRemoved","addLink","addLinkPlaceholder","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button} from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      //nodeid gives each node a unique index\n      //next is our pointer \n      nodes: [\n        { id: \"Michael\", nodeid: 1, next: null, color: \"\"}\n      ],\n      links: [\n       // { source: \"\", target: \"\" },\n      ],\n    };\n    //private info for linked list, head & tail refers to nodeid attribute of a node \n    const listInfo = {\n      head: 1, \n      tail: 1\n    }\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n      },\n    };\n\n    const neighbors = [\n    ];\n\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo \n    };\n\n    //this.onClickAddNode = this.onClickAddNode.bind(this)\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  //LINK LIST METHODS\n  traverse = () => {\n\n  }\n\n  appendNode = () => {\n    //get link list tail and the newest added node\n    let listInfo = this.state.listInfo\n    let newNode = this.getNewNode()\n    //find the new tail index\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === listInfo.tail\n    })\n    //create instance of the tail node\n    const tailNode = {\n      ...this.state.data.nodes[tailIndex],\n    };\n    //assign current tail to new node\n    tailNode.next = newNode.nodeid\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes]\n    //update copy of nodes\n    newNodes[tailIndex] = tailNode\n    //update tail to point to the new tail node\n    listInfo.tail = newNode.nodeid\n    //update state of nodes and tail state\n    this.setState({\n      listInfo: listInfo\n    })\n\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n    //update link state\n    this.state.data.links.push({\n      source: newNode.id,\n      target: tailNode.id,\n    });\n\n  }\n\n  prependNode = () => {\n    //get link list head and the newest added node\n    let listInfo = this.state.listInfo\n    let newNode = this.getNewNode()\n    //find the current head node\n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === listInfo.head\n    })\n     //create instance of the head node\n    const headNode = {\n      ...this.state.data.nodes[headIndex],\n    };\n    //update head positioning \n    newNode.next = headNode.nodeid\n    listInfo.head = newNode.nodeid\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes]\n    //get index of newNode and update node array\n    let lastIndex = newNodes.lastIndexOf()\n    newNodes[lastIndex] = newNode\n\n    //update state of nodes \n    const data = {nodes: newNodes}\n    this.setState(data)\n    //head state\n    this.setState({\n      listInfo: listInfo\n    })\n  \n    this.state.data.links.push({\n      source: newNode.id,\n      target: headNode.id,\n    });\n  }\n\n  //remove node still in the works\n  updateConnection = () => {\n    console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo)\n    let removeName = this.state.removeNodeName\n    let listInfo = this.state.listInfo\n\n    let removeIndex = this.state.data.nodes.findIndex( node => {\n      return node.id === removeName\n    })\n\n    let newNodes = [...this.state.data.nodes]\n\n    let removeNode = newNodes[removeIndex]\n\n    if (this.state.data.nodes.length === 0) {\n      console.log(\"Remove last node\")\n      console.log('Length', this.state.data.nodes.length)\n      listInfo.head = null\n      listInfo.tail = null\n    }\n    else if (listInfo.head === removeNode.nodeid) {\n      console.log(\"Remove Head\")\n      listInfo.head = removeNode.next\n      removeNode.next = null\n      newNodes[removeIndex] = removeNode\n    }\n    else if (listInfo.tail === removeNode.nodeid) {\n      console.log(\"Remove Tail\")\n      let newTailIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n  \n      let newTailNode = newNodes[newTailIndex]\n \n      listInfo.tail = newTailNode.nodeid\n      newTailNode.next = null\n      newNodes[newTailIndex] = newTailNode\n    } \n    else {\n      console.log(\"Remove middle node\")\n      let prevIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n      let prevNode = newNodes[prevIndex]\n      prevNode.next = removeNode.next\n      removeNode.next = null\n      newNodes[prevIndex] = prevNode\n      newNodes[removeIndex] = removeNode\n\n      let middleIndex = this.state.data.links.findIndex( (link) => {\n        return  link.target === removeNode.id\n      })\n\n      let removeLinkIndex = this.state.data.links.findIndex( (link) => {\n        return  link.source === removeNode.id\n      })\n      \n      let newLinks = [...this.state.data.links]\n\n      let modifyRemoveLink = newLinks[removeLinkIndex]\n\n      newLinks[middleIndex] = {...newLinks[middleIndex], target: modifyRemoveLink.target}\n\n      let updateMiddle = newLinks[middleIndex]\n\n      let newLink = [...this.state.data.links]\n      \n\n      let updateLink = newLink.filter( (node, index) => {\n        return index !== middleIndex;\n      })\n   \n\n      console.log(\"updated middle\", updateLink)\n      \n     // console.log('middle link', newLinks)\n\n      this.setState({\n        ...this.state.data.links = updateLink\n      }) \n      \n    } \n\n    let updateNode = newNodes.filter( (node, index) => {\n      return index !== removeIndex;\n    })\n\n\n    this.setState({\n      ...this.state.data.nodes = updateNode\n    })\n\n    this.setState({\n      listInfo : listInfo\n    })\n    \n    let links = [...this.state.data.links]\n  \n    let removeLinkIndex = links.findIndex(link => {\n      return link.source === removeNode.id\n    })\n\n    let updateLinks = links.filter( (link, index) => {\n      return index !== removeLinkIndex;\n    })\n\n    this.setState({\n      ...this.state.data.links = updateLinks\n    }) \n\n    console.log(\"Remove Middle Links\", this.state.data.links)\n\n    let update = {source: \"b\", target: \"Michael\"};\n\n    //setTimeout(() => this.onClickAddLink(update), 500);\n\n    console.log(\"Link Update\", this.state.data.links)\n  }\n\n  //set head and tail colors\n  updateListColor = (index) => {\n    console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo)\n    //get index of head and tail\n  \n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.head\n    })\n\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.tail\n    })\n    //copy of array\n    let newNodes = [...this.state.data.nodes]\n    //set all nodes to original color\n    newNodes.forEach( node => {\n      node.color = this.state.nodeColor;\n    });\n    //update new head or tail with color\n    newNodes[headIndex].color = 'blue'\n    newNodes[tailIndex].color = 'red'\n    //update state of nodes\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n  }\n\n  //used for assigning new nodes with a unique node id\n  getCount = () => {\n    let curCount = this.state.data.nodes.length + Math.floor(Math.random() * 100)\n    curCount++\n    return curCount\n  }\n  //retrieve new node \n  getNewNode = () => {\n    let length = this.state.data.nodes.length\n    return this.state.data.nodes[length-1]\n  }\n  //appends or prepends node\n  onClickAppNode = () => {\n    console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo)\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n      //create unique node id\n      let newid = this.getCount()\n      //add node id \n      this.state.data.nodes.push({ id: newNode, nodeid: newid, next: null, color: \"\"});\n      \n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.appendNode()\n\n    //call to update head and tail color \n    let index = this.state.listInfo\n    this.updateListColor(index)\n\n    //console test -> please use for debug\n    console.log('nodes', this.state.data.nodes)\n    console.log('listInfo', this.state.listInfo)\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links)\n  };\n\n  onClickPreNode = () => {\n    console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo)\n    // Checks if the addNodeName is an empty string\n    if (this.state.preNodeName === \"\") {\n      this.setState({\n        preNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.preNodeName}`;\n      //create unique node id\n      let newid = this.getCount()\n      //add node id \n      this.state.data.nodes.push({ id: newNode, nodeid: newid, next: null, color: \"\"});\n      \n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.prependNode()\n\n    //call to update head and tail color \n    let index = this.state.listInfo\n    this.updateListColor(index)\n\n    //console test -> please use for debug\n    console.log('nodes', this.state.data.nodes)\n    console.log('listInfo', this.state.listInfo)\n\n    this.setState({\n      preNodeName: \"\",\n      preNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links)\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo)\n    \n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter((l) => \n      l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.updateConnection()\n\n      let index = this.state.listInfo\n      this.updateListColor(index)\n\n       //test\n      console.log('nodes', this.state.data.nodes)\n      console.log('listInfo', this.state.listInfo)\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\",\n      });\n    }\n    //console.log('Before pass list', this.state.listInfo)\n    //console.log('links', this.state.data.links)\n  };\n\n  onClickAddLink = (middleNode) => {\n  /*\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      } */\n/*\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\",\n          });\n          return;\n        }\n      } */\n\n      this.state.data.links.push({\n        source: middleNode.source,\n        target: middleNode.target,\n      });\n\n      var found = false;\n/*\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][source].push(target);\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var newNeighbor = {};\n        newNeighbor[source] = [target];\n        this.state.algoData.neighbors.push(newNeighbor);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\",\n      }); */\n    }\n // };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            (l) => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  _preNodeHandleChange = (event) => {\n    this.setState({ preNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAppNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAppNode();\n    }\n  };\n\n  _handlePreKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickPreNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  }; \n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                />\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"weight\"\n                  label=\"Weighted\"\n                />\n              </div>\n\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Append node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={() => this.onClickAppNode()}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light pt-2\"> Prepend node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={ () => this.onClickPreNode()}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                      <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"preNodeName\"\n                  placeholder={this.state.preNodePlaceholder}\n                  value={this.state.preNodeName}\n                  onChange={this._preNodeHandleChange}\n                  onKeyPress={this._handlePreKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={() => this.onClickRemoveNode()}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> - </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}