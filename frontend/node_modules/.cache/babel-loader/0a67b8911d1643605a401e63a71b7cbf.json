{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx\";\nimport React from \"../../../../node_modules/react\";\nimport Graph from \"../../React-D3-Graph/Graph/graph/Graph\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./GraphVisualizer.css\";\nimport { wait } from \"@testing-library/react\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.onClickAddNode = () => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.state.data.nodes.push({\n          id: newNode\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } // Adds node to the neighbor array in the state's algoData\n\n\n      let found = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (this.state.addNodeName in this.state.algoData.neighbors[i]) {\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var name = this.state.addNodeName;\n        var newNeighbor = {};\n        newNeighbor[name] = [];\n        this.state.algoData.neighbors.push(newNeighbor);\n        this.setState({\n          algoData: this.state.algoData\n        });\n      }\n\n      console.log(this.state.algoData.neighbors);\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n        var found = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source].push(target);\n            found = true;\n          }\n        }\n\n        if (!found) {\n          var newNeighbor = {};\n          newNeighbor[source] = [target];\n          this.state.algoData.neighbors.push(newNeighbor);\n        }\n\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        endNode: this.state.algoData.endNode,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addEndNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        endNode: event.target.value,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"dfs\") {\n        this.depthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"bfs\") {} else if (this.state.algoData.algorithm === \"djk\") {}\n    };\n\n    this.depthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (startNode in this.state.algoData.neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in this.state.algoData.neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = {\n              startNode: this.state.algoData.stack,\n              endNode: this.state.algoData.endNode,\n              neighbors: this.state.algoData.neighbors,\n              algorithm: this.state.algoData.algorithm,\n              startAlgorithm: this.state.algoData.startAlgorithm,\n              stack: []\n            };\n            this.setState({\n              algoData\n            });\n          }\n\n          this.state.algoData.stack = [];\n          this.state.algoData.stack.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.stack !== undefined || this.state.algoData.stack.length !== 0) {\n            const curr = this.state.algoData.stack.pop();\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++;\n            console.log(curr);\n\n            for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n              if (curr in this.state.algoData.neighbors[i] && this.state.algoData.neighbors[i][curr] !== null && this.state.algoData.neighbors[i][curr].length !== 0) {\n                for (let j = 0; j < this.state.algoData.neighbors[i][curr].length; j++) {\n                  const newNode = this.state.algoData.neighbors[i][curr][j];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  if (newNode === endNode) {\n                    for (let i = 0; i < 5; i++) {\n                      setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                      counter++;\n                    }\n\n                    console.log(\"FOUND TARGET\");\n                    this.resetState(counter);\n                    return;\n                  }\n\n                  this.state.algoData.stack.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.playBack = () => {\n      const pause = this.state.paused;\n      this.setState({\n        paused: !pause\n      });\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.state.paused ? this.check2 : this.highlightHandler(node.id, i), 1500 * (i + 1)); //setTimeout(() => choice = this.state.paused, console.log(i), 1500 * (i + 1))\n      });\n    };\n\n    this.check = () => {\n      if (this.state.paused) {\n        console.log('pause....');\n        setTimeout(this.check, 100);\n      } else {\n        this.rotateHandler();\n      }\n    };\n\n    this.check2 = () => {\n      if (this.state.paused) {\n        console.log('pause....');\n        setTimeout(this.check2, 100);\n      } else {\n        console.log('Continue');\n      }\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      //apply characteristics for each node\n      nodes: [{\n        id: \"Harry\",\n        color: \"\",\n        strokeColor: \"\"\n      }, {\n        id: \"Sally\",\n        color: \"\",\n        strokeColor: \"\"\n      }, {\n        id: \"Alice\",\n        color: \"\",\n        strokeColor: \"\"\n      }],\n      links: [{\n        source: \"Harry\",\n        target: \"Sally\"\n      }, {\n        source: \"Harry\",\n        target: \"Alice\"\n      }]\n    };\n    const neighbors = [{\n      Harry: [\"Sally\", \"Alice\"]\n    }, {\n      Sally: [\"Harry\"]\n    }, {\n      Alice: [\"Harry\"]\n    }]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.811,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n    const _algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      paused: true\n    };\n    this.playBack = this.playBack.bind(this);\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665\n        },\n        __self: this\n      }, \"Graph Configurations\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 707\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      }, \"Algorithm Settings\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"mr-3\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter starting node\",\n        onChange: this._addStartNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter ending node\",\n        onChange: this._addEndNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 762\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        className: \"dropdown pt-2\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 774\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        onSelect: () => this.state.algoData.algorithm = \"dfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        evenyKey: \"2\",\n        onSelect: () => this.state.algoData.algorithm = \"bfs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        onSelect: () => this.state.algoData.algorithm = \"djk\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.check() //Should call selected algorithm, startAlgorithm()\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Button, {\n        id: \"pause\",\n        type: \"submit\",\n        onClick: this.playBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812\n        },\n        __self: this\n      }, this.state.paused ? 'Play' : 'Pause')), React.createElement(\"div\", {\n        class: \"rightWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 819\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820\n        },\n        __self: this\n      }, \"Nodes & Links\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 829\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 830\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickAddNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 875\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 886\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887\n        },\n        __self: this\n      }))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        },\n        __self: this\n      }, \"Show Node List\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"json-data-container mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }, this.state.data.nodes.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n\n        for (i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (name in this.state.algoData.neighbors[i]) {\n            return React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 917\n              },\n              __self: this\n            }, React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: \"neighbors: \",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 918\n              },\n              __self: this\n            }, this.state.algoData.neighbors[i][name].map((neighbor, i) => {\n              return React.createElement(\"div\", {\n                className: \"info\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 925\n                },\n                __self: this\n              }, \" \", neighbor);\n            })));\n          }\n        }\n      })))))), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx"],"names":["React","Graph","TreeView","Dropdown","Form","Button","wait","GraphVisualizer","Component","constructor","props","onClickAddNode","state","addNodeName","setState","addNodePlaceholder","data","nodes","length","newNode","push","id","links","found","i","algoData","neighbors","name","newNeighbor","console","log","onClickRemoveNode","removeNodeName","removeNodePlaceholder","filter","l","source","target","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","addLinkPlaceholder","j","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","endNode","algorithm","startAlgorithm","stack","_addEndNodeHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","node","nodeColorHandler","color","linkColorHandler","linkColor","link","depthFirstSearch","startNodeIsValid","endNodeIsValid","visited","counter","undefined","curr","pop","setTimeout","highlightHandler","foundTarget","resetState","playBack","pause","paused","rotateHandler","forEach","check2","check","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","nodeColor","strokeColor","then","nodeIndex","findIndex","origNode","Harry","Sally","Alice","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","highlightColor","generatedConfig","nodeIdToBeRemoved","bind","render","document","getElementById","map","type","neighbor"],"mappings":"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","sourcesContent":["import React from \"../../../../node_modules/react\";\nimport Graph from \"../../React-D3-Graph/Graph/graph/Graph\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./GraphVisualizer.css\";\nimport { wait } from \"@testing-library/react\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      //apply characteristics for each node\n      nodes: [\n        { id: \"Harry\", color: \"\", strokeColor: \"\" },\n        { id: \"Sally\", color: \"\", strokeColor: \"\" },\n        { id: \"Alice\", color: \"\", strokeColor: \"\" }\n      ],\n      links: [\n        { source: \"Harry\", target: \"Sally\" },\n        { source: \"Harry\", target: \"Alice\" }\n      ]\n    };\n\n    const neighbors = [\n      { Harry: [\"Sally\", \"Alice\"] },\n      { Sally: [\"Harry\"] },\n      { Alice: [\"Harry\"] }\n    ];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.811,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: []\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      paused: true\n    };\n\n    this.playBack = this.playBack.bind(this)\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  onClickAddNode = () => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      this.state.data.nodes.push({ id: newNode });\n\n      this.setState({\n        data: this.state.data\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: []\n      };\n\n      this.setState({ data });\n    }\n\n    // Adds node to the neighbor array in the state's algoData\n    let found = false;\n    for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n      if (this.state.addNodeName in this.state.algoData.neighbors[i]) {\n        found = true;\n      }\n    }\n    if (!found) {\n      var name = this.state.addNodeName;\n      var newNeighbor = {};\n      newNeighbor[name] = [];\n\n      this.state.algoData.neighbors.push(newNeighbor);\n      this.setState({ algoData: this.state.algoData });\n    }\n    console.log(this.state.algoData.neighbors);\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\"\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        l => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        l =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\"\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function(e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target\n      });\n\n      var found = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][source].push(target);\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var newNeighbor = {};\n        newNeighbor[source] = [target];\n        this.state.algoData.neighbors.push(newNeighbor);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function(e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        l => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            l => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = event => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = event => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = event => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = event => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = event => {\n    const algoData = {\n      startNode: event.target.value,\n      endNode: this.state.algoData.endNode,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addEndNodeHandleChange = event => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      endNode: event.target.value,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = size => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config\n    });\n  };\n\n  nodeColorHandler = color => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config\n    });\n  };\n\n  linkColorHandler = linkColor => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"dfs\") {\n      this.depthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n    } else if (this.state.algoData.algorithm === \"djk\") {\n    }\n  };\n\n  depthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (startNode in this.state.algoData.neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in this.state.algoData.neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = {\n            startNode: this.state.algoData.stack,\n            endNode: this.state.algoData.endNode,\n            neighbors: this.state.algoData.neighbors,\n            algorithm: this.state.algoData.algorithm,\n            startAlgorithm: this.state.algoData.startAlgorithm,\n            stack: []\n          };\n          this.setState({ algoData });\n        }\n        this.state.algoData.stack = [];\n        this.state.algoData.stack.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.stack !== undefined ||\n          this.state.algoData.stack.length !== 0\n        ) {\n          const curr = this.state.algoData.stack.pop();\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n          console.log(curr);\n\n          for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n            if (\n              curr in this.state.algoData.neighbors[i] &&\n              this.state.algoData.neighbors[i][curr] !== null &&\n              this.state.algoData.neighbors[i][curr].length !== 0\n            ) {\n              for (\n                let j = 0;\n                j < this.state.algoData.neighbors[i][curr].length;\n                j++\n              ) {\n                const newNode = this.state.algoData.neighbors[i][curr][j];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n                if (newNode === endNode) {\n                  for (let i = 0; i < 5; i++) {\n                    setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                    counter++;\n                  }\n                  console.log(\"FOUND TARGET\");\n                  this.resetState(counter);\n                  return;\n                }\n\n                this.state.algoData.stack.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n\n  playBack = () => {\n    const pause = this.state.paused\n    this.setState({\n      paused: !pause\n    })\n  }\n\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.state.paused ? this.check2 : this.highlightHandler(node.id, i)\n      , 1500 * (i + 1));\n      //setTimeout(() => choice = this.state.paused, console.log(i), 1500 * (i + 1))\n    });\n  }; \n\n  check = () => {\n    if (this.state.paused) {\n      console.log('pause....')\n      setTimeout(this.check, 100)\n    }\n    else {\n      this.rotateHandler()\n    }\n  }\n\n  check2 = () => {\n    if (this.state.paused) {\n      console.log('pause....')\n      setTimeout(this.check2, 100)\n    }\n    else {\n      console.log('Continue')\n    }\n  }\n\n  //reset node color back to original\n  resetState = counter => {\n    const myP = new Promise(function(resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = msg => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes)\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = id => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex(node => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex]\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex]\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes) = nodes\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = id => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex(node => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex]\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex]\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes)\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              Graph Configurations\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              Algorithm Settings\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"mr-3\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                />\n                <Form.Check type=\"checkbox\" id=\"weight\" label=\"Weighted\" />\n              </div>\n\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"sNode\"\n                    type=\"text\"\n                    name=\"startNode\"\n                    placeholder=\"Enter starting node\"\n                    onChange={this._addStartNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <h5 class=\"font-weight-light h6\"> Target Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"tNode\"\n                    type=\"text\"\n                    name=\"tarhetNode\"\n                    placeholder=\"Enter ending node\"\n                    onChange={this._addEndNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <Dropdown className=\"dropdown pt-2\" drop=\"right\">\n                  <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-basic\">\n                    Algorithm\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu id=\"algoSelection\">\n                    <Dropdown.Item\n                      eventKey=\"1\"\n                      onSelect={() => (this.state.algoData.algorithm = \"dfs\")}\n                    >\n                      Depth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      evenyKey=\"2\"\n                      onSelect={() => (this.state.algoData.algorithm = \"bfs\")}\n                    >\n                      Breadth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"3\"\n                      onSelect={() => (this.state.algoData.algorithm = \"djk\")}\n                    >\n                      Dijkstra's\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.check()} //Should call selected algorithm, startAlgorithm()\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Button id='pause' type='submit' onClick={this.playBack}>\n            {this.state.paused ? 'Play': 'Pause'}\n          </Button>\n\n        </div>\n\n        <div class=\"rightWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              Nodes & Links\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Add node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickAddNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickRemoveNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> - </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Add link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={this._addLinkHandleChange}\n                onKeyPress={this._handleLinkKeyEnter}\n              />\n\n              <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"removeLink\"\n                placeholder={this.state.removeLinkPlaceholder}\n                value={this.state.removeLink}\n                onChange={this._removeLinkHandleChange}\n                onKeyPress={this._handleRemoveLinkKeyEnter}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              Show Node List\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"json-data-container mt-3\">\n                <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n                  {this.state.data.nodes.map((node, i) => {\n                    const type = node.type;\n                    const name = node.id;\n                    for (i = 0; i < this.state.algoData.neighbors.length; i++) {\n                      if (name in this.state.algoData.neighbors[i]) {\n                        return (\n                          <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                            <TreeView\n                              key={type + \"|\" + i}\n                              nodeLabel=\"neighbors: \"\n                            >\n                              {this.state.algoData.neighbors[i][name].map(\n                                (neighbor, i) => {\n                                  return (\n                                    <div className=\"info\"> {neighbor}</div>\n                                  );\n                                }\n                              )}\n                            </TreeView>\n                          </TreeView>\n                        );\n                      }\n                    }\n                  })}\n                </TreeView>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}