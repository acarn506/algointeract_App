{"ast":null,"code":"/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */import{MARKERS,SIZES,HIGHLIGHTED}from\"./marker.const\";/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */function _markerKeyBuilder(size,highlighted){return\"MARKER_\".concat(size).concat(highlighted);}/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */function _getMarkerSize(transform,mMax,lMax){if(transform<mMax){return SIZES.S;}else if(transform>=mMax&&transform<lMax){return SIZES.M;}else{return SIZES.L;}}/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */function _computeMarkerId(highlight,transform,_ref){var maxZoom=_ref.maxZoom;var mMax=maxZoom/4;var lMax=maxZoom/2;var size=SIZES.L;var highlighted=highlight?HIGHLIGHTED:\"\";var markerKey=_markerKeyBuilder(size,highlighted);return MARKERS[markerKey];}/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */function _memoizedComputeMarkerId(){var cache={};return function(highlight,transform,_ref2){var maxZoom=_ref2.maxZoom;var cacheKey=\"\".concat(highlight,\";\").concat(transform,\";\").concat(maxZoom);if(cache[cacheKey]){return cache[cacheKey];}var markerId=_computeMarkerId(highlight,transform,{maxZoom:maxZoom});cache[cacheKey]=markerId;return markerId;};}/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */var getMarkerId=_memoizedComputeMarkerId();export{getMarkerId};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/LinkedList/Graph/marker/marker.helper.js"],"names":["MARKERS","SIZES","HIGHLIGHTED","_markerKeyBuilder","size","highlighted","_getMarkerSize","transform","mMax","lMax","S","M","L","_computeMarkerId","highlight","maxZoom","markerKey","_memoizedComputeMarkerId","cache","cacheKey","markerId","getMarkerId"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,OAASA,OAAT,CAAkBC,KAAlB,CAAyBC,WAAzB,KAA4C,gBAA5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,iBAAT,CAA2BC,IAA3B,CAAiCC,WAAjC,CAA8C,CAC5C,uBAAiBD,IAAjB,SAAwBC,WAAxB,EACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,cAAT,CAAwBC,SAAxB,CAAmCC,IAAnC,CAAyCC,IAAzC,CAA+C,CAC7C,GAAIF,SAAS,CAAGC,IAAhB,CAAsB,CACpB,MAAOP,CAAAA,KAAK,CAACS,CAAb,CACD,CAFD,IAEO,IAAIH,SAAS,EAAIC,IAAb,EAAqBD,SAAS,CAAGE,IAArC,CAA2C,CAChD,MAAOR,CAAAA,KAAK,CAACU,CAAb,CACD,CAFM,IAEA,CACL,MAAOV,CAAAA,KAAK,CAACW,CAAb,CACD,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqCP,SAArC,MAA6D,IAAXQ,CAAAA,OAAW,MAAXA,OAAW,CAC3D,GAAMP,CAAAA,IAAI,CAAGO,OAAO,CAAG,CAAvB,CACA,GAAMN,CAAAA,IAAI,CAAGM,OAAO,CAAG,CAAvB,CACA,GAAMX,CAAAA,IAAI,CAAGH,KAAK,CAACW,CAAnB,CACA,GAAMP,CAAAA,WAAW,CAAGS,SAAS,CAAGZ,WAAH,CAAiB,EAA9C,CACA,GAAMc,CAAAA,SAAS,CAAGb,iBAAiB,CAACC,IAAD,CAAOC,WAAP,CAAnC,CAEA,MAAOL,CAAAA,OAAO,CAACgB,SAAD,CAAd,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,CAAAA,wBAAT,EAAoC,CAClC,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA,MAAO,UAACJ,SAAD,CAAYP,SAAZ,OAAuC,IAAdQ,CAAAA,OAAc,OAAdA,OAAc,CAC5C,GAAMI,CAAAA,QAAQ,WAAML,SAAN,aAAmBP,SAAnB,aAAgCQ,OAAhC,CAAd,CAEA,GAAIG,KAAK,CAACC,QAAD,CAAT,CAAqB,CACnB,MAAOD,CAAAA,KAAK,CAACC,QAAD,CAAZ,CACD,CAED,GAAMC,CAAAA,QAAQ,CAAGP,gBAAgB,CAACC,SAAD,CAAYP,SAAZ,CAAuB,CAAEQ,OAAO,CAAPA,OAAF,CAAvB,CAAjC,CAEAG,KAAK,CAACC,QAAD,CAAL,CAAkBC,QAAlB,CAEA,MAAOA,CAAAA,QAAP,CACD,CAZD,CAaD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,WAAW,CAAGJ,wBAAwB,EAA5C,CAEA,OAASI,WAAT","sourcesContent":["/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\nimport { MARKERS, SIZES, HIGHLIGHTED } from \"./marker.const\";\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\nfunction _markerKeyBuilder(size, highlighted) {\n  return `MARKER_${size}${highlighted}`;\n}\n\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return SIZES.M;\n  } else {\n    return SIZES.L;\n  }\n}\n\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\nfunction _computeMarkerId(highlight, transform, { maxZoom }) {\n  const mMax = maxZoom / 4;\n  const lMax = maxZoom / 2;\n  const size = SIZES.L;\n  const highlighted = highlight ? HIGHLIGHTED : \"\";\n  const markerKey = _markerKeyBuilder(size, highlighted);\n\n  return MARKERS[markerKey];\n}\n\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\nfunction _memoizedComputeMarkerId() {\n  let cache = {};\n\n  return (highlight, transform, { maxZoom }) => {\n    const cacheKey = `${highlight};${transform};${maxZoom}`;\n\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n\n    const markerId = _computeMarkerId(highlight, transform, { maxZoom });\n\n    cache[cacheKey] = markerId;\n\n    return markerId;\n  };\n}\n\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\nconst getMarkerId = _memoizedComputeMarkerId();\n\nexport { getMarkerId };\n"]},"metadata":{},"sourceType":"module"}