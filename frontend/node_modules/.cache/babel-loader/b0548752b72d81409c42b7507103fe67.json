{"ast":null,"code":"import _classCallCheck from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"../../../node_modules/react\";import Footer from\"../Footer/Footer\";import LearnCard from\"../LearnCard/LearnCard\";import\"./Learn.css\";// The carousel:\n// https://www.npmjs.com/package/react-multi-carousel\n// npm install react-multi-carousel\nimport Carousel from\"react-multi-carousel\";import\"react-multi-carousel/lib/styles.css\";// This responsive is for the carousel component.\nvar responsive={desktop:{breakpoint:{max:3000,min:1024},items:3}};/*\n  The Learn page is where the user can navigate to \n  in order to learn more about each data structure \n  in the Visualizer page and their respective algorithms.\n*/var Learn=/*#__PURE__*/function(_Component){_inherits(Learn,_Component);function Learn(){_classCallCheck(this,Learn);return _possibleConstructorReturn(this,_getPrototypeOf(Learn).apply(this,arguments));}_createClass(Learn,[{key:\"render\",value:function render(){return React.createElement(\"div\",{class:\"box\"},React.createElement(\"div\",{class:\"d-flex p-5 bd-highlight\"},React.createElement(\"div\",{class:\"d-flex p-5 bd-highlight\"},React.createElement(\"h5\",{class:\"display-3 text-center\"},\"Welcome to the Learn Page!\"))),React.createElement(\"hr\",null),React.createElement(\"div\",{class:\"d-flex p-2 bd-highlight\"},React.createElement(\"div\",{class:\"pl-5 pb-2\"},React.createElement(\"h2\",null,\" \",React.createElement(\"em\",null,\"Data Structures\"),\" \"))),React.createElement(Carousel,{responsive:responsive,containerClass:\"carousel-container\",removeArrowOnDeviceType:[\"tablet\",\"mobile\"],deviceType:this.props.deviceType,dotListClass:\"custom-dot-list-style\",itemClass:\"card-deck d-flex pl-5 pr-5 bd-highlight\"},React.createElement(LearnCard,{title:\"Graph\",text:\"Graph is the non-linear data structure which is used to represent data networks.\",image:\"/images/graphpicture.png\",tab1title:\"Description\",tab1text:React.createElement(\"ul\",null,React.createElement(\"li\",null,\"It consist of nodes and edges and sometimes we can say that nodes are vertices and edges are line or arc\"),React.createElement(\"li\",null,\"It is used to show real time problems\"),React.createElement(\"li\",null,\"Graph can be used in social network sites like facebook linkedin etc.\"),React.createElement(\"li\",null,\"Each nodes are contains information about data.\"),React.createElement(\"li\",null,\"Each nodes are contains information about data.\")),tab1image:\"/images/graph.png\",tab2title:\"Time Complexity\",tab2text:\"Time complexity of graph is O(V+E) where V represent number of vertices \"}),React.createElement(LearnCard,{title:\"Tree \",text:\"Tree is non linear data structure where first node is called Root Node of the tree and then after other nodes are called subtree every tree can have multiple subtree and they can have also no any subtree but still is called tree data structure,  there are some points to be remember. \",tab1title:\"Description\",tab1text:React.createElement(\"ul\",null,\"\\u2029\",React.createElement(\"li\",null,\"Tree is the hieraricial data structure which an store data member in hierical manner\"),React.createElement(\"li\",null,\"Height of tree should be depend on subtree of the tree.\"),React.createElement(\"li\",null,\"In the Tree data structure there is node, edge, leaf nodes and child node.\"),React.createElement(\"li\",null,\"Provides the best searching and inserting the data into tree\"),React.createElement(\"li\",null,\"Tree are of different types like Binary Search (tree, AVL tree, binary tree etc.)\")),tab2title:\"Time Complexity of Tree\",tab2text:\"In general time complexity of tree will be O(h). it can be different operations. it can be also best and worst time  complexity.\",image:\"/images/tree.png\",tab1image:\"/images/treepicture.png\"}),React.createElement(LearnCard,{title:\"Linked List\",text:\"Linked List is a linear data structure where all data can not be stored into congiguous memory location but then are  attached to all the nodes so that we can easy to maintain the list. its simply mean that the it is the list where we can store data member in different memory locations. it is the technic of improving of wasting of memory in the database or we can say  that to save the memory.\",tab1title:\"Description\",tab1text:React.createElement(\"ul\",null,\"\\u2029\",React.createElement(\"li\",null,\"It saves the wasting of memory\"),React.createElement(\"li\",null,\"It is easier to add, delete or change the data into database.\"),React.createElement(\"li\",null,\"It can not use contiguous memory locations.\"),React.createElement(\"li\",null,\"All the nodes are linked with references link so that each node can be connected to each other and perforrm operations.\"),React.createElement(\"li\",null,\"Linkee List can be of two types Single Linked list and Double linked list\")),tab2title:\"Time Complexity\",tab2text:\"O(n)\",image:\"/images/linkedlist.png\",tab1image:\"/images/linkedlist.png\"})),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(\"hr\",null),React.createElement(\"div\",{class:\"d-flex pl-2 bd-highlight\"},React.createElement(\"div\",{class:\"pl-5 pt-3 pb-4\"},React.createElement(\"h2\",null,\" \",React.createElement(\"em\",null,\"Algorithms\"),\" \"))),React.createElement(Carousel,{responsive:responsive,containerClass:\"carousel-container\",removeArrowOnDeviceType:[\"tablet\",\"mobile\"],deviceType:this.props.deviceType,dotListClass:\"custom-dot-list-style\",itemClass:\"card-deck d-flex pl-5 pr-5 bd-highlight\"},React.createElement(LearnCard,{title:\"Breadth First Search\",text:\"The Breadth first search is another fundamental search algorithm used to explore nodes and edges of a graph. It runs with a time complexity of o(v+e) and is often used as a building block in other algorithms.\",tab1title:\"Description\",tab1text:React.createElement(\"ul\",null,\"\\u2029\",React.createElement(\"li\",null,\"The BFS algorithm is particularly useful for one thing: finding the shortest path on unsweighted graphs.\"),React.createElement(\"li\",null,\"Height of tree should be depend on subtree of the tree.\"),React.createElement(\"li\",null,\"Its an algorithm, used for traversing or searching tree or graph data structure\")),image:\"/images/braedth.png\",tab1image:\"/images/bstl.png\",tab2title:\"Time Complexity\",tab2text:\"O(V + E)\"}),React.createElement(LearnCard,{title:\"Depth First Search\",text:\"The Depth First Search (DFS) is the most fundamental search algorithm used to explore nodes and edges of a graph.\",tab1title:\"Description\",tab1text:React.createElement(\"ul\",null,\"\\u2029\",React.createElement(\"li\",null,\"by itself the DFS isn't all the useful, but when augmented to perform other tasks such as connectively, or find bridges/articulation points then DFS really shines\"),React.createElement(\"li\",null,\"It runs with a time complexity of O(V+E) and is often used as a building block in other algorithms.\"),React.createElement(\"li\",null,\"It uses stack to find the goal Node. it goes deeper as deeper node until goal is found then perform recursive tracking.\")),tab1image:\"/images/dfs.png\",image:\"/images/depthfirst.png\",tab2title:\"Time Complexity\",tab2text:\"O ( V + E ) O(V + E) O(V+E).\"}),React.createElement(LearnCard,{title:\"Dijkstra Algorithm\",text:\"Dijkstra's algorithm is an algorithm we can use to find shortest distances or minimum costs depending on what is represented in a graph.\",image:\"/images/dijkstra.png\",tab1title:\"Description\",tab1image:\"/images/djkstra.png\",tab1text:\"Dijkstra\\u2019s algorithm, published in 1959 and named after its creator Dutch computer scientist Edsger Dijkstra, can be applied on a weighted graph. The graph can either be directed or undirected. One stipulation to using the algorithm is that the graph needs to have a nonnegative weight on every edge.\",tab2title:\"Time Complexity\",tab2text:\"O(V^2)\"}),React.createElement(LearnCard,{title:\"Tree Traversal\",text:\"Tree Traversal is the process which were visit all the nodes of a tree like Inorder, Postorder and Preorder Traversal\",image:\"/images/treetraversal.png\",tab1title:\"Preorder\",tab1text:\"In this algorithm we visit root first, then traverse the left subtree, then traverse the right subtree.\",tab1image:\"/images/preorderpic.png\",tab2title:\"Inorder\",tab2text:\"In This algorithm we Traverse the left subtree is visited first, and then root and after the right subtree, always remember that every node represent subtree itself.\",tab2image:\"/images/inorder.png\",tab3title:\"Postorder\",tab3text:\"In this algorithm we Traverse the left subtree, than traverse the right subtree than visit root.\",tab3image:\"/images/postorder.png\"})),React.createElement(\"div\",{class:\"container p-5\"}),React.createElement(\"div\",{class:\"container p-5\"}),React.createElement(Footer,null));}}]);return Learn;}(Component);export default Learn;","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Learn/Learn.jsx"],"names":["React","Component","Footer","LearnCard","Carousel","responsive","desktop","breakpoint","max","min","items","Learn","props","deviceType"],"mappings":"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","sourcesContent":["import React, { Component } from \"../../../node_modules/react\";\nimport Footer from \"../Footer/Footer\";\nimport LearnCard from \"../LearnCard/LearnCard\";\nimport \"./Learn.css\";\n\n// The carousel:\n// https://www.npmjs.com/package/react-multi-carousel\n// npm install react-multi-carousel\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\n\n// This responsive is for the carousel component.\nconst responsive = {\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 3,\n  },\n};\n\n/*\n  The Learn page is where the user can navigate to \n  in order to learn more about each data structure \n  in the Visualizer page and their respective algorithms.\n*/\n\nclass Learn extends Component {\n  render() {\n    return (\n      <div class=\"box\">\n        <div class=\"d-flex p-5 bd-highlight\">\n          <div class=\"d-flex p-5 bd-highlight\">\n            <h5 class=\"display-3 text-center\">Welcome to the Learn Page!</h5>\n          </div>\n        </div>\n\n        <hr></hr>\n        {/** All the cards in the Data Structures and Algorithms\n         *    sections go to the Visualizer page when clicked.\n         *    Our intent is that for each respective structure,\n         *    a default one will be rendered.\n         */}\n        <div class=\"d-flex p-2 bd-highlight\">\n          <div class=\"pl-5 pb-2\">\n            <h2>\n              {\" \"}\n              <em>Data Structures</em>{\" \"}\n            </h2>\n          </div>\n        </div>\n        <Carousel\n          responsive={responsive}\n          containerClass=\"carousel-container\"\n          removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n          deviceType={this.props.deviceType}\n          dotListClass=\"custom-dot-list-style\"\n          itemClass=\"card-deck d-flex pl-5 pr-5 bd-highlight\"\n        >\n          <LearnCard\n            title=\"Graph\"\n            text=\"Graph is the non-linear data structure which is used to represent data networks.\"\n            image=\"/images/graphpicture.png\"\n            tab1title=\"Description\"\n            tab1text={\n              <ul>\n                <li>\n                  It consist of nodes and edges and sometimes we can say that\n                  nodes are vertices and edges are line or arc\n                </li>\n                <li>It is used to show real time problems</li>\n                <li>\n                  Graph can be used in social network sites like facebook\n                  linkedin etc.\n                </li>\n                <li>Each nodes are contains information about data.</li>\n                <li>Each nodes are contains information about data.</li>\n              </ul>\n            }\n            tab1image=\"/images/graph.png\"\n            tab2title=\"Time Complexity\"\n            tab2text=\"Time complexity of graph is O(V+E) where V represent number of vertices \"\n          />\n\n          <LearnCard\n            title=\"Tree \"\n            text=\"Tree is non linear data structure where first node is called Root Node\n                of the tree and then after other nodes are called subtree every tree can have\n                multiple subtree and they can have also no any subtree but still is called tree data structure, \n                there are some points to be remember. \"\n            tab1title=\"Description\"\n            tab1text={\n              <ul>\n                 \n                <li>\n                  Tree is the hieraricial data structure which an store data\n                  member in hierical manner\n                </li>\n                <li>Height of tree should be depend on subtree of the tree.</li>\n                <li>\n                  In the Tree data structure there is node, edge, leaf nodes and\n                  child node.\n                </li>\n                <li>\n                  Provides the best searching and inserting the data into tree\n                </li>\n                <li>\n                  Tree are of different types like Binary Search (tree, AVL\n                  tree, binary tree etc.)\n                </li>\n              </ul>\n            }\n            tab2title=\"Time Complexity of Tree\"\n            tab2text=\"In general time complexity of tree will be O(h). it can be different operations. it can be also best and worst time \n                      complexity.\"\n            image=\"/images/tree.png\"\n            tab1image=\"/images/treepicture.png\"\n          />\n\n          <LearnCard\n            title=\"Linked List\"\n            text=\"Linked List is a linear data structure where all data can not be stored into congiguous memory location but then are \n                  attached to all the nodes so that we can easy to maintain the list. its simply mean that the it is the list where we can store\n                  data member in different memory locations. it is the technic of improving of wasting of memory in the database or we can say \n                  that to save the memory.\"\n            tab1title=\"Description\"\n            tab1text={\n              <ul>\n                 <li>It saves the wasting of memory</li>\n                <li>\n                  It is easier to add, delete or change the data into database.\n                </li>\n                <li>It can not use contiguous memory locations.</li>\n                <li>\n                  All the nodes are linked with references link so that each\n                  node can be connected to each other and perforrm operations.\n                </li>\n                <li>\n                  Linkee List can be of two types Single Linked list and Double\n                  linked list\n                </li>\n              </ul>\n            }\n            tab2title=\"Time Complexity\"\n            tab2text=\"O(n)\"\n            image=\"/images/linkedlist.png\"\n            tab1image=\"/images/linkedlist.png\"\n          />\n        </Carousel>\n        <br></br>\n        <br></br>\n        <hr></hr>\n        <div class=\"d-flex pl-2 bd-highlight\">\n          <div class=\"pl-5 pt-3 pb-4\">\n            <h2>\n              {\" \"}\n              <em>Algorithms</em>{\" \"}\n            </h2>\n          </div>\n        </div>\n        <Carousel\n          responsive={responsive}\n          containerClass=\"carousel-container\"\n          removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n          deviceType={this.props.deviceType}\n          dotListClass=\"custom-dot-list-style\"\n          itemClass=\"card-deck d-flex pl-5 pr-5 bd-highlight\"\n        >\n          <LearnCard\n            title=\"Breadth First Search\"\n            text=\"The Breadth first search is another fundamental search algorithm used to explore nodes and edges of a graph. It runs with a time complexity of o(v+e) and is often used as a building block in other algorithms.\"\n            tab1title=\"Description\"\n            tab1text={\n              <ul>\n                 \n                <li>\n                  The BFS algorithm is particularly useful for one thing:\n                  finding the shortest path on unsweighted graphs.\n                </li>\n                <li>Height of tree should be depend on subtree of the tree.</li>\n                <li>\n                  Its an algorithm, used for traversing or searching tree or\n                  graph data structure\n                </li>\n              </ul>\n            }\n            image=\"/images/braedth.png\"\n            tab1image=\"/images/bstl.png\"\n            tab2title=\"Time Complexity\"\n            tab2text=\"O(V + E)\"\n          />\n          <LearnCard\n            title=\"Depth First Search\"\n            text=\"The Depth First Search (DFS) is the most fundamental search algorithm used to explore nodes and edges of a graph.\"\n            tab1title=\"Description\"\n            tab1text={\n              <ul>\n                 \n                <li>\n                  by itself the DFS isn't all the useful, but when augmented to\n                  perform other tasks such as connectively, or find\n                  bridges/articulation points then DFS really shines\n                </li>\n                <li>\n                  It runs with a time complexity of O(V+E) and is often used as\n                  a building block in other algorithms.\n                </li>\n                <li>\n                  It uses stack to find the goal Node. it goes deeper as deeper\n                  node until goal is found then perform recursive tracking.\n                </li>\n              </ul>\n            }\n            tab1image=\"/images/dfs.png\"\n            image=\"/images/depthfirst.png\"\n            tab2title=\"Time Complexity\"\n            tab2text=\"O ( V + E ) O(V + E) O(V+E).\"\n          />\n          <LearnCard\n            title=\"Dijkstra Algorithm\"\n            text=\"Dijkstra's algorithm is an algorithm we can use to find shortest distances or minimum costs depending on what is represented in a graph.\"\n            image=\"/images/dijkstra.png\"\n            tab1title=\"Description\"\n            tab1image=\"/images/djkstra.png\"\n            tab1text=\"Dijkstra’s algorithm, published in 1959 and named after its creator Dutch computer scientist Edsger Dijkstra, can be applied on a weighted graph. The graph can either be directed or undirected. One stipulation to using the algorithm is that the graph needs to have a nonnegative weight on every edge.\"\n            tab2title=\"Time Complexity\"\n            tab2text=\"O(V^2)\"\n          />\n\n          <LearnCard\n            title=\"Tree Traversal\"\n            text=\"Tree Traversal is the process which were visit all the nodes of a tree like Inorder, Postorder and Preorder Traversal\"\n            image=\"/images/treetraversal.png\"\n            tab1title=\"Preorder\"\n            tab1text=\"In this algorithm we visit root first, then traverse the left subtree, then traverse the right subtree.\"\n            tab1image=\"/images/preorderpic.png\"\n            tab2title=\"Inorder\"\n            tab2text=\"In This algorithm we Traverse the left subtree is visited first, and then root and after the right subtree, always remember that every node represent subtree itself.\"\n            tab2image=\"/images/inorder.png\"\n            tab3title=\"Postorder\"\n            tab3text=\"In this algorithm we Traverse the left subtree, than traverse the right subtree than visit root.\"\n            tab3image=\"/images/postorder.png\"\n          />\n        </Carousel>\n        <div class=\"container p-5\"></div>\n        <div class=\"container p-5\"></div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Learn;\n"]},"metadata":{},"sourceType":"module"}