{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx\";\nimport React, { useState } from \"react\";\nimport { Graph } from \"../../Node\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from '../../LeftWindow/LeftWindow';\nimport { Nav } from 'react-bootstrap'; // Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.nSizeHandler = nSize => {\n      const config = this.state.config;\n      config.node.size = nSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nColorHandler = nColor => {\n      const config = this.state.config;\n      config.node.color = nColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.lColorHandler = lColor => {\n      const config = this.state.config;\n      config.link.color = lColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.onClickAddNode = () => {\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.state.data.nodes.push({\n          id: newNode\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        console.log(source, target);\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    const _data = {\n      nodes: [{\n        id: \"Harry\"\n      }, {\n        id: \"Sally\"\n      }, {\n        id: \"Alice\"\n      }],\n      links: [{\n        source: \"Harry\",\n        target: \"Sally\"\n      }, {\n        source: \"Harry\",\n        target: \"Alice\"\n      }]\n    }; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: 600,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\"\n    };\n  }\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        variant: \"tabs\",\n        defaultActiveKey: \"/home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(Nav.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(Nav.Link, {\n        href: \"/home\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Active\")), React.createElement(Nav.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(Nav.Link, {\n        eventKey: \"link-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, \"Option 2\")), React.createElement(Nav.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(Nav.Link, {\n        eventKey: \"disabled\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, \"Disabled\"))), React.createElement(LeftWindow //Retrieves state change from LeftWindow Component \n      , {\n        nSize: this.nSizeHandler,\n        nColor: this.nColorHandler,\n        lColor: this.lColorHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"rightWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, \" Add a node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickAddNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, \"+\")), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \" Remove a node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, \"-\")), React.createElement(\"input\", {\n        type: \"text\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \" Add a link \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, \" Remove a link \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      })), React.createElement(Graph, {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx"],"names":["React","useState","Graph","LeftWindow","Nav","GraphVisualizer","Component","constructor","props","nSizeHandler","nSize","config","state","node","size","setState","nColorHandler","nColor","color","lColorHandler","lColor","link","onClickAddNode","addNodeName","addNodePlaceholder","data","nodes","length","newNode","push","id","links","onClickRemoveNode","removeNodeName","removeNodePlaceholder","filter","l","source","target","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","i","console","log","addLinkPlaceholder","j","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","width","window","innerWidth","highlightStrokeColor","highlightColor","generatedConfig","nodeIdToBeRemoved","render"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { Graph } from \"../../Node\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from '../../LeftWindow/LeftWindow'\nimport {Nav} from 'react-bootstrap'\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n      links: [\n        { source: \"Harry\", target: \"Sally\" },\n        { source: \"Harry\", target: \"Alice\" }\n      ]\n    };\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: 600,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\"\n    };\n  }\n\n  nSizeHandler = (nSize) => {\n    const config = this.state.config\n\n    config.node.size = nSize\n\n    this.setState({\n      config : config\n    })\n  }\n\n  nColorHandler = (nColor) => {\n    const config = this.state.config\n\n    config.node.color = nColor\n\n    this.setState({\n      config : config\n    })\n  }\n\n  lColorHandler = (lColor) => {\n    const config = this.state.config\n\n    config.link.color = lColor\n\n    this.setState({\n      config : config\n    })\n  }\n\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  onClickAddNode = () => {\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      this.state.data.nodes.push({ id: newNode });\n\n      this.setState({\n        data: this.state.data\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: []\n      };\n\n      this.setState({ data });\n    }\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\"\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        l => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        l =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\"\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function(e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target\n      });\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function(e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      console.log(source, target);\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        l => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = event => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = event => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = event => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = event => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      \n      <div class=\"box\">\n        <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\n          <Nav.Item>\n            <Nav.Link href=\"/home\">Active</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"link-1\">Option 2</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"disabled\" disabled>\n              Disabled\n            </Nav.Link>\n          </Nav.Item>\n        </Nav>\n       \n        <LeftWindow  \n        //Retrieves state change from LeftWindow Component \n        nSize={this.nSizeHandler} \n        nColor={this.nColorHandler} \n        lColor={this.lColorHandler}\n        /> \n\n        <div class=\"rightWindow\">\n          <h5 class=\"font-weight-light pt-3\"> Add a node </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickAddNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger\"\n                id=\"button-addon1\"\n              >\n                +\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              name=\"addNodeName\"\n              placeholder={this.state.addNodePlaceholder}\n              value={this.state.addNodeName}\n              onChange={this._addNodeHandleChange}\n              onKeyPress={this._handleAddKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Remove a node </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickRemoveNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                id=\"button-addon1\"\n              >\n                -\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              name=\"removeNodeName\"\n              placeholder={this.state.removeNodePlaceholder}\n              value={this.state.removeNodeName}\n              onChange={this._removeNodeHandleChange}\n              onKeyPress={this._handleRemoveKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Add a link </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"addLink\"\n            placeholder={this.state.addLinkPlaceholder}\n            value={this.state.addLink}\n            onChange={this._addLinkHandleChange}\n            onKeyPress={this._handleLinkKeyEnter}\n          />\n\n          <h5 class=\"font-weight-light\"> Remove a link </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"removeLink\"\n            placeholder={this.state.removeLinkPlaceholder}\n            value={this.state.removeLink}\n            onChange={this._removeLinkHandleChange}\n            onKeyPress={this._handleRemoveLinkKeyEnter}\n          />\n        </div>\n\n        <Graph\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n      \n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}