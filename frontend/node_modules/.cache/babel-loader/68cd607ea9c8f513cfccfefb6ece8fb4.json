{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx\";\nimport React from \"../../../../node_modules/react\";\nimport { Graph } from \"../../Node\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from \"../../LeftWindow/LeftWindow\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport { ninvoke } from \"q\"; // Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.rotateHandler = () => {\n      this.state.data.nodes.forEach(node => {\n        setTimeout(this.highlightHandler(node.id), 3000);\n      });\n    };\n\n    this.highlightHandler = id => {\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === id;\n      });\n      const node = { ...this.state.data.nodes[nodeIndex]\n      };\n      node.color = 'red';\n      const nodes = [...this.state.data.nodes];\n      nodes[nodeIndex] = node;\n      this.setState({ ...(this.state.data.nodes = nodes)\n      });\n      console.log(this.state.data.nodes);\n    };\n\n    this.onClickAddNode = () => {\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.state.data.nodes.push({\n          id: newNode\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n\n        if (source in this.state.neighbors) {\n          this.state.neighbors[source].push(target);\n        } else {\n          this.state.neighbors[source] = [];\n          this.state.neighbors[source].push(target);\n        }\n\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        console.log(source, target);\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        if (source in this.state.neighbors) {\n          this.state.neighbors[source] = this.state.neighbors[source].filter(l => l !== target);\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nSizeHandler = nSize => {\n      const config = this.state.config;\n      config.node.size = nSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nColorHandler = nColor => {\n      const config = this.state.config;\n      config.node.color = nColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.lColorHandler = lColor => {\n      const config = this.state.config;\n      config.link.color = lColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    const _data = {\n      nodes: [{\n        id: \"Harry\",\n        color: ''\n      }, {\n        id: \"Sally\",\n        color: ''\n      }, {\n        id: \"Alice\",\n        color: ''\n      }],\n      links: [{\n        source: \"Harry\",\n        target: \"Sally\"\n      }, {\n        source: \"Harry\",\n        target: \"Alice\"\n      }],\n      weight: 2\n    };\n    const neighbors = {\n      Harry: [\"Sally\", \"Alice\"],\n      Sally: [],\n      Alice: []\n    }; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.811,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      neighbors: neighbors,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\"\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-secondary\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, \"Graph Configurations\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, React.createElement(LeftWindow, {\n        nSize: this.nSizeHandler,\n        nColor: this.nColorHandler,\n        lColor: this.lColorHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-secondary\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, \"Algorithm Settings\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        className: \"dropdown\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        evenyKey: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"mr-3\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter starting node\",\n        onChange: \"\" //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter ending node\",\n        onChange: \"\" //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      })), React.createElement(Button, {\n        class: \"submit mt-3\",\n        type: \"submit\",\n        variant: \"outline-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }, \"Start\")))), React.createElement(Button, {\n        class: \"submit mt-3\",\n        type: \"submit\",\n        variant: \"outline-success\",\n        onClick: () => this.rotateHandler(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        },\n        __self: this\n      }, \"HighLight Test\")), React.createElement(\"div\", {\n        class: \"rightWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickAddNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, \" Node list: \"), React.createElement(\"div\", {\n        className: \"json-data-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, this.state.data.nodes.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n\n        if (name in this.state.neighbors) {\n          return React.createElement(TreeView, {\n            key: type + \"|\" + i,\n            nodeLabel: name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 543\n            },\n            __self: this\n          }, React.createElement(TreeView, {\n            key: type + \"|\" + i,\n            nodeLabel: \"neighbors: \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 544\n            },\n            __self: this\n          }, this.state.neighbors[name].map((neighbor, i) => {\n            return React.createElement(\"div\", {\n              className: \"info\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 546\n              },\n              __self: this\n            }, \" \", neighbor);\n          })));\n        }\n      })))), React.createElement(Graph, {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx"],"names":["React","Graph","TreeView","LeftWindow","Dropdown","Form","Button","ninvoke","GraphVisualizer","Component","constructor","props","rotateHandler","state","data","nodes","forEach","node","setTimeout","highlightHandler","id","nodeIndex","findIndex","color","setState","console","log","onClickAddNode","addNodeName","addNodePlaceholder","length","newNode","push","links","onClickRemoveNode","removeNodeName","removeNodePlaceholder","filter","l","source","target","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","i","addLinkPlaceholder","j","neighbors","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nSizeHandler","nSize","config","size","nColorHandler","nColor","lColorHandler","lColor","link","weight","Harry","Sally","Alice","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","highlightColor","generatedConfig","nodeIdToBeRemoved","render","map","type","name","neighbor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gCAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,yCAArB;AACA,OAAO,uBAAP;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAsC,iBAAtC;AACA,SAASC,OAAT,QAAwB,GAAxB,C,CAEA;;AACA,eAAe,MAAMC,eAAN,SAA8BR,KAAK,CAACS,SAApC,CAA8C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SA6DnBC,aA7DmB,GA6DH,MAAM;AACpB,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA+BC,IAAI,IAAK;AACtCC,QAAAA,UAAU,CAAC,KAAKC,gBAAL,CAAsBF,IAAI,CAACG,EAA3B,CAAD,EAAiC,IAAjC,CAAV;AACD,OAFD;AAGD,KAjEkB;;AAAA,SAmEnBD,gBAnEmB,GAmECC,EAAD,IAAQ;AAEzB,YAAMC,SAAS,GAAG,KAAKR,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBO,SAAtB,CAAiCL,IAAI,IAAI;AACzD,eAAOA,IAAI,CAACG,EAAL,KAAYA,EAAnB;AACD,OAFiB,CAAlB;AAIA,YAAMH,IAAI,GAAG,EACX,GAAG,KAAKJ,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBM,SAAtB;AADQ,OAAb;AAIAJ,MAAAA,IAAI,CAACM,KAAL,GAAa,KAAb;AAEA,YAAMR,KAAK,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAApB,CAAd;AACAA,MAAAA,KAAK,CAACM,SAAD,CAAL,GAAmBJ,IAAnB;AAEA,WAAKO,QAAL,CAAc,EACV,IAAG,KAAKX,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,GAAwBA,KAA3B;AADU,OAAd;AAGAU,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWC,IAAX,CAAgBC,KAA5B;AACD,KAtFkB;;AAAA,SAwFnBY,cAxFmB,GAwFF,MAAM;AACrB,UAAI,KAAKd,KAAL,CAAWe,WAAX,KAA2B,EAA/B,EAAmC;AACjC,aAAKJ,QAAL,CAAc;AACZK,UAAAA,kBAAkB,EAAE;AADR,SAAd;AAGA;AACD;;AACD,UAAI,KAAKhB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAAnD,EAA2D;AACzD,cAAMC,OAAO,GAAI,GAAE,KAAKlB,KAAL,CAAWe,WAAY,EAA1C;AAEA,aAAKf,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBiB,IAAtB,CAA2B;AAAEZ,UAAAA,EAAE,EAAEW;AAAN,SAA3B;AAEA,aAAKP,QAAL,CAAc;AACZV,UAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AADL,SAAd;AAGD,OARD,MAQO;AACL;AACA,cAAMA,IAAI,GAAG;AACXC,UAAAA,KAAK,EAAE,CAAC;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAD,CADI;AAEXa,UAAAA,KAAK,EAAE;AAFI,SAAb;AAKA,aAAKT,QAAL,CAAc;AAAEV,UAAAA;AAAF,SAAd;AACD;;AAED,WAAKU,QAAL,CAAc;AACZI,QAAAA,WAAW,EAAE,EADD;AAEZC,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAID,KArHkB;;AAAA,SA4HnBK,iBA5HmB,GA4HC,MAAM;AACxB,UAAI,KAAKrB,KAAL,CAAWsB,cAAX,KAA8B,EAAlC,EAAsC;AACpC,aAAKX,QAAL,CAAc;AACZY,UAAAA,qBAAqB,EAAE;AADX,SAAd;AAGA;AACD;;AACD,UAAI,KAAKvB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAAtB,IAAgC,CAA7D,EAAgE;AAC9D,cAAMf,KAAK,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBsB,MAAtB,CACZC,CAAC,IAAIA,CAAC,CAAClB,EAAF,KAAS,KAAKP,KAAL,CAAWsB,cADb,CAAd;AAGA,cAAMF,KAAK,GAAG,KAAKpB,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBI,MAAtB,CACZC,CAAC,IACCA,CAAC,CAACC,MAAF,KAAa,KAAK1B,KAAL,CAAWsB,cAAxB,IACAG,CAAC,CAACE,MAAF,KAAa,KAAK3B,KAAL,CAAWsB,cAHd,CAAd;AAKA,cAAMrB,IAAI,GAAG;AAAEC,UAAAA,KAAF;AAASkB,UAAAA;AAAT,SAAb;AAEA,aAAKT,QAAL,CAAc;AACZV,UAAAA,IADY;AAEZqB,UAAAA,cAAc,EAAE,EAFJ;AAGZC,UAAAA,qBAAqB,EAAE;AAHX,SAAd;AAKD;AACF,KApJkB;;AAAA,SAsJnBK,cAtJmB,GAsJF,MAAM;AACrB,UAAI,KAAK5B,KAAL,CAAW6B,OAAX,KAAuB,EAA3B,EAA+B;AAC7B;AACD;;AACD,UAAI,KAAK7B,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAAnD,EAA2D;AACzD,YAAIS,MAAJ,EAAYC,MAAZ;AACA,SAACD,MAAD,EAASC,MAAT,IAAmB,KAAK3B,KAAL,CAAW6B,OAAX,CAAmBC,KAAnB,CAAyB,OAAzB,EAAkCN,MAAlC,CAAyC,UAASO,CAAT,EAAY;AACtE,iBAAOA,CAAC,CAACC,IAAF,GAASf,MAAT,GAAkB,CAAzB;AACD,SAFkB,CAAnB;AAIA,YAAIgB,YAAJ,EAAkBC,YAAlB;AACAD,QAAAA,YAAY,GAAGC,YAAY,GAAG,KAA9B;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAA1C,EAAkDkB,CAAC,EAAnD,EAAuD;AACrD,cAAI,KAAKnC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBiC,CAAtB,EAAyB5B,EAAzB,KAAgCmB,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;;AACD,cAAI,KAAKjC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBiC,CAAtB,EAAyB5B,EAAzB,KAAgCoB,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAI,CAACD,YAAD,IAAiB,CAACC,YAAtB,EAAoC;AAClCtB,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAKF,QAAL,CAAc;AACZkB,YAAAA,OAAO,EAAE,EADG;AAEZO,YAAAA,kBAAkB,EAAE;AAFR,WAAd;AAIA;AACD;;AAED,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKrC,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBH,MAA1C,EAAkDoB,CAAC,EAAnD,EAAuD;AACrD,cACE,KAAKrC,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBiB,CAAtB,EAAyBX,MAAzB,KAAoCA,MAApC,IACA,KAAK1B,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBiB,CAAtB,EAAyBV,MAAzB,KAAoCA,MAFtC,EAGE;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,iBAAKF,QAAL,CAAc;AACZkB,cAAAA,OAAO,EAAE,EADG;AAEZO,cAAAA,kBAAkB,EAAE;AAFR,aAAd;AAIA;AACD;AACF;;AAED,aAAKpC,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBD,IAAtB,CAA2B;AACzBO,UAAAA,MAAM,EAAEA,MADiB;AAEzBC,UAAAA,MAAM,EAAEA;AAFiB,SAA3B;;AAKA,YAAID,MAAM,IAAI,KAAK1B,KAAL,CAAWsC,SAAzB,EAAoC;AAClC,eAAKtC,KAAL,CAAWsC,SAAX,CAAqBZ,MAArB,EAA6BP,IAA7B,CAAkCQ,MAAlC;AACD,SAFD,MAEO;AACL,eAAK3B,KAAL,CAAWsC,SAAX,CAAqBZ,MAArB,IAA+B,EAA/B;AACA,eAAK1B,KAAL,CAAWsC,SAAX,CAAqBZ,MAArB,EAA6BP,IAA7B,CAAkCQ,MAAlC;AACD;;AAED,aAAKhB,QAAL,CAAc;AACZkB,UAAAA,OAAO,EAAE,EADG;AAEZO,UAAAA,kBAAkB,EAAE;AAFR,SAAd;AAID;AACF,KApNkB;;AAAA,SAsNnBG,iBAtNmB,GAsNC,MAAM;AACxB,UAAI,KAAKvC,KAAL,CAAWwC,UAAX,KAA0B,EAA9B,EAAkC;AAChC;AACD;;AACD,UAAI,KAAKxC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAAnD,EAA2D;AACzD,YAAIS,MAAJ,EAAYC,MAAZ;AACA,SAACD,MAAD,EAASC,MAAT,IAAmB,KAAK3B,KAAL,CAAWwC,UAAX,CAChBV,KADgB,CACV,OADU,EAEhBN,MAFgB,CAET,UAASO,CAAT,EAAY;AAClB,iBAAOA,CAAC,CAACC,IAAF,GAASf,MAAT,GAAkB,CAAzB;AACD,SAJgB,CAAnB;AAMA,YAAIgB,YAAJ,EAAkBC,YAAlB;AACAD,QAAAA,YAAY,GAAGC,YAAY,GAAG,KAA9B;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBe,MAA1C,EAAkDkB,CAAC,EAAnD,EAAuD;AACrD,cAAI,KAAKnC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBiC,CAAtB,EAAyB5B,EAAzB,KAAgCmB,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;;AACD,cAAI,KAAKjC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBiC,CAAtB,EAAyB5B,EAAzB,KAAgCoB,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAI,CAACD,YAAD,IAAiB,CAACC,YAAtB,EAAoC;AAClCtB,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAKF,QAAL,CAAc;AACZ6B,YAAAA,UAAU,EAAE,EADA;AAEZC,YAAAA,qBAAqB,EAAE;AAFX,WAAd;AAIA;AACD;;AAED7B,QAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ,EAAoBC,MAApB;AAEA,cAAMP,KAAK,GAAG,KAAKpB,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsBI,MAAtB,CACZC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaA,MAAb,IAAuBD,CAAC,CAACE,MAAF,KAAaA,MAD7B,CAAd;AAIA,cAAM1B,IAAI,GAAG;AAAEC,UAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAzB;AAAgCkB,UAAAA;AAAhC,SAAb;;AAEA,YAAIM,MAAM,IAAI,KAAK1B,KAAL,CAAWsC,SAAzB,EAAoC;AAClC,eAAKtC,KAAL,CAAWsC,SAAX,CAAqBZ,MAArB,IAA+B,KAAK1B,KAAL,CAAWsC,SAAX,CAAqBZ,MAArB,EAA6BF,MAA7B,CAC7BC,CAAC,IAAIA,CAAC,KAAKE,MADkB,CAA/B;AAGD;;AAED,aAAKhB,QAAL,CAAc;AACZV,UAAAA,IAAI,EAAEA,IADM;AAEZuC,UAAAA,UAAU,EAAE,EAFA;AAGZC,UAAAA,qBAAqB,EAAE;AAHX,SAAd;AAKD;AACF,KA3QkB;;AAAA,SA+QnBC,oBA/QmB,GA+QIC,KAAK,IAAI;AAC9B,WAAKhC,QAAL,CAAc;AAAEI,QAAAA,WAAW,EAAE4B,KAAK,CAAChB,MAAN,CAAaiB;AAA5B,OAAd;AACD,KAjRkB;;AAAA,SAqRnBC,uBArRmB,GAqROF,KAAK,IAAI;AACjC,WAAKhC,QAAL,CAAc;AAAEW,QAAAA,cAAc,EAAEqB,KAAK,CAAChB,MAAN,CAAaiB;AAA/B,OAAd;AACD,KAvRkB;;AAAA,SAyRnBE,oBAzRmB,GAyRIH,KAAK,IAAI;AAC9B,WAAKhC,QAAL,CAAc;AAAEkB,QAAAA,OAAO,EAAEc,KAAK,CAAChB,MAAN,CAAaiB;AAAxB,OAAd;AACD,KA3RkB;;AAAA,SA6RnBG,uBA7RmB,GA6ROJ,KAAK,IAAI;AACjC,WAAKhC,QAAL,CAAc;AAAE6B,QAAAA,UAAU,EAAEG,KAAK,CAAChB,MAAN,CAAaiB;AAA3B,OAAd;AACD,KA/RkB;;AAAA,SAmSnBI,kBAnSmB,GAmSEjB,CAAC,IAAI;AACxB,UAAIA,CAAC,CAACkB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKnC,cAAL;AACD;AACF,KAvSkB;;AAAA,SA2SnBoC,qBA3SmB,GA2SKnB,CAAC,IAAI;AAC3B,UAAIA,CAAC,CAACkB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAK5B,iBAAL;AACD;AACF,KA/SkB;;AAAA,SAiTnB8B,mBAjTmB,GAiTGpB,CAAC,IAAI;AACzB,UAAIA,CAAC,CAACkB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKrB,cAAL;AACD;AACF,KArTkB;;AAAA,SAuTnBwB,yBAvTmB,GAuTSrB,CAAC,IAAI;AAC/B,UAAIA,CAAC,CAACkB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKV,iBAAL;AACD;AACF,KA3TkB;;AAAA,SA6TnBc,iBA7TmB,GA6TC,MAAM;AACxBzC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KA/TkB;;AAAA,SAkUjByC,YAlUiB,GAkUDC,KAAD,IAAW;AACxB,YAAMC,MAAM,GAAG,KAAKxD,KAAL,CAAWwD,MAA1B;AAEAA,MAAAA,MAAM,CAACpD,IAAP,CAAYqD,IAAZ,GAAmBF,KAAnB;AAEA,WAAK5C,QAAL,CAAc;AACZ6C,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KA1UgB;;AAAA,SA4UjBE,aA5UiB,GA4UAC,MAAD,IAAY;AAC1B,YAAMH,MAAM,GAAG,KAAKxD,KAAL,CAAWwD,MAA1B;AAEAA,MAAAA,MAAM,CAACpD,IAAP,CAAYM,KAAZ,GAAoBiD,MAApB;AAEA,WAAKhD,QAAL,CAAc;AACZ6C,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KApVgB;;AAAA,SAsVjBI,aAtViB,GAsVAC,MAAD,IAAY;AAC1B,YAAML,MAAM,GAAG,KAAKxD,KAAL,CAAWwD,MAA1B;AAEAA,MAAAA,MAAM,CAACM,IAAP,CAAYpD,KAAZ,GAAoBmD,MAApB;AAEA,WAAKlD,QAAL,CAAc;AACZ6C,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KA9VgB;;AAIjB,UAAMvD,KAAI,GAAG;AACXC,MAAAA,KAAK,EAAE,CACL;AAAEK,QAAAA,EAAE,EAAE,OAAN;AAAeG,QAAAA,KAAK,EAAE;AAAtB,OADK,EAEL;AAAEH,QAAAA,EAAE,EAAE,OAAN;AAAeG,QAAAA,KAAK,EAAE;AAAtB,OAFK,EAGL;AAAEH,QAAAA,EAAE,EAAE,OAAN;AAAeG,QAAAA,KAAK,EAAE;AAAtB,OAHK,CADI;AAKXU,MAAAA,KAAK,EAAE,CACL;AAAEM,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OADK,EAEL;AAAED,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAFK,CALI;AASXoC,MAAAA,MAAM,EAAE;AATG,KAAb;AAYA,UAAMzB,SAAS,GAAG;AAChB0B,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,OAAV,CADS;AAEhBC,MAAAA,KAAK,EAAE,EAFS;AAGhBC,MAAAA,KAAK,EAAE;AAHS,KAAlB,CAhBiB,CAsBjB;;AACA,UAAMV,OAAM,GAAG;AACbW,MAAAA,qBAAqB,EAAE,IADV;AAEbC,MAAAA,+BAA+B,EAAE,IAFpB;AAGbC,MAAAA,MAAM,EAAEC,MAAM,CAACC,WAAP,GAAqB,KAHhB;AAIbC,MAAAA,KAAK,EAAEF,MAAM,CAACG,UAJD;AAKbrE,MAAAA,IAAI,EAAE;AACJM,QAAAA,KAAK,EAAE,SADH;AAEJ+C,QAAAA,IAAI,EAAE,GAFF;AAGJiB,QAAAA,oBAAoB,EAAE;AAHlB,OALO;AAUbZ,MAAAA,IAAI,EAAE;AACJa,QAAAA,cAAc,EAAE;AADZ;AAVO,KAAf,CAvBiB,CAsCjB;;AACA,SAAK3E,KAAL,GAAa;AACXwD,MAAAA,MAAM,EAANA,OADW;AAEXoB,MAAAA,eAAe,EAAE,EAFN;AAGX3E,MAAAA,IAAI,EAAJA,KAHW;AAIXqC,MAAAA,SAAS,EAAEA,SAJA;AAKXuC,MAAAA,iBAAiB,EAAE,IALR;AAMX9D,MAAAA,WAAW,EAAE,EANF;AAOXO,MAAAA,cAAc,EAAE,EAPL;AAQXO,MAAAA,OAAO,EAAE,EARE;AASXb,MAAAA,kBAAkB,EAAE,mBATT;AAUXO,MAAAA,qBAAqB,EAAE,sBAVZ;AAWXa,MAAAA,kBAAkB,EAAE,0BAXT;AAYXK,MAAAA,qBAAqB,EAAE;AAZZ,KAAb;AAcD,GA/D0D,CAiE3D;AACA;AACA;AACA;AACA;;;AAqSA;AACA;AACAqC,EAAAA,MAAM,GAAG;AACP,WACE;AAEA;AAAK,QAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,aAAb;AAA2B,QAAA,SAAS,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,mBAAzB;AAA6C,QAAA,EAAE,EAAC,gBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAKE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AACE,QAAA,KAAK,EAAE,KAAKxB,YADd;AAEE,QAAA,MAAM,EAAE,KAAKI,aAFf;AAGE,QAAA,MAAM,EAAE,KAAKE,aAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CALF,CAFF,EAgBE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,MAAb;AAAmB,QAAA,SAAS,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,mBAAzB;AAA6C,QAAA,EAAE,EAAC,gBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAKA,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAM,QAAA,QAAQ,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,UAApB;AAA+B,QAAA,IAAI,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,cAAzB;AAAwC,QAAA,EAAE,EAAC,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAKE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,EAAE,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAA4B,QAAA,MAAM,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAJF,EAOE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CALF,CAFF,EAoBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,MAAtB;AAA4B,QAAA,IAAI,EAAC,UAAjC;AAA4C,QAAA,EAAE,EAAC,QAA/C;AAAwD,QAAA,KAAK,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,IAAI,EAAC,UAAjB;AAA4B,QAAA,EAAE,EAAC,QAA/B;AAAwC,QAAA,KAAK,EAAC,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CApBF,EAyBE;AAAI,QAAA,KAAK,EAAC,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF,EA0BE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,WAAW,EAAC,qBALd;AAME,QAAA,QAAQ,EAAC,EANX,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA1BF,EAsCE;AAAI,QAAA,KAAK,EAAC,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAtCF,EAuCE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,YAJP;AAKE,QAAA,WAAW,EAAC,mBALd;AAME,QAAA,QAAQ,EAAC,EANX,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAvCF,EAmDE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,aAAd;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAA0C,QAAA,OAAO,EAAC,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnDF,CADA,CALA,CAhBF,EAgFC,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,aAAd;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAA0C,QAAA,OAAO,EAAC,iBAAlD;AAAoE,QAAA,OAAO,EAAE,MAAM,KAAK7D,aAAL,EAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAhFD,CADF,EAwFE;AAAK,QAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAKe,cADhB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,wBAHR;AAIE,QAAA,EAAE,EAAC,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAI,QAAA,KAAK,EAAC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,CADF,CADF,EAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,aAHP;AAIE,QAAA,WAAW,EAAE,KAAKd,KAAL,CAAWgB,kBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWe,WALpB;AAME,QAAA,QAAQ,EAAE,KAAK2B,oBANjB;AAOE,QAAA,UAAU,EAAE,KAAKM,kBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAFF,EAwBE;AAAI,QAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAxBF,EAyBE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAK3B,iBADhB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,oCAHR;AAIE,QAAA,EAAE,EAAC,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAI,QAAA,KAAK,EAAC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,CADF,CADF,EAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,gBAHP;AAIE,QAAA,WAAW,EAAE,KAAKrB,KAAL,CAAWuB,qBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWsB,cALpB;AAME,QAAA,QAAQ,EAAE,KAAKuB,uBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,qBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAzBF,EA+CE;AAAI,QAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA/CF,EAgDE;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,WAAW,EAAE,KAAKlD,KAAL,CAAWoC,kBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKpC,KAAL,CAAW6B,OALpB;AAME,QAAA,QAAQ,EAAE,KAAKiB,oBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,mBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhDF,EA0DE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA1DF,EA2DE;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,WAAW,EAAE,KAAKnD,KAAL,CAAWyC,qBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKzC,KAAL,CAAWwC,UALpB;AAME,QAAA,QAAQ,EAAE,KAAKO,uBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,yBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3DF,EAqEE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBArEF,EAsEE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,GAAG,EAAC,OAA5B;AAAoC,QAAA,SAAS,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKpD,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB6E,GAAtB,CAA0B,CAAC3E,IAAD,EAAO+B,CAAP,KAAa;AACtC,cAAM6C,IAAI,GAAG5E,IAAI,CAAC4E,IAAlB;AACA,cAAMC,IAAI,GAAG7E,IAAI,CAACG,EAAlB;;AACA,YAAI0E,IAAI,IAAI,KAAKjF,KAAL,CAAWsC,SAAvB,EAAkC;AAChC,iBACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAE0C,IAAI,GAAG,GAAP,GAAa7C,CAA5B;AAA+B,YAAA,SAAS,EAAE8C,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAED,IAAI,GAAG,GAAP,GAAa7C,CAA5B;AAA+B,YAAA,SAAS,EAAC,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,KAAKnC,KAAL,CAAWsC,SAAX,CAAqB2C,IAArB,EAA2BF,GAA3B,CAA+B,CAACG,QAAD,EAAW/C,CAAX,KAAiB;AAC/C,mBAAO;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwB+C,QAAxB,CAAP;AACD,WAFA,CADH,CADF,CADF;AASD;AACF,OAdA,CADH,CADF,CAtEF,CAxFF,EAmLE,oBAAC,KAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,IAAI,EAAE,KAAKlF,KAAL,CAAWC,IAFnB;AAGE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWwD,MAHrB;AAIE,QAAA,gBAAgB,EAAE,KAAKH,iBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnLF;AAHF;AA8LD;;AA3iB0D","sourcesContent":["import React from \"../../../../node_modules/react\";\nimport { Graph } from \"../../Node\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from \"../../LeftWindow/LeftWindow\";\nimport { Dropdown, Form, Button} from \"react-bootstrap\";\nimport { ninvoke } from \"q\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [\n        { id: \"Harry\", color: '' }, \n        { id: \"Sally\", color: '' }, \n        { id: \"Alice\", color: '' }],\n      links: [\n        { source: \"Harry\", target: \"Sally\" },\n        { source: \"Harry\", target: \"Alice\" }\n      ],\n      weight: 2\n    };\n\n    const neighbors = {\n      Harry: [\"Sally\", \"Alice\"],\n      Sally: [],\n      Alice: []\n    };\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.811,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      neighbors: neighbors,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\"\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  rotateHandler = () => {\n    this.state.data.nodes.forEach( node =>  {\n      setTimeout(this.highlightHandler(node.id), 3000)\n    })\n  }\n\n  highlightHandler = (id) => {\n    \n    const nodeIndex = this.state.data.nodes.findIndex( node => {\n      return node.id === id\n    })\n    \n    const node = {\n      ...this.state.data.nodes[nodeIndex]\n    }\n\n    node.color = 'red'\n\n    const nodes = [...this.state.data.nodes]\n    nodes[nodeIndex] = node\n\n    this.setState({\n        ...this.state.data.nodes = nodes\n    })\n    console.log(this.state.data.nodes)\n  }\n  \n  onClickAddNode = () => {\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      this.state.data.nodes.push({ id: newNode });\n\n      this.setState({\n        data: this.state.data\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: []\n      };\n\n      this.setState({ data });\n    }\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\"\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        l => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        l =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\"\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function(e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target\n      });\n\n      if (source in this.state.neighbors) {\n        this.state.neighbors[source].push(target);\n      } else {\n        this.state.neighbors[source] = [];\n        this.state.neighbors[source].push(target);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function(e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      console.log(source, target);\n\n      const links = this.state.data.links.filter(\n        l => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      if (source in this.state.neighbors) {\n        this.state.neighbors[source] = this.state.neighbors[source].filter(\n          l => l !== target\n        );\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = event => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = event => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = event => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = event => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n    //Functions for state handling \n    nSizeHandler = (nSize) => {\n      const config = this.state.config\n  \n      config.node.size = nSize\n  \n      this.setState({\n        config : config\n      })\n    }\n  \n    nColorHandler = (nColor) => {\n      const config = this.state.config\n  \n      config.node.color = nColor\n  \n      this.setState({\n        config : config\n      })\n    }\n  \n    lColorHandler = (lColor) => {\n      const config = this.state.config\n  \n      config.link.color = lColor\n  \n      this.setState({\n        config : config\n      })\n    }\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      \n      <div class=\"box\">\n        <div class=\"leftWindow\">\n  \n          <Dropdown id='graphConfig' className='LeftWindow pt-3'>\n            <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\n              Graph Configurations\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n            <LeftWindow \n              nSize={this.nSizeHandler}\n              nColor={this.nColorHandler}\n              lColor={this.lColorHandler}\n            />\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id='algo'className='pt-3'>\n            <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\n              Algorithm Settings\n            </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n          <form onSubmit=''>\n\n            <Dropdown className=\"dropdown\" drop=\"right\">\n              <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-basic\">\n                Algorithm\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu id='algoSelection'>\n                <Dropdown.Item eventKey=\"1\" active>\n                  Depth-First Search\n                </Dropdown.Item>\n                <Dropdown.Item evenyKey=\"2\">\n                  Breadth-First Search\n                  </Dropdown.Item>\n                <Dropdown.Item eventKey=\"3\">\n                  Dijkstra's\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <div className=\"mt-2 mb-2\">\n              <Form.Check className='mr-3'type=\"checkbox\" id=\"direct\" label=\"Directed\" />\n              <Form.Check type=\"checkbox\" id=\"weight\" label=\"Weighted\" />\n            </div>\n\n            <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n            <div class=\"input-group mb-3\">\n              <input\n                class=\"L\"\n                id=\"sNode\"\n                type=\"text\"\n                name=\"startNode\"\n                placeholder=\"Enter starting node\"\n                onChange=''\n                //onKeyPress={this._handleLinkKeyEnter}\n              />\n            </div>\n\n            <h5 class=\"font-weight-light h6\"> Target Node </h5>\n            <div class=\"input-group mb-3\">\n              <input\n                class=\"L\"\n                id=\"tNode\"\n                type=\"text\"\n                name=\"tarhetNode\"\n                placeholder=\"Enter ending node\"\n                onChange=''\n                //onKeyPress={this._handleLinkKeyEnter}\n              />\n            </div>\n\n            <Button class=\"submit mt-3\" type=\"submit\" variant=\"outline-success\">\n              Start\n            </Button>\n          </form>\n          </Dropdown.Menu>\n         </Dropdown>\n          \n         <Button class=\"submit mt-3\" type=\"submit\" variant=\"outline-success\" onClick={() => this.rotateHandler()}>\n              HighLight Test\n          </Button>\n        \n\n        </div>\n\n        <div class=\"rightWindow\">\n          <h5 class=\"font-weight-light pt-2\"> Add node: </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickAddNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger\"\n                id=\"button-addon1\"\n              >\n                <h6 class=\"align-middle\"> + </h6>\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              class=\"nodeInput\"\n              name=\"addNodeName\"\n              placeholder={this.state.addNodePlaceholder}\n              value={this.state.addNodeName}\n              onChange={this._addNodeHandleChange}\n              onKeyPress={this._handleAddKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Remove node: </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickRemoveNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                id=\"button-addon1\"\n              >\n                <h6 class=\"align-middle\"> - </h6>\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              class=\"nodeInput\"\n              name=\"removeNodeName\"\n              placeholder={this.state.removeNodePlaceholder}\n              value={this.state.removeNodeName}\n              onChange={this._removeNodeHandleChange}\n              onKeyPress={this._handleRemoveKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Add link: </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"addLink\"\n            placeholder={this.state.addLinkPlaceholder}\n            value={this.state.addLink}\n            onChange={this._addLinkHandleChange}\n            onKeyPress={this._handleLinkKeyEnter}\n          />\n\n          <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"removeLink\"\n            placeholder={this.state.removeLinkPlaceholder}\n            value={this.state.removeLink}\n            onChange={this._removeLinkHandleChange}\n            onKeyPress={this._handleRemoveLinkKeyEnter}\n          />\n\n          <h5 class=\"font-weight-light pt-3\"> Node list: </h5>\n          <div className=\"json-data-container\">\n            <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n              {this.state.data.nodes.map((node, i) => {\n                const type = node.type;\n                const name = node.id;\n                if (name in this.state.neighbors) {\n                  return (\n                    <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                      <TreeView key={type + \"|\" + i} nodeLabel=\"neighbors: \">\n                        {this.state.neighbors[name].map((neighbor, i) => {\n                          return <div className=\"info\"> {neighbor}</div>;\n                        })}\n                      </TreeView>\n                    </TreeView>\n                  );\n                }\n              })}\n            </TreeView>\n          </div>\n        </div>\n\n        <Graph\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}