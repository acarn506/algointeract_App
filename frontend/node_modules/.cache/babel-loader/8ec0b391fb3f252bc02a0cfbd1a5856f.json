{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.updateConnection = () => {\n      let removeName = this.state.removeNodeName;\n      let listInfo = this.state.data.listInfo;\n      let removeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === removeName;\n      });\n      let newNodes = [...this.state.data.nodes];\n      let removeNode = newNodes[removeIndex];\n\n      if (this.state.data.nodes.length === 1) {\n        listInfo.head = null;\n        listInfo.tail = null;\n      } else if (listInfo.head === removeNode.nodeid) {\n        listInfo.head = removeNode.next;\n        removeNode.next = null;\n        newNodes[removeIndex] = removeNode;\n      } else if (listInfo.tail === removeNode.nodeid) {\n        let newTailIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let newTailNode = newNodes[newTailIndex];\n        listInfo.tail = newTailNode.nodeid;\n        newTailNode.next = null;\n        newNodes[newTailIndex] = newTailNode;\n      } else {\n        let prevIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let prevNode = newNodes[prevIndex];\n        prevNode.next = removeNode.next;\n        removeNode.next = null;\n        newNodes[prevIndex] = prevNode;\n        newNodes[removeIndex] = removeNode;\n      }\n\n      this.setState({\n        listInfo: listInfo\n      });\n    };\n\n    this.updateListColor = index => {\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.head;\n      });\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.tail;\n      });\n      let newNodes = [...this.state.data.nodes];\n      newNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n      });\n      newNodes[headIndex].color = 'blue';\n      newNodes[tailIndex].color = 'red';\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n    };\n\n    this.getCount = () => {\n      let curCount = this.state.data.nodes.length;\n      curCount++;\n      return curCount;\n    };\n\n    this.getNewNode = () => {\n      let length = this.state.data.nodes.length;\n      return this.state.data.nodes[length - 1];\n    };\n\n    this.appendNode = () => {\n      let listInfo = this.state.data.listInfo;\n      let newNode = this.getNewNode();\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.next == null;\n      });\n      const tailNode = { ...this.state.data.nodes[tailIndex]\n      };\n      tailNode.next = newNode.nodeid;\n      let newNodes = [...this.state.data.nodes];\n      newNodes[tailIndex] = tailNode;\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      listInfo.tail = newNode.nodeid;\n      this.setState({\n        listInfo: listInfo\n      });\n      this.state.data.links.push({\n        source: newNode.id,\n        target: tailNode.id\n      });\n    };\n\n    this.prependNode = () => {\n      let listInfo = this.state.data.listInfo;\n      let newNode = this.getNewNode();\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.head;\n      });\n      const headNode = { ...this.state.data.nodes[headIndex]\n      };\n      newNode.next = headNode.nodeid;\n      listInfo.head = newNode.nodeid;\n      let newNodes = [...this.state.data.nodes];\n      let lastIndex = newNodes.lastIndexOf();\n      newNodes[lastIndex] = newNode;\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      this.setState({\n        listInfo: listInfo\n      });\n      this.state.data.links.push({\n        source: newNode.id,\n        target: headNode.id\n      });\n    };\n\n    this.onClickAddNode = event => {\n      // Checks if the addNodeName is an empty string\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        let newid = this.getCount();\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\"\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      if (event === 'app') {\n        this.appendNode();\n      } else if (event === 'pre') {\n        this.prependNode();\n      }\n\n      let index = this.state.data.listInfo;\n      this.updateListColor(index); //test\n\n      console.log('nodes', this.state.data.nodes);\n      console.log('listInfo', this.state.data.listInfo); // Adds node to the neighbor array in the state's algoData\n\n      /*\n      let found = false;\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (this.state.addNodeName in this.state.algoData.neighbors[i]) {\n          found = true;\n        }\n      }\n      if (!found) {\n        var name = this.state.addNodeName;\n        var newNeighbor = {};\n        newNeighbor[name] = [];\n         this.state.algoData.neighbors.push(newNeighbor);\n        this.setState({ algoData: this.state.algoData });\n      }\n      console.log(this.state.algoData.neighbors);\n       this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\",\n      });\n      */\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.updateConnection();\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n        var found = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source].push(target);\n            found = true;\n          }\n        }\n\n        if (!found) {\n          var newNeighbor = {};\n          newNeighbor[source] = [target];\n          this.state.algoData.neighbors.push(newNeighbor);\n        }\n\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        endNode: this.state.algoData.endNode,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addEndNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        endNode: event.target.value,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      if (this.state.algoData.algorithm === \"dfs\") {\n        this.depthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {}\n    };\n\n    this.depthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          console.log(startNode, endNode);\n\n          if (startNode in this.state.algoData.neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in this.state.algoData.neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = {\n              startNode: this.state.algoData.stack,\n              endNode: this.state.algoData.endNode,\n              neighbors: this.state.algoData.neighbors,\n              algorithm: this.state.algoData.algorithm,\n              startAlgorithm: this.state.algoData.startAlgorithm,\n              stack: []\n            };\n            this.setState({\n              algoData\n            });\n          }\n\n          this.state.algoData.stack = [];\n          this.state.algoData.stack.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.stack !== undefined || this.state.algoData.stack.length !== 0) {\n            const curr = this.state.algoData.stack.pop();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++;\n            console.log(curr);\n\n            for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n              if (curr in this.state.algoData.neighbors[i] && this.state.algoData.neighbors[i][curr] !== null && this.state.algoData.neighbors[i][curr].length !== 0) {\n                for (let j = 0; j < this.state.algoData.neighbors[i][curr].length; j++) {\n                  const newNode = this.state.algoData.neighbors[i][curr][j];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.stack.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.breadthFirstSearch = () => {\n      if (this.state.algoData.startNode !== \"\" && this.state.algoData.endNode !== \"\") {\n        const startNode = this.state.algoData.startNode;\n        const endNode = this.state.algoData.endNode;\n        var startNodeIsValid = false;\n        var endNodeIsValid = false;\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (startNode in this.state.algoData.neighbors[i]) {\n            startNodeIsValid = true;\n          }\n\n          if (endNode in this.state.algoData.neighbors[i]) {\n            endNodeIsValid = true;\n          }\n        }\n\n        if (startNodeIsValid && endNodeIsValid) {\n          if (this.state.algoData.stack == null) {\n            const algoData = {\n              startNode: this.state.algoData.stack,\n              endNode: this.state.algoData.endNode,\n              neighbors: this.state.algoData.neighbors,\n              algorithm: this.state.algoData.algorithm,\n              startAlgorithm: this.state.algoData.startAlgorithm,\n              stack: []\n            };\n            this.setState({\n              algoData\n            });\n          }\n\n          this.state.algoData.queue = [];\n          this.state.algoData.queue.push(startNode);\n          const visited = {};\n          var counter = 0;\n          visited[startNode] = startNode;\n\n          while (this.state.algoData.queue !== undefined || this.state.algoData.queue.length !== 0) {\n            const curr = this.state.algoData.queue.shift();\n\n            if (curr === endNode) {\n              for (let i = 0; i < 5; i++) {\n                setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n                counter++;\n              }\n\n              console.log(\"FOUND TARGET\");\n              this.resetState(counter);\n              return;\n            }\n\n            setTimeout(() => this.highlightHandler(curr, counter), 1000 * (counter + 1));\n            counter++;\n\n            for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n              if (curr in this.state.algoData.neighbors[i] && this.state.algoData.neighbors[i][curr] !== null && this.state.algoData.neighbors[i][curr].length !== 0) {\n                for (let j = 0; j < this.state.algoData.neighbors[i][curr].length; j++) {\n                  const newNode = this.state.algoData.neighbors[i][curr][j];\n\n                  if (newNode in visited) {\n                    console.log(\"VISITED\");\n                    continue;\n                  }\n\n                  this.state.algoData.queue.push(newNode);\n                  visited[newNode] = newNode;\n                }\n              }\n            }\n          } // Reset node color state after DFS is done\n\n\n          this.resetState();\n        } else {\n          console.log(\"FAILURE!!!\");\n        }\n      } else {\n        console.log(\"FAIL\");\n        console.log(this.state.algoData.startNode, this.state.algoData.endNode, this.state.algoData.algorithm);\n      }\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    this.eventKeyHandler = key => {\n      let tabKey = this.state.key;\n      tabKey = key;\n      this.setState({\n        key: tabKey\n      });\n    };\n\n    const _data = {\n      //apply characteristics for each node\n      nodes: [{\n        id: \"Michael\",\n        nodeid: 1,\n        next: null,\n        color: \"\"\n      }],\n      links: [//{ source: \"Michael\", target: \"Jan\" },\n      ],\n      listInfo: {\n        head: 1,\n        tail: 1\n      }\n    };\n    const neighbors = [{\n      Michael: [(\"Jan\", 10), \"Holly\", \"Ryan\", \"Jim\", \"Toby\"]\n    }, {\n      Jim: [\"Pam\", \"Karen\", \"Dwight\"]\n    }, {\n      Pam: [\"Roy\"]\n    }, {\n      Dwight: [\"Angela\", \"Andy\"]\n    }, {\n      Andy: [\"Erin\"]\n    }, {\n      Ryan: [\"Kelly\"]\n    }, {\n      Angela: [\"Oscar\", \"Kevin\", \"Senator\"]\n    }, {\n      Oscar: [\"Senator\", \"Phyllis\"]\n    }, {\n      Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"]\n    }]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n    const _algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      preNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: '' //state for Algorithm tabs \n\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const neighborItems = this.state.algoData.stack.map(item => {\n      return React.createElement(\"li\", {\n        class: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921\n        },\n        __self: this\n      }, item);\n    });\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"tLog fixed-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 928\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        class: \"list-group list-group-flush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929\n        },\n        __self: this\n      }, neighborItems)), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }, \"Linked List\"), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 952\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 966\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1000\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1001\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1002\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1019\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1020\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1028\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1046\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1047\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1061\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1062\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1063\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter starting node\",\n        onChange: this._addStartNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1076\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter ending node\",\n        onChange: this._addEndNodeHandleChange //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1077\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        className: \"dropdown pt-2\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1088\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1089\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1093\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        onSelect: () => this.state.algoData.algorithm = \"dfs\",\n        onSelect: event => this.eventKeyHandler(event) //Tab selector\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1094\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        evenyKey: \"2\",\n        onSelect: () => this.state.algoData.algorithm = \"bfs\",\n        onSelect: event => this.eventKeyHandler(2) //Tab Selector\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1101\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        onSelect: () => this.state.algoData.algorithm = \"djk\",\n        onSelect: event => this.eventKeyHandler(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1108\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" //activate Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm() //Should call selected algorithm\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1118\n        },\n        __self: this\n      }, \"Start Algorithm\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1130\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1138\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1139\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1147\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1161\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1162\n        },\n        __self: this\n      }, \" Append node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1164\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickAddNode('app'),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1165\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1171\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1174\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1185\n        },\n        __self: this\n      }, \" Prepend node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1187\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.onClickAddNode('pre'),\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1194\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1197\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1208\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1209\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1210\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1211\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1217\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1220\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1231\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1232\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1242\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1243\n        },\n        __self: this\n      }))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1255\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Node List\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1256\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1263\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-list-ul\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1264\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1272\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1281\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"json-data-container mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1282\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1283\n        },\n        __self: this\n      }, this.state.data.nodes.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n\n        for (i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (name in this.state.algoData.neighbors[i]) {\n            return React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1290\n              },\n              __self: this\n            }, React.createElement(TreeView, {\n              key: type + \"|\" + i,\n              nodeLabel: \"neighbors: \",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1291\n              },\n              __self: this\n            }, this.state.algoData.neighbors[i][name].map((neighbor, i) => {\n              return React.createElement(\"div\", {\n                className: \"info\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1298\n                },\n                __self: this\n              }, \" \", neighbor);\n            })));\n          }\n        }\n      })))))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1314\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1323\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx"],"names":["React","Graph","TreeView","ReactTooltip","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","updateConnection","removeName","state","removeNodeName","listInfo","data","removeIndex","nodes","findIndex","node","id","newNodes","removeNode","length","head","tail","nodeid","next","newTailIndex","newTailNode","prevIndex","prevNode","setState","updateListColor","index","headIndex","tailIndex","forEach","color","nodeColor","getCount","curCount","getNewNode","appendNode","newNode","tailNode","links","push","source","target","prependNode","headNode","lastIndex","lastIndexOf","onClickAddNode","event","addNodeName","addNodePlaceholder","newid","console","log","onClickRemoveNode","removeNodePlaceholder","filter","l","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","i","addLinkPlaceholder","j","found","algoData","neighbors","newNeighbor","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","endNode","algorithm","startAlgorithm","stack","_addEndNodeHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","nodeColorHandler","linkColorHandler","linkColor","link","depthFirstSearch","breadthFirstSearch","startNodeIsValid","endNodeIsValid","visited","counter","undefined","curr","pop","setTimeout","foundTarget","resetState","highlightHandler","queue","shift","rotateHandler","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","strokeColor","then","nodeIndex","origNode","eventKeyHandler","tabKey","Michael","Jim","Pam","Dwight","Andy","Ryan","Angela","Oscar","Phyllis","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","symbolType","highlightColor","generatedConfig","nodeIdToBeRemoved","preNodeName","preNodePlaceholder","render","neighborItems","map","item","document","getElementById","type","name","neighbor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport TreeView from \"react-treeview\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button} from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      //apply characteristics for each node\n      nodes: [\n        { id: \"Michael\", nodeid: 1, next: null, color: \"\"},\n        \n      ],\n      links: [\n        //{ source: \"Michael\", target: \"Jan\" },\n      ],\n\n      listInfo: {head: 1, tail: 1},\n    };\n\n    const neighbors = [\n      { Michael: [(\"Jan\", 10), \"Holly\", \"Ryan\", \"Jim\", \"Toby\"] },\n      { Jim: [\"Pam\", \"Karen\", \"Dwight\"] },\n      { Pam: [\"Roy\"] },\n      { Dwight: [\"Angela\", \"Andy\"] },\n      { Andy: [\"Erin\"] },\n      { Ryan: [\"Kelly\"] },\n      { Angela: [\"Oscar\", \"Kevin\", \"Senator\"] },\n      { Oscar: [\"Senator\", \"Phyllis\"] },\n      { Phyllis: [\"Stanley\", \"Bob Vance, Vance Refrigeration\"] },\n    ];\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 1000,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n      },\n    };\n\n    const algoData = {\n      startNode: \"\",\n      endNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"dfs\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      preNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      key: '' //state for Algorithm tabs \n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  updateConnection = () => {\n    let removeName = this.state.removeNodeName\n    let listInfo = this.state.data.listInfo\n\n    let removeIndex = this.state.data.nodes.findIndex( node => {\n      return node.id === removeName\n    })\n\n    let newNodes = [...this.state.data.nodes]\n\n    let removeNode = newNodes[removeIndex]\n\n    if (this.state.data.nodes.length === 1) {\n      listInfo.head = null\n      listInfo.tail = null\n    }\n    else if (listInfo.head === removeNode.nodeid) {\n      listInfo.head = removeNode.next\n      removeNode.next = null\n      newNodes[removeIndex] = removeNode\n    }\n    else if (listInfo.tail === removeNode.nodeid) {\n      let newTailIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n      let newTailNode = newNodes[newTailIndex]\n      listInfo.tail = newTailNode.nodeid\n      newTailNode.next = null\n      newNodes[newTailIndex] = newTailNode\n    } \n    else {\n      let prevIndex = this.state.data.nodes.findIndex( node => {\n        return node.next === removeNode.nodeid\n      })\n      let prevNode = newNodes[prevIndex]\n      prevNode.next = removeNode.next\n      removeNode.next = null\n      newNodes[prevIndex] = prevNode\n      newNodes[removeIndex] = removeNode\n    }\n\n    this.setState({\n      listInfo : listInfo\n    })\n\n  }\n\n  updateListColor = (index) => {\n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.head\n    })\n\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === index.tail\n    })\n\n    let newNodes = [...this.state.data.nodes]\n\n    newNodes.forEach((node) => {\n      node.color = this.state.nodeColor;\n    });\n\n    newNodes[headIndex].color = 'blue'\n    newNodes[tailIndex].color = 'red'\n\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n  }\n  \n  getCount = () => {\n    let curCount = this.state.data.nodes.length\n    curCount++\n    return curCount\n  }\n\n  getNewNode = () => {\n    let length = this.state.data.nodes.length\n    return this.state.data.nodes[length-1]\n  }\n\n  appendNode = () => {\n    let listInfo = this.state.data.listInfo\n    let newNode = this.getNewNode()\n\n    let tailIndex = this.state.data.nodes.findIndex( node => {\n      return node.next == null\n    })\n\n    const tailNode = {\n      ...this.state.data.nodes[tailIndex],\n    };\n\n    tailNode.next = newNode.nodeid\n\n    let newNodes = [...this.state.data.nodes]\n\n    newNodes[tailIndex] = tailNode\n\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n\n    listInfo.tail = newNode.nodeid\n\n    this.setState({\n      listInfo : listInfo\n    })\n\n    this.state.data.links.push({\n      source: newNode.id,\n      target: tailNode.id,\n    });\n  }\n\n  prependNode = () => {\n    let listInfo = this.state.data.listInfo\n    let newNode = this.getNewNode()\n\n    let headIndex = this.state.data.nodes.findIndex( node => {\n      return node.nodeid === listInfo.head\n    })\n\n    const headNode = {\n      ...this.state.data.nodes[headIndex],\n    };\n\n    newNode.next = headNode.nodeid\n    listInfo.head = newNode.nodeid\n\n    let newNodes = [...this.state.data.nodes]\n\n    let lastIndex = newNodes.lastIndexOf()\n    newNodes[lastIndex] = newNode\n\n    this.setState({\n      ...this.state.data.nodes = newNodes\n    })\n\n    this.setState({\n      listInfo : listInfo\n    })\n\n    this.state.data.links.push({\n      source: newNode.id,\n      target: headNode.id,\n    });\n  }\n\n  onClickAddNode = (event) => {\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      let newid = this.getCount()\n\n      this.state.data.nodes.push({ id: newNode, nodeid: newid, next: null, color: \"\"});\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n\n    if (event === 'app') {\n      this.appendNode()\n    }\n    else if (event === 'pre') {\n      this.prependNode()\n    }\n\n    let index = this.state.data.listInfo\n    this.updateListColor(index)\n\n    //test\n    console.log('nodes', this.state.data.nodes)\n    console.log('listInfo', this.state.data.listInfo)\n\n    // Adds node to the neighbor array in the state's algoData\n    /*\n    let found = false;\n    for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n      if (this.state.addNodeName in this.state.algoData.neighbors[i]) {\n        found = true;\n      }\n    }\n    if (!found) {\n      var name = this.state.addNodeName;\n      var newNeighbor = {};\n      newNeighbor[name] = [];\n\n      this.state.algoData.neighbors.push(newNeighbor);\n      this.setState({ algoData: this.state.algoData });\n    }\n    console.log(this.state.algoData.neighbors);\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n    });\n    */\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    \n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.updateConnection()\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\",\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\",\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target,\n      });\n\n      var found = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][source].push(target);\n          found = true;\n        }\n      }\n\n      if (!found) {\n        var newNeighbor = {};\n        newNeighbor[source] = [target];\n        this.state.algoData.neighbors.push(newNeighbor);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            (l) => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      endNode: this.state.algoData.endNode,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addEndNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      endNode: event.target.value,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    if (this.state.algoData.algorithm === \"dfs\") {\n      this.depthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n    }\n  };\n\n  depthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        console.log(startNode, endNode);\n        if (startNode in this.state.algoData.neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in this.state.algoData.neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = {\n            startNode: this.state.algoData.stack,\n            endNode: this.state.algoData.endNode,\n            neighbors: this.state.algoData.neighbors,\n            algorithm: this.state.algoData.algorithm,\n            startAlgorithm: this.state.algoData.startAlgorithm,\n            stack: [],\n          };\n          this.setState({ algoData });\n        }\n        this.state.algoData.stack = [];\n        this.state.algoData.stack.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.stack !== undefined ||\n          this.state.algoData.stack.length !== 0\n        ) {\n          const curr = this.state.algoData.stack.pop();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n          console.log(curr);\n\n          for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n            if (\n              curr in this.state.algoData.neighbors[i] &&\n              this.state.algoData.neighbors[i][curr] !== null &&\n              this.state.algoData.neighbors[i][curr].length !== 0\n            ) {\n              for (\n                let j = 0;\n                j < this.state.algoData.neighbors[i][curr].length;\n                j++\n              ) {\n                const newNode = this.state.algoData.neighbors[i][curr][j];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.stack.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  breadthFirstSearch = () => {\n    if (\n      this.state.algoData.startNode !== \"\" &&\n      this.state.algoData.endNode !== \"\"\n    ) {\n      const startNode = this.state.algoData.startNode;\n      const endNode = this.state.algoData.endNode;\n      var startNodeIsValid = false;\n      var endNodeIsValid = false;\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (startNode in this.state.algoData.neighbors[i]) {\n          startNodeIsValid = true;\n        }\n        if (endNode in this.state.algoData.neighbors[i]) {\n          endNodeIsValid = true;\n        }\n      }\n\n      if (startNodeIsValid && endNodeIsValid) {\n        if (this.state.algoData.stack == null) {\n          const algoData = {\n            startNode: this.state.algoData.stack,\n            endNode: this.state.algoData.endNode,\n            neighbors: this.state.algoData.neighbors,\n            algorithm: this.state.algoData.algorithm,\n            startAlgorithm: this.state.algoData.startAlgorithm,\n            stack: [],\n          };\n          this.setState({ algoData });\n        }\n        this.state.algoData.queue = [];\n        this.state.algoData.queue.push(startNode);\n        const visited = {};\n        var counter = 0;\n        visited[startNode] = startNode;\n\n        while (\n          this.state.algoData.queue !== undefined ||\n          this.state.algoData.queue.length !== 0\n        ) {\n          const curr = this.state.algoData.queue.shift();\n          if (curr === endNode) {\n            for (let i = 0; i < 5; i++) {\n              setTimeout(() => this.foundTarget(endNode), 1200 * counter);\n              counter++;\n            }\n            console.log(\"FOUND TARGET\");\n            this.resetState(counter);\n            return;\n          }\n\n          setTimeout(\n            () => this.highlightHandler(curr, counter),\n            1000 * (counter + 1)\n          );\n          counter++;\n\n          for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n            if (\n              curr in this.state.algoData.neighbors[i] &&\n              this.state.algoData.neighbors[i][curr] !== null &&\n              this.state.algoData.neighbors[i][curr].length !== 0\n            ) {\n              for (\n                let j = 0;\n                j < this.state.algoData.neighbors[i][curr].length;\n                j++\n              ) {\n                const newNode = this.state.algoData.neighbors[i][curr][j];\n                if (newNode in visited) {\n                  console.log(\"VISITED\");\n                  continue;\n                }\n\n                this.state.algoData.queue.push(newNode);\n                visited[newNode] = newNode;\n              }\n            }\n          }\n        }\n\n        // Reset node color state after DFS is done\n        this.resetState();\n      } else {\n        console.log(\"FAILURE!!!\");\n      }\n    } else {\n      console.log(\"FAIL\");\n      console.log(\n        this.state.algoData.startNode,\n        this.state.algoData.endNode,\n        this.state.algoData.algorithm\n      );\n    }\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  }; \n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  //sets current algorithm tab\n  eventKeyHandler = (key) => {\n      let tabKey = this.state.key\n      tabKey = key\n     \n      this.setState({\n        key: tabKey\n      })\n  }\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n  \n    const neighborItems = this.state.algoData.stack.map((item) => {\n      return <li class=\"list-group-item\">{item}</li>;\n\n    });\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div class=\"tLog fixed-bottom\">\n          <ul class=\"list-group list-group-flush\">{neighborItems}</ul>\n        </div>\n\n        <h3>Linked List</h3>\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                />\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"weight\"\n                  label=\"Weighted\"\n                />\n              </div>\n\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"sNode\"\n                    type=\"text\"\n                    name=\"startNode\"\n                    placeholder=\"Enter starting node\"\n                    onChange={this._addStartNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <h5 class=\"font-weight-light h6\"> Target Node </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"tNode\"\n                    type=\"text\"\n                    name=\"tarhetNode\"\n                    placeholder=\"Enter ending node\"\n                    onChange={this._addEndNodeHandleChange}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                  />\n                </div>\n\n                <Dropdown className=\"dropdown pt-2\" drop=\"right\">\n                  <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-two\">\n                    Algorithm\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu id=\"algoSelection\">\n                    <Dropdown.Item\n                      eventKey=\"1\"\n                      onSelect={() => (this.state.algoData.algorithm = \"dfs\")}\n                      onSelect={(event) => this.eventKeyHandler(event)} //Tab selector\n                    >\n                      Depth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      evenyKey=\"2\"\n                      onSelect={() => (this.state.algoData.algorithm = \"bfs\")}\n                      onSelect={(event) => this.eventKeyHandler(2)} //Tab Selector\n                    >\n                      Breadth-First Search\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      eventKey=\"3\"\n                      onSelect={() => (this.state.algoData.algorithm = \"djk\")}\n                      onSelect={(event) => this.eventKeyHandler(event)}\n                    >\n                      Dijkstra's\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" //activate Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()} //Should call selected algorithm\n                >\n                  Start Algorithm\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Append node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={() => this.onClickAddNode('app')}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light pt-2\"> Prepend node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={ () => this.onClickAddNode('pre')}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                      <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickRemoveNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> - </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Add link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={this.state.addLinkPlaceholder}\n                value={this.state.addLink}\n                onChange={this._addLinkHandleChange}\n                onKeyPress={this._handleLinkKeyEnter}\n              />\n\n              <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n              <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"removeLink\"\n                placeholder={this.state.removeLinkPlaceholder}\n                value={this.state.removeLink}\n                onChange={this._removeLinkHandleChange}\n                onKeyPress={this._handleRemoveLinkKeyEnter}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Node List\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-list-ul\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M5 11.5a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm0-4a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5zm-3 1a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2zm0 4a1 1 0 100-2 1 1 0 000 2z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"json-data-container mt-3\">\n                <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n                  {this.state.data.nodes.map((node, i) => {\n                    const type = node.type;\n                    const name = node.id;\n                    for (i = 0; i < this.state.algoData.neighbors.length; i++) {\n                      if (name in this.state.algoData.neighbors[i]) {\n                        return (\n                          <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                            <TreeView\n                              key={type + \"|\" + i}\n                              nodeLabel=\"neighbors: \"\n                            >\n                              {this.state.algoData.neighbors[i][name].map(\n                                (neighbor, i) => {\n                                  return (\n                                    <div className=\"info\"> {neighbor}</div>\n                                  );\n                                }\n                              )}\n                            </TreeView>\n                          </TreeView>\n                        );\n                      }\n                    }\n                  })}\n                </TreeView>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}