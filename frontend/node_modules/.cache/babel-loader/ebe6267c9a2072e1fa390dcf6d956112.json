{"ast":null,"code":"import _defineProperty from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _RADIUS_STRATEGIES;/**\n * @module Link/helper\n * @description\n * A set of helper methods to manipulate/create links.\n */import{LINE_TYPES}from\"./link.const\";/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */function straightLineRadius(){return 0;}/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */function smoothCurveRadius(x1,y1,x2,y2){var dx=x2-x1;var dy=y2-y1;return Math.sqrt(dx*dx+dy*dy);}/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */function fullCurveRadius(){return 1;}var RADIUS_STRATEGIES=(_RADIUS_STRATEGIES={},_defineProperty(_RADIUS_STRATEGIES,LINE_TYPES.STRAIGHT,straightLineRadius),_defineProperty(_RADIUS_STRATEGIES,LINE_TYPES.CURVE_SMOOTH,smoothCurveRadius),_defineProperty(_RADIUS_STRATEGIES,LINE_TYPES.CURVE_FULL,fullCurveRadius),_RADIUS_STRATEGIES);/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */function getRadiusStrategy(type){return RADIUS_STRATEGIES[type]||RADIUS_STRATEGIES[LINE_TYPES.STRAIGHT];}/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */function buildLinkPathDefinition(_ref){var _ref$source=_ref.source,source=_ref$source===void 0?{}:_ref$source,_ref$target=_ref.target,target=_ref$target===void 0?{}:_ref$target;var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:LINE_TYPES.STRAIGHT;var sx=source.x,sy=source.y;var tx=target.x,ty=target.y;var validType=LINE_TYPES[type]||LINE_TYPES.STRAIGHT;var radius=getRadiusStrategy(validType)(sx,sy,tx,ty);return\"M\".concat(sx,\",\").concat(sy,\"A\").concat(radius,\",\").concat(radius,\" 0 0,1 \").concat(tx,\",\").concat(ty);}export{buildLinkPathDefinition};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/Tree/Graph/link/link.helper.js"],"names":["LINE_TYPES","straightLineRadius","smoothCurveRadius","x1","y1","x2","y2","dx","dy","Math","sqrt","fullCurveRadius","RADIUS_STRATEGIES","STRAIGHT","CURVE_SMOOTH","CURVE_FULL","getRadiusStrategy","type","buildLinkPathDefinition","source","target","sx","x","sy","y","tx","ty","validType","radius"],"mappings":"4KAAA;;;;GAKA,OAASA,UAAT,KAA2B,cAA3B,CAEA;;;;GAKA,QAASC,CAAAA,kBAAT,EAA8B,CAC1B,MAAO,EAAP,CACH,CAED;;;;;;;;GASA,QAASC,CAAAA,iBAAT,CAA2BC,EAA3B,CAA+BC,EAA/B,CAAmCC,EAAnC,CAAuCC,EAAvC,CAA2C,CACvC,GAAMC,CAAAA,EAAE,CAAGF,EAAE,CAAGF,EAAhB,CACA,GAAMK,CAAAA,EAAE,CAAGF,EAAE,CAAGF,EAAhB,CAEA,MAAOK,CAAAA,IAAI,CAACC,IAAL,CAAUH,EAAE,CAAGA,EAAL,CAAUC,EAAE,CAAGA,EAAzB,CAAP,CACH,CAED;;;;GAKA,QAASG,CAAAA,eAAT,EAA2B,CACvB,MAAO,EAAP,CACH,CAED,GAAMC,CAAAA,iBAAiB,2DAClBZ,UAAU,CAACa,QADO,CACIZ,kBADJ,qCAElBD,UAAU,CAACc,YAFO,CAEQZ,iBAFR,qCAGlBF,UAAU,CAACe,UAHO,CAGMJ,eAHN,qBAAvB,CAMA;;;;;;;GAQA,QAASK,CAAAA,iBAAT,CAA2BC,IAA3B,CAAiC,CAC7B,MAAOL,CAAAA,iBAAiB,CAACK,IAAD,CAAjB,EAA2BL,iBAAiB,CAACZ,UAAU,CAACa,QAAZ,CAAnD,CACH,CAED;;;;;;;;;;GAWA,QAASK,CAAAA,uBAAT,MAA2F,sBAAxDC,MAAwD,CAAxDA,MAAwD,sBAA/C,EAA+C,8BAA3CC,MAA2C,CAA3CA,MAA2C,sBAAlC,EAAkC,gBAA5BH,CAAAA,IAA4B,2DAArBjB,UAAU,CAACa,QAAU,IAC5EQ,CAAAA,EAD4E,CAC9DF,MAD8D,CAC/EG,CAD+E,CACrEC,EADqE,CAC9DJ,MAD8D,CACxEK,CADwE,IAE5EC,CAAAA,EAF4E,CAE9DL,MAF8D,CAE/EE,CAF+E,CAErEI,EAFqE,CAE9DN,MAF8D,CAExEI,CAFwE,CAGvF,GAAMG,CAAAA,SAAS,CAAG3B,UAAU,CAACiB,IAAD,CAAV,EAAoBjB,UAAU,CAACa,QAAjD,CACA,GAAMe,CAAAA,MAAM,CAAGZ,iBAAiB,CAACW,SAAD,CAAjB,CAA6BN,EAA7B,CAAiCE,EAAjC,CAAqCE,EAArC,CAAyCC,EAAzC,CAAf,CAEA,iBAAWL,EAAX,aAAiBE,EAAjB,aAAuBK,MAAvB,aAAiCA,MAAjC,mBAAiDH,EAAjD,aAAuDC,EAAvD,EACH,CAED,OAASR,uBAAT","sourcesContent":["/**\n * @module Link/helper\n * @description\n * A set of helper methods to manipulate/create links.\n */\nimport { LINE_TYPES } from \"./link.const\";\n\n/**\n * Computes radius value for a straight line.\n * @returns {number} radius for straight line.\n * @memberof Link/helper\n */\nfunction straightLineRadius() {\n    return 0;\n}\n\n/**\n * Computes radius for a smooth curve effect.\n * @param {number} x1 - x value for point 1\n * @param {number} y1 - y value for point 1\n * @param {number} x2 - y value for point 2\n * @param {number} y2 - y value for point 2\n * @returns{number} value of radius.\n * @memberof Link/helper\n */\nfunction smoothCurveRadius(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n\n    return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n * Computes radius value for a full curve (semi circumference).\n * @returns {number} radius for full curve.\n * @memberof Link/helper\n */\nfunction fullCurveRadius() {\n    return 1;\n}\n\nconst RADIUS_STRATEGIES = {\n    [LINE_TYPES.STRAIGHT]: straightLineRadius,\n    [LINE_TYPES.CURVE_SMOOTH]: smoothCurveRadius,\n    [LINE_TYPES.CURVE_FULL]: fullCurveRadius,\n};\n\n/**\n * Get a strategy to compute line radius.<br/>\n * *CURVE_SMOOTH* type inspired by {@link http://bl.ocks.org/mbostock/1153292|mbostock - Mobile Patent Suits}.\n * @param {string} [type=LINE_TYPES.STRAIGHT] type of curve to get radius strategy from.\n * @returns {Function} a function that calculates a radius\n * to match curve type expectation. Fallback is the straight line.\n * @memberof Link/helper\n */\nfunction getRadiusStrategy(type) {\n    return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[LINE_TYPES.STRAIGHT];\n}\n\n/**\n * This method returns the path definition for a given link base on the line type\n * and the link source and target.\n * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d|d attribute mdn}\n * @param {Object} link - the link to build the path definition\n * @param {Object} link.source - link source\n * @param {Object} link.target - link target\n * @param {string} type - the link line type\n * @returns {string} the path definition for the requested link\n * @memberof Link/helper\n */\nfunction buildLinkPathDefinition({ source = {}, target = {} }, type = LINE_TYPES.STRAIGHT) {\n    const { x: sx, y: sy } = source;\n    const { x: tx, y: ty } = target;\n    const validType = LINE_TYPES[type] || LINE_TYPES.STRAIGHT;\n    const radius = getRadiusStrategy(validType)(sx, sy, tx, ty);\n\n    return `M${sx},${sy}A${radius},${radius} 0 0,1 ${tx},${ty}`;\n}\n\nexport { buildLinkPathDefinition };\n"]},"metadata":{},"sourceType":"module"}