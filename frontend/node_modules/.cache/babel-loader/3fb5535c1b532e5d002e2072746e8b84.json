{"ast":null,"code":"/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */import{symbolCircle as d3SymbolCircle,symbolCross as d3SymbolCross,symbolDiamond as d3SymbolDiamond,symbolSquare as d3SymbolSquare,symbolStar as d3SymbolStar,symbolTriangle as d3SymbolTriangle,symbolWye as d3SymbolWye,symbol as d3Symbol}from\"d3-shape\";import CONST from\"./node.const\";/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */function _convertTypeToD3Symbol(typeName){switch(typeName){case CONST.SYMBOLS.CIRCLE:return d3SymbolCircle;case CONST.SYMBOLS.CROSS:return d3SymbolCross;case CONST.SYMBOLS.DIAMOND:return d3SymbolDiamond;case CONST.SYMBOLS.SQUARE:return d3SymbolSquare;case CONST.SYMBOLS.STAR:return d3SymbolStar;case CONST.SYMBOLS.TRIANGLE:return d3SymbolTriangle;case CONST.SYMBOLS.WYE:return d3SymbolWye;default:return d3SymbolCircle;}}var customSymbolRectangle={draw:function draw(context,size){var s=Math.sqrt(size)/2;context.moveTo(3*s,1.5*s);context.lineTo(3*s,1.5*-s);context.lineTo(3*-s,1.5*-s);context.lineTo(3*-s,1.5*s);context.closePath();}};/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */function buildSvgSymbol(){var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:CONST.DEFAULT_NODE_SIZE;var symbolTypeDesc=arguments.length>1&&arguments[1]!==undefined?arguments[1]:CONST.SYMBOLS.CIRCLE;return d3Symbol().size(function(){return size;}).type(customSymbolRectangle)();}export default{buildSvgSymbol:buildSvgSymbol};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/LinkedList/Graph/node/node.helper.js"],"names":["symbolCircle","d3SymbolCircle","symbolCross","d3SymbolCross","symbolDiamond","d3SymbolDiamond","symbolSquare","d3SymbolSquare","symbolStar","d3SymbolStar","symbolTriangle","d3SymbolTriangle","symbolWye","d3SymbolWye","symbol","d3Symbol","CONST","_convertTypeToD3Symbol","typeName","SYMBOLS","CIRCLE","CROSS","DIAMOND","SQUARE","STAR","TRIANGLE","WYE","customSymbolRectangle","draw","context","size","s","Math","sqrt","moveTo","lineTo","closePath","buildSvgSymbol","DEFAULT_NODE_SIZE","symbolTypeDesc","type"],"mappings":"AAAA;;;;GAKA,OACEA,YAAY,GAAIC,CAAAA,cADlB,CAEEC,WAAW,GAAIC,CAAAA,aAFjB,CAGEC,aAAa,GAAIC,CAAAA,eAHnB,CAIEC,YAAY,GAAIC,CAAAA,cAJlB,CAKEC,UAAU,GAAIC,CAAAA,YALhB,CAMEC,cAAc,GAAIC,CAAAA,gBANpB,CAOEC,SAAS,GAAIC,CAAAA,WAPf,CAQEC,MAAM,GAAIC,CAAAA,QARZ,KASO,UATP,CAWA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CAEA;;;;;;;GAQA,QAASC,CAAAA,sBAAT,CAAgCC,QAAhC,CAA0C,CACxC,OAAQA,QAAR,EACE,IAAKF,CAAAA,KAAK,CAACG,OAAN,CAAcC,MAAnB,CACE,MAAOnB,CAAAA,cAAP,CACF,IAAKe,CAAAA,KAAK,CAACG,OAAN,CAAcE,KAAnB,CACE,MAAOlB,CAAAA,aAAP,CACF,IAAKa,CAAAA,KAAK,CAACG,OAAN,CAAcG,OAAnB,CACE,MAAOjB,CAAAA,eAAP,CACF,IAAKW,CAAAA,KAAK,CAACG,OAAN,CAAcI,MAAnB,CACE,MAAOhB,CAAAA,cAAP,CACF,IAAKS,CAAAA,KAAK,CAACG,OAAN,CAAcK,IAAnB,CACE,MAAOf,CAAAA,YAAP,CACF,IAAKO,CAAAA,KAAK,CAACG,OAAN,CAAcM,QAAnB,CACE,MAAOd,CAAAA,gBAAP,CACF,IAAKK,CAAAA,KAAK,CAACG,OAAN,CAAcO,GAAnB,CACE,MAAOb,CAAAA,WAAP,CACF,QACE,MAAOZ,CAAAA,cAAP,CAhBJ,CAkBD,CAED,GAAI0B,CAAAA,qBAAqB,CAAG,CAC1BC,IAAI,CAAE,cAAUC,OAAV,CAAmBC,IAAnB,CAAyB,CAC7B,GAAIC,CAAAA,CAAC,CAAGC,IAAI,CAACC,IAAL,CAAUH,IAAV,EAAkB,CAA1B,CACAD,OAAO,CAACK,MAAR,CAAe,EAAIH,CAAnB,CAAsB,IAAMA,CAA5B,EACAF,OAAO,CAACM,MAAR,CAAe,EAAIJ,CAAnB,CAAsB,IAAM,CAACA,CAA7B,EACAF,OAAO,CAACM,MAAR,CAAe,EAAI,CAACJ,CAApB,CAAuB,IAAM,CAACA,CAA9B,EACAF,OAAO,CAACM,MAAR,CAAe,EAAI,CAACJ,CAApB,CAAuB,IAAMA,CAA7B,EACAF,OAAO,CAACO,SAAR,GACD,CARyB,CAA5B,CAUA;;;;;;;GAQA,QAASC,CAAAA,cAAT,EAGE,IAFAP,CAAAA,IAEA,2DAFOd,KAAK,CAACsB,iBAEb,IADAC,CAAAA,cACA,2DADiBvB,KAAK,CAACG,OAAN,CAAcC,MAC/B,CACA,MAAOL,CAAAA,QAAQ,GACZe,IADI,CACC,iBAAMA,CAAAA,IAAN,EADD,EAEJU,IAFI,CAECb,qBAFD,GAAP,CAGD,CAED,cAAe,CACbU,cAAc,CAAdA,cADa,CAAf","sourcesContent":["/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\nimport {\n  symbolCircle as d3SymbolCircle,\n  symbolCross as d3SymbolCross,\n  symbolDiamond as d3SymbolDiamond,\n  symbolSquare as d3SymbolSquare,\n  symbolStar as d3SymbolStar,\n  symbolTriangle as d3SymbolTriangle,\n  symbolWye as d3SymbolWye,\n  symbol as d3Symbol,\n} from \"d3-shape\";\n\nimport CONST from \"./node.const\";\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\nfunction _convertTypeToD3Symbol(typeName) {\n  switch (typeName) {\n    case CONST.SYMBOLS.CIRCLE:\n      return d3SymbolCircle;\n    case CONST.SYMBOLS.CROSS:\n      return d3SymbolCross;\n    case CONST.SYMBOLS.DIAMOND:\n      return d3SymbolDiamond;\n    case CONST.SYMBOLS.SQUARE:\n      return d3SymbolSquare;\n    case CONST.SYMBOLS.STAR:\n      return d3SymbolStar;\n    case CONST.SYMBOLS.TRIANGLE:\n      return d3SymbolTriangle;\n    case CONST.SYMBOLS.WYE:\n      return d3SymbolWye;\n    default:\n      return d3SymbolCircle;\n  }\n}\n\nvar customSymbolRectangle = {\n  draw: function (context, size) {\n    let s = Math.sqrt(size) / 2;\n    context.moveTo(3 * s, 1.5 * s);\n    context.lineTo(3 * s, 1.5 * -s);\n    context.lineTo(3 * -s, 1.5 * -s);\n    context.lineTo(3 * -s, 1.5 * s);\n    context.closePath();\n  },\n};\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\nfunction buildSvgSymbol(\n  size = CONST.DEFAULT_NODE_SIZE,\n  symbolTypeDesc = CONST.SYMBOLS.CIRCLE\n) {\n  return d3Symbol()\n    .size(() => size)\n    .type(customSymbolRectangle)();\n}\n\nexport default {\n  buildSvgSymbol,\n};\n"]},"metadata":{},"sourceType":"module"}