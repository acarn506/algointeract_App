{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx\";\nimport React from \"../../../../node_modules/react\";\nimport { Graph } from \"../../Node\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from \"../../LeftWindow/LeftWindow\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\"; // Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = (origColor, i) => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay \n        setTimeout(() => resolve(\"Successful Switch!\"), 1100);\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg);\n        this.setState({ ...(this.state.data.nodes[i] = origColor)\n        });\n      };\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === id;\n      });\n      const origColor = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newColor = { ...this.state.data.nodes[nodeIndex]\n      };\n      newColor.color = 'gold';\n      newColor.strokeColor = 'black';\n      const nodes = [...this.state.data.nodes];\n      nodes[nodeIndex] = newColor;\n      this.setState({ ...(this.state.data.nodes = nodes)\n      });\n      this.resetState(origColor, nodeIndex);\n    };\n\n    this.onClickAddNode = () => {\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.state.data.nodes.push({\n          id: newNode\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      }\n\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n    };\n\n    this.onClickRemoveNode = () => {\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        };\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = () => {\n      if (this.state.addLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (this.state.data.links[j].source === source && this.state.data.links[j].target === target) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\"\n            });\n            return;\n          }\n        }\n\n        this.state.data.links.push({\n          source: source,\n          target: target\n        });\n\n        if (source in this.state.neighbors) {\n          this.state.neighbors[source].push(target);\n        } else {\n          this.state.neighbors[source] = [];\n          this.state.neighbors[source].push(target);\n        }\n\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        console.log(source, target);\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        if (source in this.state.neighbors) {\n          this.state.neighbors[source] = this.state.neighbors[source].filter(l => l !== target);\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._handleLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAddLink();\n      }\n    };\n\n    this._handleRemoveLinkKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveLink();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nColorHandler = nColor => {\n      const config = this.state.config;\n      config.node.color = nColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.lColorHandler = lColor => {\n      const config = this.state.config;\n      config.link.color = lColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    const _data = {\n      nodes: [{\n        id: \"Harry\",\n        color: '',\n        strokeColor: ''\n      }, {\n        id: \"Sally\",\n        color: '',\n        strokeColor: ''\n      }, {\n        id: \"Alice\",\n        color: '',\n        strokeColor: ''\n      }],\n      links: [{\n        source: \"Harry\",\n        target: \"Sally\"\n      }, {\n        source: \"Harry\",\n        target: \"Alice\"\n      }]\n    };\n    const neighbors = {\n      Harry: [\"Sally\", \"Alice\"],\n      Sally: [],\n      Alice: []\n    }; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.92,\n      //0.811\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      neighbors: neighbors,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\"\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  //Node Highlight Rotation \n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-secondary\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"Graph Configurations\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light  pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L nSize\",\n        id: \"nSize\",\n        type: \"text\",\n        name: \"nodeSize\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nSizeHandler(document.getElementById(\"size\").value);\n        } //{ () => this.nSizeHandler(document.getElementById(\"nSize\").value)}\n        // onChange={e => setnSize(document.getElementById(\"nSize\").value)}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L nColor\",\n        id: \"nColor\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        value: \"s\" //onChange={e => setnColor(document.getElementById(\"nColor\").value)}\n        //onKeyPress={e => { if (e.key === \"Enter\") inputHandler() }}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L lColor\",\n        id: \"lColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        value: \"\" //onChange={e => setlColor(document.getElementById(\"lColor\").value)}\n        //onKeyPress={e => { if (e.key === \"Enter\") inputHandler() }}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-secondary\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, \"Algorithm Settings\"), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        className: \"dropdown\",\n        drop: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        variant: \"outline-info\",\n        id: \"dropdown-basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, \"Algorithm\"), React.createElement(Dropdown.Menu, {\n        id: \"algoSelection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \"Depth-First Search\"), React.createElement(Dropdown.Item, {\n        evenyKey: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, \"Breadth-First Search\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }, \"Dijkstra's\"))), React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"mr-3\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      }, \" Start Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"sNode\",\n        type: \"text\",\n        name: \"startNode\",\n        placeholder: \"Enter starting node\",\n        onChange: \"\" //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, \" Target Node \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"tNode\",\n        type: \"text\",\n        name: \"tarhetNode\",\n        placeholder: \"Enter ending node\",\n        onChange: \"\" //onKeyPress={this._handleLinkKeyEnter}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      })), React.createElement(Button, {\n        class: \"submit mt-2\",\n        type: \"submit\",\n        variant: \"outline-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \"Start\")))), React.createElement(Button, {\n        id: \"highTest\",\n        class: \"submit\",\n        type: \"submit\",\n        variant: \"outline-success\",\n        onClick: () => this.rotateHandler(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, \"HighLight Test\")), React.createElement(\"div\", {\n        class: \"rightWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534\n        },\n        __self: this\n      }, \" Add node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickAddNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580\n        },\n        __self: this\n      }, \" Add link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"addLink\",\n        placeholder: this.state.addLinkPlaceholder,\n        value: this.state.addLink,\n        onChange: this._addLinkHandleChange,\n        onKeyPress: this._handleLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, \" Remove link: \"), React.createElement(\"input\", {\n        class: \"linkInput\",\n        type: \"text\",\n        name: \"removeLink\",\n        placeholder: this.state.removeLinkPlaceholder,\n        value: this.state.removeLink,\n        onChange: this._removeLinkHandleChange,\n        onKeyPress: this._handleRemoveLinkKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }, \" Node list: \"), React.createElement(\"div\", {\n        className: \"json-data-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      }, React.createElement(TreeView, {\n        class: \"nodes\",\n        key: \"nodes\",\n        nodeLabel: \"Nodes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      }, this.state.data.nodes.map((node, i) => {\n        const type = node.type;\n        const name = node.id;\n\n        if (name in this.state.neighbors) {\n          return React.createElement(TreeView, {\n            key: type + \"|\" + i,\n            nodeLabel: name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 610\n            },\n            __self: this\n          }, React.createElement(TreeView, {\n            key: type + \"|\" + i,\n            nodeLabel: \"neighbors: \",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 611\n            },\n            __self: this\n          }, this.state.neighbors[name].map((neighbor, i) => {\n            return React.createElement(\"div\", {\n              className: \"info\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 613\n              },\n              __self: this\n            }, \" \", neighbor);\n          })));\n        }\n      })))), React.createElement(Graph, {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/Graph/GraphVisualizer.jsx"],"names":["React","Graph","TreeView","LeftWindow","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","rotateHandler","state","data","nodes","forEach","node","i","setTimeout","highlightHandler","id","resetState","origColor","myP","Promise","resolve","reject","sucessHandler","msg","console","log","setState","then","nodeIndex","findIndex","newColor","color","strokeColor","onClickAddNode","addNodeName","addNodePlaceholder","length","newNode","push","links","onClickRemoveNode","removeNodeName","removeNodePlaceholder","filter","l","source","target","onClickAddLink","addLink","split","e","trim","sourceExists","targetExists","addLinkPlaceholder","j","neighbors","onClickRemoveLink","removeLink","removeLinkPlaceholder","_addNodeHandleChange","event","value","_removeNodeHandleChange","_addLinkHandleChange","_removeLinkHandleChange","_handleAddKeyEnter","key","_handleRemoveKeyEnter","_handleLinkKeyEnter","_handleRemoveLinkKeyEnter","_onRightClickNode","nSizeHandler","size","config","nColorHandler","nColor","lColorHandler","lColor","link","Harry","Sally","Alice","nodeHighlightBehavior","automaticRearrangeAfterDropNode","height","window","innerHeight","width","innerWidth","highlightStrokeColor","highlightColor","generatedConfig","nodeIdToBeRemoved","render","document","getElementById","map","type","name","neighbor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,gCAAlB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,yCAArB;AACA,OAAO,uBAAP;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAsC,iBAAtC,C,CAGA;;AACA,eAAe,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SA+DnBC,aA/DmB,GA+DH,MAAM;AACpB;AACA,WAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA+B,CAACC,IAAD,EAAOC,CAAP,KAAc;AAC3CC,QAAAA,UAAU,CAAE,MAAM,KAAKC,gBAAL,CAAsBH,IAAI,CAACI,EAA3B,EAA+BH,CAA/B,CAAR,EAA2C,QAAQA,CAAC,GAAG,CAAZ,CAA3C,CAAV;AACD,OAFD;AAGD,KApEkB;;AAAA,SAuEnBI,UAvEmB,GAuEN,CAACC,SAAD,EAAYL,CAAZ,KAAkB;AAE7B,YAAMM,GAAG,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAAyB;AAAE;AACjDR,QAAAA,UAAU,CAAC,MAAIO,OAAO,CAAC,oBAAD,CAAZ,EAAoC,IAApC,CAAV;AACD,OAFW,CAAZ;;AAIA,WAAKE,aAAL,GAAqBC,GAAG,IAAI;AAAE;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,aAAKG,QAAL,CAAc,EACZ,IAAG,KAAKnB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBG,CAAtB,IAA2BK,SAA9B;AADY,SAAd;AAEH,OALD;;AAOAC,MAAAA,GAAG,CAACS,IAAJ,CAAS,KAAKL,aAAd;AACD,KArFkB;;AAAA,SAwFnBR,gBAxFmB,GAwFCC,EAAD,IAAQ;AAEzB,YAAMa,SAAS,GAAG,KAAKrB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBoB,SAAtB,CAAiClB,IAAI,IAAI;AACzD,eAAOA,IAAI,CAACI,EAAL,KAAYA,EAAnB;AACD,OAFiB,CAAlB;AAIA,YAAME,SAAS,GAAG,EAChB,GAAG,KAAKV,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBmB,SAAtB;AADa,OAAlB;AAIA,YAAME,QAAQ,GAAG,EACf,GAAG,KAAKvB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBmB,SAAtB;AADY,OAAjB;AAIAE,MAAAA,QAAQ,CAACC,KAAT,GAAiB,MAAjB;AACAD,MAAAA,QAAQ,CAACE,WAAT,GAAuB,OAAvB;AAEA,YAAMvB,KAAK,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAApB,CAAd;AACAA,MAAAA,KAAK,CAACmB,SAAD,CAAL,GAAmBE,QAAnB;AAEA,WAAKJ,QAAL,CAAc,EACV,IAAG,KAAKnB,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,GAAwBA,KAA3B;AADU,OAAd;AAIA,WAAKO,UAAL,CAAgBC,SAAhB,EAA2BW,SAA3B;AACD,KAjHkB;;AAAA,SAoHnBK,cApHmB,GAoHF,MAAM;AACrB,UAAI,KAAK1B,KAAL,CAAW2B,WAAX,KAA2B,EAA/B,EAAmC;AACjC,aAAKR,QAAL,CAAc;AACZS,UAAAA,kBAAkB,EAAE;AADR,SAAd;AAGA;AACD;;AACD,UAAI,KAAK5B,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAAnD,EAA2D;AACzD,cAAMC,OAAO,GAAI,GAAE,KAAK9B,KAAL,CAAW2B,WAAY,EAA1C;AAEA,aAAK3B,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB6B,IAAtB,CAA2B;AAAEvB,UAAAA,EAAE,EAAEsB;AAAN,SAA3B;AAEA,aAAKX,QAAL,CAAc;AACZlB,UAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AADL,SAAd;AAGD,OARD,MAQO;AACL;AACA,cAAMA,IAAI,GAAG;AACXC,UAAAA,KAAK,EAAE,CAAC;AAAEM,YAAAA,EAAE,EAAE;AAAN,WAAD,CADI;AAEXwB,UAAAA,KAAK,EAAE;AAFI,SAAb;AAKA,aAAKb,QAAL,CAAc;AAAElB,UAAAA;AAAF,SAAd;AACD;;AAED,WAAKkB,QAAL,CAAc;AACZQ,QAAAA,WAAW,EAAE,EADD;AAEZC,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAID,KAjJkB;;AAAA,SAwJnBK,iBAxJmB,GAwJC,MAAM;AACxB,UAAI,KAAKjC,KAAL,CAAWkC,cAAX,KAA8B,EAAlC,EAAsC;AACpC,aAAKf,QAAL,CAAc;AACZgB,UAAAA,qBAAqB,EAAE;AADX,SAAd;AAGA;AACD;;AACD,UAAI,KAAKnC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAAtB,IAAgC,CAA7D,EAAgE;AAC9D,cAAM3B,KAAK,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBkC,MAAtB,CACZC,CAAC,IAAIA,CAAC,CAAC7B,EAAF,KAAS,KAAKR,KAAL,CAAWkC,cADb,CAAd;AAGA,cAAMF,KAAK,GAAG,KAAKhC,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBI,MAAtB,CACZC,CAAC,IACCA,CAAC,CAACC,MAAF,KAAa,KAAKtC,KAAL,CAAWkC,cAAxB,IACAG,CAAC,CAACE,MAAF,KAAa,KAAKvC,KAAL,CAAWkC,cAHd,CAAd;AAKA,cAAMjC,IAAI,GAAG;AAAEC,UAAAA,KAAF;AAAS8B,UAAAA;AAAT,SAAb;AAEA,aAAKb,QAAL,CAAc;AACZlB,UAAAA,IADY;AAEZiC,UAAAA,cAAc,EAAE,EAFJ;AAGZC,UAAAA,qBAAqB,EAAE;AAHX,SAAd;AAKD;AACF,KAhLkB;;AAAA,SAkLnBK,cAlLmB,GAkLF,MAAM;AACrB,UAAI,KAAKxC,KAAL,CAAWyC,OAAX,KAAuB,EAA3B,EAA+B;AAC7B;AACD;;AACD,UAAI,KAAKzC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAAnD,EAA2D;AACzD,YAAIS,MAAJ,EAAYC,MAAZ;AACA,SAACD,MAAD,EAASC,MAAT,IAAmB,KAAKvC,KAAL,CAAWyC,OAAX,CAAmBC,KAAnB,CAAyB,OAAzB,EAAkCN,MAAlC,CAAyC,UAASO,CAAT,EAAY;AACtE,iBAAOA,CAAC,CAACC,IAAF,GAASf,MAAT,GAAkB,CAAzB;AACD,SAFkB,CAAnB;AAIA,YAAIgB,YAAJ,EAAkBC,YAAlB;AACAD,QAAAA,YAAY,GAAGC,YAAY,GAAG,KAA9B;;AAEA,aAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAA1C,EAAkDxB,CAAC,EAAnD,EAAuD;AACrD,cAAI,KAAKL,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBG,CAAtB,EAAyBG,EAAzB,KAAgC8B,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;;AACD,cAAI,KAAK7C,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBG,CAAtB,EAAyBG,EAAzB,KAAgC+B,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAI,CAACD,YAAD,IAAiB,CAACC,YAAtB,EAAoC;AAClC7B,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAKC,QAAL,CAAc;AACZsB,YAAAA,OAAO,EAAE,EADG;AAEZM,YAAAA,kBAAkB,EAAE;AAFR,WAAd;AAIA;AACD;;AAED,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhD,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBH,MAA1C,EAAkDmB,CAAC,EAAnD,EAAuD;AACrD,cACE,KAAKhD,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBgB,CAAtB,EAAyBV,MAAzB,KAAoCA,MAApC,IACA,KAAKtC,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBgB,CAAtB,EAAyBT,MAAzB,KAAoCA,MAFtC,EAGE;AACAtB,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,iBAAKC,QAAL,CAAc;AACZsB,cAAAA,OAAO,EAAE,EADG;AAEZM,cAAAA,kBAAkB,EAAE;AAFR,aAAd;AAIA;AACD;AACF;;AAED,aAAK/C,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBD,IAAtB,CAA2B;AACzBO,UAAAA,MAAM,EAAEA,MADiB;AAEzBC,UAAAA,MAAM,EAAEA;AAFiB,SAA3B;;AAKA,YAAID,MAAM,IAAI,KAAKtC,KAAL,CAAWiD,SAAzB,EAAoC;AAClC,eAAKjD,KAAL,CAAWiD,SAAX,CAAqBX,MAArB,EAA6BP,IAA7B,CAAkCQ,MAAlC;AACD,SAFD,MAEO;AACL,eAAKvC,KAAL,CAAWiD,SAAX,CAAqBX,MAArB,IAA+B,EAA/B;AACA,eAAKtC,KAAL,CAAWiD,SAAX,CAAqBX,MAArB,EAA6BP,IAA7B,CAAkCQ,MAAlC;AACD;;AAED,aAAKpB,QAAL,CAAc;AACZsB,UAAAA,OAAO,EAAE,EADG;AAEZM,UAAAA,kBAAkB,EAAE;AAFR,SAAd;AAID;AACF,KAhPkB;;AAAA,SAkPnBG,iBAlPmB,GAkPC,MAAM;AACxB,UAAI,KAAKlD,KAAL,CAAWmD,UAAX,KAA0B,EAA9B,EAAkC;AAChC;AACD;;AACD,UAAI,KAAKnD,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,IAAyB,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAAnD,EAA2D;AACzD,YAAIS,MAAJ,EAAYC,MAAZ;AACA,SAACD,MAAD,EAASC,MAAT,IAAmB,KAAKvC,KAAL,CAAWmD,UAAX,CAChBT,KADgB,CACV,OADU,EAEhBN,MAFgB,CAET,UAASO,CAAT,EAAY;AAClB,iBAAOA,CAAC,CAACC,IAAF,GAASf,MAAT,GAAkB,CAAzB;AACD,SAJgB,CAAnB;AAMA,YAAIgB,YAAJ,EAAkBC,YAAlB;AACAD,QAAAA,YAAY,GAAGC,YAAY,GAAG,KAA9B;;AAEA,aAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsB2B,MAA1C,EAAkDxB,CAAC,EAAnD,EAAuD;AACrD,cAAI,KAAKL,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBG,CAAtB,EAAyBG,EAAzB,KAAgC8B,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;;AACD,cAAI,KAAK7C,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBG,CAAtB,EAAyBG,EAAzB,KAAgC+B,MAApC,EAA4C;AAC1CO,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,YAAI,CAACD,YAAD,IAAiB,CAACC,YAAtB,EAAoC;AAClC7B,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,eAAKC,QAAL,CAAc;AACZgC,YAAAA,UAAU,EAAE,EADA;AAEZC,YAAAA,qBAAqB,EAAE;AAFX,WAAd;AAIA;AACD;;AAEDnC,QAAAA,OAAO,CAACC,GAAR,CAAYoB,MAAZ,EAAoBC,MAApB;AAEA,cAAMP,KAAK,GAAG,KAAKhC,KAAL,CAAWC,IAAX,CAAgB+B,KAAhB,CAAsBI,MAAtB,CACZC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaA,MAAb,IAAuBD,CAAC,CAACE,MAAF,KAAaA,MAD7B,CAAd;AAIA,cAAMtC,IAAI,GAAG;AAAEC,UAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,IAAX,CAAgBC,KAAzB;AAAgC8B,UAAAA;AAAhC,SAAb;;AAEA,YAAIM,MAAM,IAAI,KAAKtC,KAAL,CAAWiD,SAAzB,EAAoC;AAClC,eAAKjD,KAAL,CAAWiD,SAAX,CAAqBX,MAArB,IAA+B,KAAKtC,KAAL,CAAWiD,SAAX,CAAqBX,MAArB,EAA6BF,MAA7B,CAC7BC,CAAC,IAAIA,CAAC,KAAKE,MADkB,CAA/B;AAGD;;AAED,aAAKpB,QAAL,CAAc;AACZlB,UAAAA,IAAI,EAAEA,IADM;AAEZkD,UAAAA,UAAU,EAAE,EAFA;AAGZC,UAAAA,qBAAqB,EAAE;AAHX,SAAd;AAKD;AACF,KAvSkB;;AAAA,SA2SnBC,oBA3SmB,GA2SIC,KAAK,IAAI;AAC9B,WAAKnC,QAAL,CAAc;AAAEQ,QAAAA,WAAW,EAAE2B,KAAK,CAACf,MAAN,CAAagB;AAA5B,OAAd;AACD,KA7SkB;;AAAA,SAiTnBC,uBAjTmB,GAiTOF,KAAK,IAAI;AACjC,WAAKnC,QAAL,CAAc;AAAEe,QAAAA,cAAc,EAAEoB,KAAK,CAACf,MAAN,CAAagB;AAA/B,OAAd;AACD,KAnTkB;;AAAA,SAqTnBE,oBArTmB,GAqTIH,KAAK,IAAI;AAC9B,WAAKnC,QAAL,CAAc;AAAEsB,QAAAA,OAAO,EAAEa,KAAK,CAACf,MAAN,CAAagB;AAAxB,OAAd;AACD,KAvTkB;;AAAA,SAyTnBG,uBAzTmB,GAyTOJ,KAAK,IAAI;AACjC,WAAKnC,QAAL,CAAc;AAAEgC,QAAAA,UAAU,EAAEG,KAAK,CAACf,MAAN,CAAagB;AAA3B,OAAd;AACD,KA3TkB;;AAAA,SA+TnBI,kBA/TmB,GA+TEhB,CAAC,IAAI;AACxB,UAAIA,CAAC,CAACiB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKlC,cAAL;AACD;AACF,KAnUkB;;AAAA,SAuUnBmC,qBAvUmB,GAuUKlB,CAAC,IAAI;AAC3B,UAAIA,CAAC,CAACiB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAK3B,iBAAL;AACD;AACF,KA3UkB;;AAAA,SA6UnB6B,mBA7UmB,GA6UGnB,CAAC,IAAI;AACzB,UAAIA,CAAC,CAACiB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKpB,cAAL;AACD;AACF,KAjVkB;;AAAA,SAmVnBuB,yBAnVmB,GAmVSpB,CAAC,IAAI;AAC/B,UAAIA,CAAC,CAACiB,GAAF,KAAU,OAAd,EAAuB;AACrB,aAAKV,iBAAL;AACD;AACF,KAvVkB;;AAAA,SAyVnBc,iBAzVmB,GAyVC,MAAM;AACxB/C,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KA3VkB;;AAAA,SA8VjB+C,YA9ViB,GA8VDC,IAAD,IAAU;AACvB,YAAMC,MAAM,GAAG,KAAKnE,KAAL,CAAWmE,MAA1B;AAEAA,MAAAA,MAAM,CAAC/D,IAAP,CAAY8D,IAAZ,GAAmBA,IAAnB;AAEA,WAAK/C,QAAL,CAAc;AACZgD,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KAtWgB;;AAAA,SAwWjBC,aAxWiB,GAwWAC,MAAD,IAAY;AAC1B,YAAMF,MAAM,GAAG,KAAKnE,KAAL,CAAWmE,MAA1B;AAEAA,MAAAA,MAAM,CAAC/D,IAAP,CAAYoB,KAAZ,GAAoB6C,MAApB;AAEA,WAAKlD,QAAL,CAAc;AACZgD,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KAhXgB;;AAAA,SAkXjBG,aAlXiB,GAkXAC,MAAD,IAAY;AAC1B,YAAMJ,MAAM,GAAG,KAAKnE,KAAL,CAAWmE,MAA1B;AAEAA,MAAAA,MAAM,CAACK,IAAP,CAAYhD,KAAZ,GAAoB+C,MAApB;AAEA,WAAKpD,QAAL,CAAc;AACZgD,QAAAA,MAAM,EAAGA;AADG,OAAd;AAGD,KA1XgB;;AAIjB,UAAMlE,KAAI,GAAG;AACXC,MAAAA,KAAK,EAAE,CACL;AAAEM,QAAAA,EAAE,EAAE,OAAN;AAAegB,QAAAA,KAAK,EAAE,EAAtB;AAA0BC,QAAAA,WAAW,EAAE;AAAvC,OADK,EAEL;AAAEjB,QAAAA,EAAE,EAAE,OAAN;AAAegB,QAAAA,KAAK,EAAE,EAAtB;AAA0BC,QAAAA,WAAW,EAAE;AAAvC,OAFK,EAGL;AAAEjB,QAAAA,EAAE,EAAE,OAAN;AAAegB,QAAAA,KAAK,EAAE,EAAtB;AAA0BC,QAAAA,WAAW,EAAE;AAAvC,OAHK,CADI;AAKXO,MAAAA,KAAK,EAAE,CACL;AAAEM,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OADK,EAEL;AAAED,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAFK;AALI,KAAb;AAWA,UAAMU,SAAS,GAAG;AAChBwB,MAAAA,KAAK,EAAE,CAAC,OAAD,EAAU,OAAV,CADS;AAEhBC,MAAAA,KAAK,EAAE,EAFS;AAGhBC,MAAAA,KAAK,EAAE;AAHS,KAAlB,CAfiB,CAqBjB;;AACA,UAAMR,OAAM,GAAG;AACbS,MAAAA,qBAAqB,EAAE,IADV;AAEbC,MAAAA,+BAA+B,EAAE,IAFpB;AAGbC,MAAAA,MAAM,EAAEC,MAAM,CAACC,WAAP,GAAqB,IAHhB;AAGsB;AACnCC,MAAAA,KAAK,EAAEF,MAAM,CAACG,UAJD;AAKb9E,MAAAA,IAAI,EAAE;AACJoB,QAAAA,KAAK,EAAE,SADH;AAEJ0C,QAAAA,IAAI,EAAE,GAFF;AAGJiB,QAAAA,oBAAoB,EAAE;AAHlB,OALO;AAUbX,MAAAA,IAAI,EAAE;AACJY,QAAAA,cAAc,EAAE;AADZ;AAVO,KAAf,CAtBiB,CAqCjB;;AACA,SAAKpF,KAAL,GAAa;AACXmE,MAAAA,MAAM,EAANA,OADW;AAEXkB,MAAAA,eAAe,EAAE,EAFN;AAGXpF,MAAAA,IAAI,EAAJA,KAHW;AAIXgD,MAAAA,SAAS,EAAEA,SAJA;AAKXqC,MAAAA,iBAAiB,EAAE,IALR;AAMX3D,MAAAA,WAAW,EAAE,EANF;AAOXO,MAAAA,cAAc,EAAE,EAPL;AAQXO,MAAAA,OAAO,EAAE,EARE;AASXb,MAAAA,kBAAkB,EAAE,mBATT;AAUXO,MAAAA,qBAAqB,EAAE,sBAVZ;AAWXY,MAAAA,kBAAkB,EAAE,0BAXT;AAYXK,MAAAA,qBAAqB,EAAE;AAZZ,KAAb;AAcD,GA9D0D,CAiE3D;AACA;AACA;AACA;AACA;AAGA;;;AA8TA;AACA;AACAmC,EAAAA,MAAM,GAAG;AACP,WACE;AAEA;AAAK,QAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,aAAb;AAA2B,QAAA,SAAS,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,mBAAzB;AAA6C,QAAA,EAAE,EAAC,gBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAKA,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAI,QAAA,KAAK,EAAC,4BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFA,EAGA;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,KAAK,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,WAAW,EAAC,iBALd;AAME,QAAA,UAAU,EAAE5C,CAAC,IAAI;AAAE,cAAIA,CAAC,CAACiB,GAAF,KAAU,OAAd,EAAuB,KAAKK,YAAL,CAAkBuB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgClC,KAAlD;AAA0D,SANtG,CAOE;AACD;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAHA,EAgBA;AAAI,QAAA,KAAK,EAAC,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAhBA,EAiBA;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,KAAK,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,EAAE,EAAC,QAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,WAAW,EAAC,kBALd;AAME,QAAA,KAAK,EAAC,GANR,CAOE;AACA;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAjBA,EA8BA;AAAI,QAAA,KAAK,EAAC,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA9BA,EA+BA;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,KAAK,EAAC,kBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,EAAE,EAAC,QAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,WAAW,EAAC,kBALd;AAME,QAAA,KAAK,EAAC,EANR,CAOE;AACA;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA/BA,CALA,CAFA,EAuDE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,MAAb;AAAmB,QAAA,SAAS,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,mBAAzB;AAA6C,QAAA,EAAE,EAAC,gBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAKA,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAM,QAAA,QAAQ,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,UAApB;AAA+B,QAAA,IAAI,EAAC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,MAAV;AAAiB,QAAA,OAAO,EAAC,cAAzB;AAAwC,QAAA,EAAE,EAAC,gBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAKE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,EAAE,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAA4B,QAAA,MAAM,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAJF,EAOE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,QAAQ,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CALF,CAFF,EAoBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,MAAtB;AAA4B,QAAA,IAAI,EAAC,UAAjC;AAA4C,QAAA,EAAE,EAAC,QAA/C;AAAwD,QAAA,KAAK,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,IAAI,EAAC,UAAjB;AAA4B,QAAA,EAAE,EAAC,QAA/B;AAAwC,QAAA,KAAK,EAAC,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CApBF,EAyBE;AAAI,QAAA,KAAK,EAAC,2BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzBF,EA0BE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,WAJP;AAKE,QAAA,WAAW,EAAC,qBALd;AAME,QAAA,QAAQ,EAAC,EANX,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA1BF,EAsCE;AAAI,QAAA,KAAK,EAAC,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAtCF,EAuCE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,KAAK,EAAC,GADR;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,IAAI,EAAC,YAJP;AAKE,QAAA,WAAW,EAAC,mBALd;AAME,QAAA,QAAQ,EAAC,EANX,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAvCF,EAmDE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,aAAd;AAA4B,QAAA,IAAI,EAAC,QAAjC;AAA0C,QAAA,OAAO,EAAC,iBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnDF,CADA,CALA,CAvDF,EAuHC,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,UAAX;AAAsB,QAAA,KAAK,EAAC,QAA5B;AAAqC,QAAA,IAAI,EAAC,QAA1C;AAAmD,QAAA,OAAO,EAAC,iBAA3D;AACC,QAAA,OAAO,EAAE,MAAM,KAAKxD,aAAL,EADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAvHD,CADF,EA+HE;AAAK,QAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAK2B,cADhB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,wBAHR;AAIE,QAAA,EAAE,EAAC,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAI,QAAA,KAAK,EAAC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,CADF,CADF,EAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,aAHP;AAIE,QAAA,WAAW,EAAE,KAAK1B,KAAL,CAAW4B,kBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAW2B,WALpB;AAME,QAAA,QAAQ,EAAE,KAAK0B,oBANjB;AAOE,QAAA,UAAU,EAAE,KAAKM,kBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAFF,EAwBE;AAAI,QAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAxBF,EAyBE;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,KAAK1B,iBADhB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,oCAHR;AAIE,QAAA,EAAE,EAAC,eAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAI,QAAA,KAAK,EAAC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,CADF,CADF,EAWE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,IAAI,EAAC,gBAHP;AAIE,QAAA,WAAW,EAAE,KAAKjC,KAAL,CAAWmC,qBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWkC,cALpB;AAME,QAAA,QAAQ,EAAE,KAAKsB,uBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,qBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,CAzBF,EA+CE;AAAI,QAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA/CF,EAgDE;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,WAAW,EAAE,KAAK7D,KAAL,CAAW+C,kBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAK/C,KAAL,CAAWyC,OALpB;AAME,QAAA,QAAQ,EAAE,KAAKgB,oBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,mBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhDF,EA0DE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA1DF,EA2DE;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,YAHP;AAIE,QAAA,WAAW,EAAE,KAAK9D,KAAL,CAAWoD,qBAJ1B;AAKE,QAAA,KAAK,EAAE,KAAKpD,KAAL,CAAWmD,UALpB;AAME,QAAA,QAAQ,EAAE,KAAKO,uBANjB;AAOE,QAAA,UAAU,EAAE,KAAKK,yBAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3DF,EAqEE;AAAI,QAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBArEF,EAsEE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAwB,QAAA,GAAG,EAAC,OAA5B;AAAoC,QAAA,SAAS,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAK/D,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBwF,GAAtB,CAA0B,CAACtF,IAAD,EAAOC,CAAP,KAAa;AACtC,cAAMsF,IAAI,GAAGvF,IAAI,CAACuF,IAAlB;AACA,cAAMC,IAAI,GAAGxF,IAAI,CAACI,EAAlB;;AACA,YAAIoF,IAAI,IAAI,KAAK5F,KAAL,CAAWiD,SAAvB,EAAkC;AAChC,iBACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAE0C,IAAI,GAAG,GAAP,GAAatF,CAA5B;AAA+B,YAAA,SAAS,EAAEuF,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,QAAD;AAAU,YAAA,GAAG,EAAED,IAAI,GAAG,GAAP,GAAatF,CAA5B;AAA+B,YAAA,SAAS,EAAC,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,KAAKL,KAAL,CAAWiD,SAAX,CAAqB2C,IAArB,EAA2BF,GAA3B,CAA+B,CAACG,QAAD,EAAWxF,CAAX,KAAiB;AAC/C,mBAAO;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwBwF,QAAxB,CAAP;AACD,WAFA,CADH,CADF,CADF;AASD;AACF,OAdA,CADH,CADF,CAtEF,CA/HF,EA0NE,oBAAC,KAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,IAAI,EAAE,KAAK7F,KAAL,CAAWC,IAFnB;AAGE,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWmE,MAHrB;AAIE,QAAA,gBAAgB,EAAE,KAAKH,iBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1NF;AAHF;AAqOD;;AA9mB0D","sourcesContent":["import React from \"../../../../node_modules/react\";\nimport { Graph } from \"../../Node\";\nimport TreeView from \"../../../../node_modules/react-treeview\";\nimport \"./GraphVisualizer.css\";\nimport LeftWindow from \"../../LeftWindow/LeftWindow\";\nimport { Dropdown, Form, Button} from \"react-bootstrap\";\n\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n\n    // Default data used by the Graph component\n    const data = {\n      nodes: [\n        { id: \"Harry\", color: '', strokeColor: '' }, \n        { id: \"Sally\", color: '', strokeColor: '' }, \n        { id: \"Alice\", color: '', strokeColor: ''}],\n      links: [\n        { source: \"Harry\", target: \"Sally\" },\n        { source: \"Harry\", target: \"Alice\" }\n      ]\n    };\n\n    const neighbors = {\n      Harry: [\"Sally\", \"Alice\"],\n      Sally: [],\n      Alice: []\n    };\n\n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      height: window.innerHeight * 0.92, //0.811\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\"\n      },\n      link: {\n        highlightColor: \"lightblue\"\n      }\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      neighbors: neighbors,\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n    };\n  }\n\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n\n  //Node Highlight Rotation \n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach( (node, i) =>  {\n      setTimeout( () => this.highlightHandler(node.id, i), 1500 * (i + 1))\n    })\n  }\n\n  //reset node color back to original \n  resetState = (origColor, i) => {\n\n    const myP = new Promise(function(resolve, reject){ // promise for time delay \n      setTimeout(()=>resolve(\"Successful Switch!\"), 1100);\n    });\n    \n    this.sucessHandler = msg => { // If things go well\n        console.log(msg);\n        \n        this.setState({\n          ...this.state.data.nodes[i] = origColor })\n    }\n    \n    myP.then(this.sucessHandler);\n  }\n\n  //Highlight Node\n  highlightHandler = (id) => {\n    \n    const nodeIndex = this.state.data.nodes.findIndex( node => {\n      return node.id === id\n    })\n\n    const origColor = {\n      ...this.state.data.nodes[nodeIndex]\n    }\n    \n    const newColor = {\n      ...this.state.data.nodes[nodeIndex]\n    }\n\n    newColor.color = 'gold'\n    newColor.strokeColor = 'black'\n\n    const nodes = [...this.state.data.nodes]\n    nodes[nodeIndex] = newColor\n\n    this.setState({\n        ...this.state.data.nodes = nodes\n    })\n\n    this.resetState(origColor, nodeIndex)\n  }\n  \n\n  onClickAddNode = () => {\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n\n      this.state.data.nodes.push({ id: newNode });\n\n      this.setState({\n        data: this.state.data\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: []\n      };\n\n      this.setState({ data });\n    }\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\"\n    });\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\"\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        l => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        l =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\"\n      });\n    }\n  };\n\n  onClickAddLink = () => {\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function(e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n      }\n\n      this.state.data.links.push({\n        source: source,\n        target: target\n      });\n\n      if (source in this.state.neighbors) {\n        this.state.neighbors[source].push(target);\n      } else {\n        this.state.neighbors[source] = [];\n        this.state.neighbors[source].push(target);\n      }\n\n      this.setState({\n        addLink: \"\",\n        addLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function(e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n        return;\n      }\n\n      console.log(source, target);\n\n      const links = this.state.data.links.filter(\n        l => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      if (source in this.state.neighbors) {\n        this.state.neighbors[source] = this.state.neighbors[source].filter(\n          l => l !== target\n        );\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\"\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = event => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = event => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = event => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = event => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAddNode function.\n  _handleAddKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _handleLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickAddLink();\n    }\n  };\n\n  _handleRemoveLinkKeyEnter = e => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveLink();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n    //Functions for state handling \n    nSizeHandler = (size) => {\n      const config = this.state.config\n  \n      config.node.size = size\n  \n      this.setState({\n        config : config\n      })\n    }\n  \n    nColorHandler = (nColor) => {\n      const config = this.state.config\n  \n      config.node.color = nColor\n  \n      this.setState({\n        config : config\n      })\n    }\n  \n    lColorHandler = (lColor) => {\n      const config = this.state.config\n  \n      config.link.color = lColor\n  \n      this.setState({\n        config : config\n      })\n    }\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, and the main graph visualizer component.\n  render() {\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      \n      <div class=\"box\">\n        <div class=\"leftWindow\">\n\n        <Dropdown id='graphConfig' className='LeftWindow pt-3'>\n            <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\n              Graph Configurations\n            </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n\n        <h5 class=\"font-weight-light  pt-3 h6\"> Node Size </h5>\n        <div id='node' class=\"input-group mb-3\">\n          <input\n            class=\"L nSize\"\n            id=\"nSize\"\n            type=\"text\"\n            name=\"nodeSize\"\n            placeholder=\"Enter node size\"\n            onKeyPress={e => { if (e.key === \"Enter\") this.nSizeHandler(document.getElementById(\"size\").value) }}\n            //{ () => this.nSizeHandler(document.getElementById(\"nSize\").value)}\n           // onChange={e => setnSize(document.getElementById(\"nSize\").value)}\n          />\n        </div>\n\n        <h5 class=\"font-weight-light h6\"> Node Color </h5>\n        <div id='node' class=\"input-group mb-3\">\n          <input\n            class=\"L nColor\"\n            id=\"nColor\"\n            type=\"text\"\n            name=\"nodeColor\"\n            placeholder=\"Enter node color\"\n            value='s'\n            //onChange={e => setnColor(document.getElementById(\"nColor\").value)}\n            //onKeyPress={e => { if (e.key === \"Enter\") inputHandler() }}\n          />\n        </div>\n\n        <h5 class=\"font-weight-light h6\"> Link Color </h5>\n        <div id='node' class=\"input-group mb-3\">\n          <input\n            class=\"L lColor\"\n            id=\"lColor\"\n            type=\"text\"\n            name=\"linkColor\"\n            placeholder=\"Enter link color\"\n            value=''\n            //onChange={e => setlColor(document.getElementById(\"lColor\").value)}\n            //onKeyPress={e => { if (e.key === \"Enter\") inputHandler() }}\n          />\n        </div>\n      \n          </Dropdown.Menu>\n      </Dropdown>\n  \n\n          <Dropdown id='algo'className='pt-3'>\n            <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\n              Algorithm Settings\n            </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n          <form onSubmit=''>\n\n            <Dropdown className=\"dropdown\" drop=\"right\">\n              <Dropdown.Toggle variant=\"outline-info\" id=\"dropdown-basic\">\n                Algorithm\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu id='algoSelection'>\n                <Dropdown.Item eventKey=\"1\" active>\n                  Depth-First Search\n                </Dropdown.Item>\n                <Dropdown.Item evenyKey=\"2\">\n                  Breadth-First Search\n                  </Dropdown.Item>\n                <Dropdown.Item eventKey=\"3\">\n                  Dijkstra's\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n\n            <div className=\"mt-2 mb-2\">\n              <Form.Check className='mr-3'type=\"checkbox\" id=\"direct\" label=\"Directed\" />\n              <Form.Check type=\"checkbox\" id=\"weight\" label=\"Weighted\" />\n            </div>\n\n            <h5 class=\"font-weight-light h6 pt-3\"> Start Node </h5>\n            <div class=\"input-group mb-3\">\n              <input\n                class=\"L\"\n                id=\"sNode\"\n                type=\"text\"\n                name=\"startNode\"\n                placeholder=\"Enter starting node\"\n                onChange=''\n                //onKeyPress={this._handleLinkKeyEnter}\n              />\n            </div>\n\n            <h5 class=\"font-weight-light h6\"> Target Node </h5>\n            <div class=\"input-group mb-3\">\n              <input\n                class=\"L\"\n                id=\"tNode\"\n                type=\"text\"\n                name=\"tarhetNode\"\n                placeholder=\"Enter ending node\"\n                onChange=''\n                //onKeyPress={this._handleLinkKeyEnter}\n              />\n            </div>\n\n            <Button class=\"submit mt-2\" type=\"submit\" variant=\"outline-success\">\n              Start\n            </Button>\n          </form>\n          </Dropdown.Menu>\n         </Dropdown>\n          \n         <Button id='highTest' class=\"submit\" type=\"submit\" variant=\"outline-success\" \n          onClick={() => this.rotateHandler()}>\n              HighLight Test\n         </Button>\n\n        </div>\n\n        <div class=\"rightWindow\">\n          <h5 class=\"font-weight-light pt-2\"> Add node: </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickAddNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger\"\n                id=\"button-addon1\"\n              >\n                <h6 class=\"align-middle\"> + </h6>\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              class=\"nodeInput\"\n              name=\"addNodeName\"\n              placeholder={this.state.addNodePlaceholder}\n              value={this.state.addNodeName}\n              onChange={this._addNodeHandleChange}\n              onKeyPress={this._handleAddKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Remove node: </h5>\n          <div class=\"input-group mb-3\">\n            <div class=\"input-group-prepend\">\n              <button\n                onClick={this.onClickRemoveNode}\n                type=\"button\"\n                class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                id=\"button-addon1\"\n              >\n                <h6 class=\"align-middle\"> - </h6>\n              </button>\n            </div>\n            <input\n              type=\"text\"\n              class=\"nodeInput\"\n              name=\"removeNodeName\"\n              placeholder={this.state.removeNodePlaceholder}\n              value={this.state.removeNodeName}\n              onChange={this._removeNodeHandleChange}\n              onKeyPress={this._handleRemoveKeyEnter}\n            />\n          </div>\n\n          <h5 class=\"font-weight-light\"> Add link: </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"addLink\"\n            placeholder={this.state.addLinkPlaceholder}\n            value={this.state.addLink}\n            onChange={this._addLinkHandleChange}\n            onKeyPress={this._handleLinkKeyEnter}\n          />\n\n          <h5 class=\"font-weight-light pt-3\"> Remove link: </h5>\n          <input\n            class=\"linkInput\"\n            type=\"text\"\n            name=\"removeLink\"\n            placeholder={this.state.removeLinkPlaceholder}\n            value={this.state.removeLink}\n            onChange={this._removeLinkHandleChange}\n            onKeyPress={this._handleRemoveLinkKeyEnter}\n          />\n\n          <h5 class=\"font-weight-light pt-3\"> Node list: </h5>\n          <div className=\"json-data-container\">\n            <TreeView class=\"nodes\" key=\"nodes\" nodeLabel=\"Nodes\">\n              {this.state.data.nodes.map((node, i) => {\n                const type = node.type;\n                const name = node.id;\n                if (name in this.state.neighbors) {\n                  return (\n                    <TreeView key={type + \"|\" + i} nodeLabel={name}>\n                      <TreeView key={type + \"|\" + i} nodeLabel=\"neighbors: \">\n                        {this.state.neighbors[name].map((neighbor, i) => {\n                          return <div className=\"info\"> {neighbor}</div>;\n                        })}\n                      </TreeView>\n                    </TreeView>\n                  );\n                }\n              })}\n            </TreeView>\n          </div>\n        </div>\n\n        <Graph\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}