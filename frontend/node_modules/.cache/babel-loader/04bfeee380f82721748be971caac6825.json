{"ast":null,"code":"/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */import{symbolCircle as d3SymbolCircle,symbolCross as d3SymbolCross,symbolDiamond as d3SymbolDiamond,symbolSquare as d3SymbolSquare,symbolStar as d3SymbolStar,symbolTriangle as d3SymbolTriangle,symbolWye as d3SymbolWye,symbol as d3Symbol}from\"d3-shape\";import CONST from\"./node.const\";/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */function _convertTypeToD3Symbol(typeName){switch(typeName){case CONST.SYMBOLS.CIRCLE:return d3SymbolCircle;case CONST.SYMBOLS.CROSS:return d3SymbolCross;case CONST.SYMBOLS.DIAMOND:return d3SymbolDiamond;case CONST.SYMBOLS.SQUARE:return d3SymbolSquare;case CONST.SYMBOLS.STAR:return d3SymbolStar;case CONST.SYMBOLS.TRIANGLE:return d3SymbolTriangle;case CONST.SYMBOLS.WYE:return d3SymbolWye;default:return d3SymbolCircle;}}/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */function buildSvgSymbol(){var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:CONST.DEFAULT_NODE_SIZE;var symbolTypeDesc=arguments.length>1&&arguments[1]!==undefined?arguments[1]:CONST.SYMBOLS.CIRCLE;return d3Symbol().size(function(){return size;}).type(function(){return _convertTypeToD3Symbol(symbolTypeDesc);})();}export default{buildSvgSymbol:buildSvgSymbol};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/Graph/Graph/node/node.helper.js"],"names":["symbolCircle","d3SymbolCircle","symbolCross","d3SymbolCross","symbolDiamond","d3SymbolDiamond","symbolSquare","d3SymbolSquare","symbolStar","d3SymbolStar","symbolTriangle","d3SymbolTriangle","symbolWye","d3SymbolWye","symbol","d3Symbol","CONST","_convertTypeToD3Symbol","typeName","SYMBOLS","CIRCLE","CROSS","DIAMOND","SQUARE","STAR","TRIANGLE","WYE","buildSvgSymbol","size","DEFAULT_NODE_SIZE","symbolTypeDesc","type"],"mappings":"AAAA;;;;GAKA,OACIA,YAAY,GAAIC,CAAAA,cADpB,CAEIC,WAAW,GAAIC,CAAAA,aAFnB,CAGIC,aAAa,GAAIC,CAAAA,eAHrB,CAIIC,YAAY,GAAIC,CAAAA,cAJpB,CAKIC,UAAU,GAAIC,CAAAA,YALlB,CAMIC,cAAc,GAAIC,CAAAA,gBANtB,CAOIC,SAAS,GAAIC,CAAAA,WAPjB,CAQIC,MAAM,GAAIC,CAAAA,QARd,KASO,UATP,CAWA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CAEA;;;;;;;GAQA,QAASC,CAAAA,sBAAT,CAAgCC,QAAhC,CAA0C,CACtC,OAAQA,QAAR,EACI,IAAKF,CAAAA,KAAK,CAACG,OAAN,CAAcC,MAAnB,CACI,MAAOnB,CAAAA,cAAP,CACJ,IAAKe,CAAAA,KAAK,CAACG,OAAN,CAAcE,KAAnB,CACI,MAAOlB,CAAAA,aAAP,CACJ,IAAKa,CAAAA,KAAK,CAACG,OAAN,CAAcG,OAAnB,CACI,MAAOjB,CAAAA,eAAP,CACJ,IAAKW,CAAAA,KAAK,CAACG,OAAN,CAAcI,MAAnB,CACI,MAAOhB,CAAAA,cAAP,CACJ,IAAKS,CAAAA,KAAK,CAACG,OAAN,CAAcK,IAAnB,CACI,MAAOf,CAAAA,YAAP,CACJ,IAAKO,CAAAA,KAAK,CAACG,OAAN,CAAcM,QAAnB,CACI,MAAOd,CAAAA,gBAAP,CACJ,IAAKK,CAAAA,KAAK,CAACG,OAAN,CAAcO,GAAnB,CACI,MAAOb,CAAAA,WAAP,CACJ,QACI,MAAOZ,CAAAA,cAAP,CAhBR,CAkBH,CAED;;;;;;;GAQA,QAAS0B,CAAAA,cAAT,EAA+F,IAAvEC,CAAAA,IAAuE,2DAAhEZ,KAAK,CAACa,iBAA0D,IAAvCC,CAAAA,cAAuC,2DAAtBd,KAAK,CAACG,OAAN,CAAcC,MAAQ,CAC3F,MAAOL,CAAAA,QAAQ,GACVa,IADE,CACG,iBAAMA,CAAAA,IAAN,EADH,EAEFG,IAFE,CAEG,iBAAMd,CAAAA,sBAAsB,CAACa,cAAD,CAA5B,EAFH,GAAP,CAGH,CAED,cAAe,CACXH,cAAc,CAAdA,cADW,CAAf","sourcesContent":["/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\nimport {\n    symbolCircle as d3SymbolCircle,\n    symbolCross as d3SymbolCross,\n    symbolDiamond as d3SymbolDiamond,\n    symbolSquare as d3SymbolSquare,\n    symbolStar as d3SymbolStar,\n    symbolTriangle as d3SymbolTriangle,\n    symbolWye as d3SymbolWye,\n    symbol as d3Symbol,\n} from \"d3-shape\";\n\nimport CONST from \"./node.const\";\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\nfunction _convertTypeToD3Symbol(typeName) {\n    switch (typeName) {\n        case CONST.SYMBOLS.CIRCLE:\n            return d3SymbolCircle;\n        case CONST.SYMBOLS.CROSS:\n            return d3SymbolCross;\n        case CONST.SYMBOLS.DIAMOND:\n            return d3SymbolDiamond;\n        case CONST.SYMBOLS.SQUARE:\n            return d3SymbolSquare;\n        case CONST.SYMBOLS.STAR:\n            return d3SymbolStar;\n        case CONST.SYMBOLS.TRIANGLE:\n            return d3SymbolTriangle;\n        case CONST.SYMBOLS.WYE:\n            return d3SymbolWye;\n        default:\n            return d3SymbolCircle;\n    }\n}\n\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\nfunction buildSvgSymbol(size = CONST.DEFAULT_NODE_SIZE, symbolTypeDesc = CONST.SYMBOLS.CIRCLE) {\n    return d3Symbol()\n        .size(() => size)\n        .type(() => _convertTypeToD3Symbol(symbolTypeDesc))();\n}\n\nexport default {\n    buildSvgSymbol,\n};\n"]},"metadata":{},"sourceType":"module"}