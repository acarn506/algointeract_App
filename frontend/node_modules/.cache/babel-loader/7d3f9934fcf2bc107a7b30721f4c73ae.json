{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/LeftWindow/LeftWindow.jsx\";\nimport React, { useState } from 'react';\nimport './LeftWindow.css';\nimport 'popper.js';\n\nconst LeftWindow = props => {\n  //Property States \n  const [nSize, setnSize] = useState('');\n  const [nColor, setnColor] = useState('');\n  const [lColor, setlColor] = useState(''); //Event Handler\n\n  const inputHandler = event => {\n    //prevent the forn submission from refreshing the page\n    event.preventDefault(); //Pass states to GraphVisualizer\n\n    props.nSize(nSize);\n    props.nColor(nColor);\n    props.lColor(lColor); //reset inputs\n    //setName('')\n  };\n\n  return React.createElement(\"div\", {\n    class: \"leftWindow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: inputHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    class: \"font-weight-light pt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" Node Size \"), React.createElement(\"div\", {\n    class: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"nSize\",\n    id: \"nSize\",\n    type: \"text\",\n    name: \"nodeSize\",\n    placeholder: 'text',\n    onChange: e => setnSize(document.getElementById('nSize').value) //onKeyPress={}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), React.createElement(\"h5\", {\n    class: \"font-weight-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \" Node Color \"), React.createElement(\"div\", {\n    class: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"nColor\",\n    id: \"nColor\",\n    type: \"text\",\n    name: \"nodeColor\",\n    placeholder: 'text',\n    onChange: e => setnColor(document.getElementById('nColor').value) //onKeyPress={this._handleLinkKeyEnter}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(\"h5\", {\n    class: \"font-weight-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \" Link Color \"), React.createElement(\"div\", {\n    class: \"input-group mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    class: \"lColor\",\n    id: \"lColor\",\n    type: \"text\",\n    name: \"linkColor\",\n    placeholder: 'text',\n    onChange: e => setlColor(document.getElementById('lColor').value) //onKeyPress={this._handleLinkKeyEnter}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    class: \"dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    class: \"btn btn-secondary dropdown-toggle\",\n    type: \"button\",\n    id: \"dropdownMenuButton\",\n    \"data-toggle\": \"dropdown\",\n    \"aria-haspopup\": \"true\",\n    \"aria-expanded\": \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Dropdown button\"), React.createElement(\"div\", {\n    class: \"dropdown-menu\",\n    \"aria-labelledby\": \"dropdownMenuButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    class: \"dropdown-item\",\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Action\"), React.createElement(\"a\", {\n    class: \"dropdown-item\",\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Another action\"), React.createElement(\"a\", {\n    class: \"dropdown-item\",\n    href: \"#\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Something else here\"))), React.createElement(\"input\", {\n    class: \"submit\",\n    type: \"submit\",\n    value: \"Start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })));\n};\n\nexport default LeftWindow;\n/*Name and Target with hooks\n\nconst Input = ({createNode, handleConfig}) => {\n const [name, setName] = useState('')\n const [color, setColor] = useState('')\n const [target, setTarget] = useState('')\n const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        console.log(target)\n        createNode(name, target)\n        Config(color)\n\n        //reset inputs\n        setName('')\n    }\n\n\n    return(\n        <div className='form grid'>\n            <form onSubmit={inputHandler}>\n                \n                <label class='nameL' htmlFor='name'>Name</label>\n                <input\n                    class='name'\n                    type='text'\n                    label=\"Name\"\n                    value={name}\n                    placeholder='Enter a Name'\n                    required onChange={(e) => setName(e.target.value)}\n                />\n             \n                <select class='color' id='color' onChange={ (e) => setColor(document.getElementById('color').value)}>\n                    <option value='default'>Color</option>\n                    <option value='lightgreen'>lightgreen</option>\n                    <option value='blue'>blue</option>\n                    <option value='red'>red</option>\n                    <option value='orange'>orange</option>\n                    <option value='purple'>purple</option>\n                    <option value='yellow'>yellow</option>\n                </select>\n\n\n                <select class='connect' id='connect' onChange={ (e) => setTarget(document.getElementById('connect').value)}>\n                    <option value='default'>Target</option>\n                    <option value='Harry'>Harry</option>\n                    <option value='Sally'>Sally</option>\n                    <option value='Alice'>Alice</option>\n                </select>\n\n            <input class='submit' type='submit' value='Create Node'/>\n            </form>\n        </div>\n    )\n}\n\n\n    <h5 class=\"font-weight-light pt-3\"> Node Size </h5>\n            <div class=\"input-group mb-3\">\n                <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={}\n                value={}\n                onChange={}\n                onKeyPress={}\n                />\n            </div>\n*/","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/LeftWindow/LeftWindow.jsx"],"names":["React","useState","LeftWindow","props","nSize","setnSize","nColor","setnColor","lColor","setlColor","inputHandler","event","preventDefault","e","document","getElementById","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,kBAAP;AACA,OAAO,WAAP;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAE1B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CAL0B,CAO1B;;AACA,QAAMS,YAAY,GAAIC,KAAD,IAAW;AAC5B;AACAA,IAAAA,KAAK,CAACC,cAAN,GAF4B,CAI5B;;AACAT,IAAAA,KAAK,CAACC,KAAN,CAAYA,KAAZ;AACAD,IAAAA,KAAK,CAACG,MAAN,CAAaA,MAAb;AACAH,IAAAA,KAAK,CAACK,MAAN,CAAaA,MAAb,EAP4B,CAS5B;AACA;AACH,GAXD;;AAcA,SACI;AAAK,IAAA,KAAK,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAEE,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA;AAAI,IAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFA,EAGI;AAAK,IAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACA,IAAA,KAAK,EAAC,OADN;AAEA,IAAA,EAAE,EAAC,OAFH;AAGA,IAAA,IAAI,EAAC,MAHL;AAIA,IAAA,IAAI,EAAC,UAJL;AAKA,IAAA,WAAW,EAAE,MALb;AAMA,IAAA,QAAQ,EAAGG,CAAD,IAAOR,QAAQ,CAACS,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAAlC,CANzB,CAOA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAHJ,EAeI;AAAI,IAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfJ,EAgBI;AAAK,IAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACA,IAAA,KAAK,EAAC,QADN;AAEA,IAAA,EAAE,EAAC,QAFH;AAGA,IAAA,IAAI,EAAC,MAHL;AAIA,IAAA,IAAI,EAAC,WAJL;AAKA,IAAA,WAAW,EAAE,MALb;AAMA,IAAA,QAAQ,EAAGH,CAAD,IAAON,SAAS,CAACO,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAnC,CAN1B,CAOA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAhBJ,EA4BI;AAAI,IAAA,KAAK,EAAC,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5BJ,EA6BI;AAAK,IAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACA,IAAA,KAAK,EAAC,QADN;AAEA,IAAA,EAAE,EAAC,QAFH;AAGA,IAAA,IAAI,EAAC,MAHL;AAIA,IAAA,IAAI,EAAC,WAJL;AAKA,IAAA,WAAW,EAAE,MALb;AAMA,IAAA,QAAQ,EAAGH,CAAD,IAAOJ,SAAS,CAACK,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAnC,CAN1B,CAOA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA7BJ,EAyCI;AAAK,IAAA,KAAK,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,KAAK,EAAC,mCADV;AAEI,IAAA,IAAI,EAAC,QAFT;AAEkB,IAAA,EAAE,EAAC,oBAFrB;AAGI,mBAAY,UAHhB;AAII,qBAAc,MAJlB;AAKI,qBAAc,OALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EASI;AAAK,IAAA,KAAK,EAAC,eAAX;AAA2B,uBAAgB,oBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,KAAK,EAAC,eAAT;AAAyB,IAAA,IAAI,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAG,IAAA,KAAK,EAAC,eAAT;AAAyB,IAAA,IAAI,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,EAGI;AAAG,IAAA,KAAK,EAAC,eAAT;AAAyB,IAAA,IAAI,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHJ,CATJ,CAzCJ,EA0DA;AAAO,IAAA,KAAK,EAAC,QAAb;AAAsB,IAAA,IAAI,EAAC,QAA3B;AAAoC,IAAA,KAAK,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1DA,CADJ,CADJ;AAgEH,CAtFD;;AAwFA,eAAed,UAAf;AAMA","sourcesContent":["import React, {useState} from 'react'\nimport './LeftWindow.css'\nimport 'popper.js'\n\nconst LeftWindow = (props) => {\n\n    //Property States \n    const [nSize, setnSize] = useState('')\n    const [nColor, setnColor] = useState('')\n    const [lColor, setlColor] = useState('')\n\n    //Event Handler\n    const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        \n        //Pass states to GraphVisualizer\n        props.nSize(nSize) \n        props.nColor(nColor)\n        props.lColor(lColor)\n\n        //reset inputs\n        //setName('')\n    } \n\n\n    return(\n        <div class=\"leftWindow\">\n            <form onSubmit={inputHandler}>\n\n            <h5 class=\"font-weight-light pt-3\"> Node Size </h5>\n                <div class=\"input-group mb-3\">\n                    <input\n                    class=\"nSize\"\n                    id='nSize'\n                    type=\"text\"\n                    name=\"nodeSize\"\n                    placeholder={'text'}\n                    onChange={(e) => setnSize(document.getElementById('nSize').value)}\n                    //onKeyPress={}\n                    />\n                </div>\n                \n                <h5 class=\"font-weight-light\"> Node Color </h5>\n                <div class=\"input-group mb-3\">\n                    <input\n                    class=\"nColor\"\n                    id='nColor'\n                    type=\"text\"\n                    name=\"nodeColor\"\n                    placeholder={'text'}\n                    onChange={(e) => setnColor(document.getElementById('nColor').value)}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                    />\n                </div>\n\n                <h5 class=\"font-weight-light\"> Link Color </h5>\n                <div class=\"input-group mb-3\">\n                    <input\n                    class=\"lColor\"\n                    id='lColor'\n                    type=\"text\"\n                    name=\"linkColor\"\n                    placeholder={'text'}\n                    onChange={(e) => setlColor(document.getElementById('lColor').value)}\n                    //onKeyPress={this._handleLinkKeyEnter}\n                    />\n                </div>\n\n                <div class=\"dropdown\">\n                    <button \n                        class=\"btn btn-secondary dropdown-toggle\" \n                        type=\"button\" id=\"dropdownMenuButton\" \n                        data-toggle=\"dropdown\" \n                        aria-haspopup=\"true\" \n                        aria-expanded=\"false\">\n                        Dropdown button\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        <a class=\"dropdown-item\" href=\"#\">Action</a>\n                        <a class=\"dropdown-item\" href=\"#\">Another action</a>\n                        <a class=\"dropdown-item\" href=\"#\">Something else here</a>\n                    </div>\n                </div>\n\n\n            <input class='submit' type='submit' value='Start'/>\n        </form>\n        </div>\n    )\n}\n\nexport default LeftWindow\n\n\n\n\n\n/*Name and Target with hooks\n\nconst Input = ({createNode, handleConfig}) => {\n const [name, setName] = useState('')\n const [color, setColor] = useState('')\n const [target, setTarget] = useState('')\n const inputHandler = (event) => {\n        //prevent the forn submission from refreshing the page\n        event.preventDefault() \n        console.log(target)\n        createNode(name, target)\n        Config(color)\n\n        //reset inputs\n        setName('')\n    }\n\n\n    return(\n        <div className='form grid'>\n            <form onSubmit={inputHandler}>\n                \n                <label class='nameL' htmlFor='name'>Name</label>\n                <input\n                    class='name'\n                    type='text'\n                    label=\"Name\"\n                    value={name}\n                    placeholder='Enter a Name'\n                    required onChange={(e) => setName(e.target.value)}\n                />\n             \n                <select class='color' id='color' onChange={ (e) => setColor(document.getElementById('color').value)}>\n                    <option value='default'>Color</option>\n                    <option value='lightgreen'>lightgreen</option>\n                    <option value='blue'>blue</option>\n                    <option value='red'>red</option>\n                    <option value='orange'>orange</option>\n                    <option value='purple'>purple</option>\n                    <option value='yellow'>yellow</option>\n                </select>\n\n\n                <select class='connect' id='connect' onChange={ (e) => setTarget(document.getElementById('connect').value)}>\n                    <option value='default'>Target</option>\n                    <option value='Harry'>Harry</option>\n                    <option value='Sally'>Sally</option>\n                    <option value='Alice'>Alice</option>\n                </select>\n\n            <input class='submit' type='submit' value='Create Node'/>\n            </form>\n        </div>\n    )\n}\n\n\n    <h5 class=\"font-weight-light pt-3\"> Node Size </h5>\n            <div class=\"input-group mb-3\">\n                <input\n                class=\"linkInput\"\n                type=\"text\"\n                name=\"addLink\"\n                placeholder={}\n                value={}\n                onChange={}\n                onKeyPress={}\n                />\n            </div>\n*/"]},"metadata":{},"sourceType":"module"}