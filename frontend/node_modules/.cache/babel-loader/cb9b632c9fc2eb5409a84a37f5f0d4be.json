{"ast":null,"code":"import _defineProperty from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n * @module Graph/helper\n * @description\n * Offers a series of methods that isolate logic of Graph component and also from Graph rendering methods.\n */ /**\n * @typedef {Object} Link\n * @property {string} source - the node id of the source in the link.\n * @property {string} target - the node id of the target in the link.\n * @memberof Graph/helper\n */ /**\n * @typedef {Object} Node\n * @property {string} id - the id of the node.\n * @property {string} [color=] - color of the node (optional).\n * @property {string} [fontColor=] - node text label font color (optional).\n * @property {string} [size=] - size of the node (optional).\n * @property {string} [symbolType=] - symbol type of the node (optional).\n * @property {string} [svg=] - custom svg for node (optional).\n * @memberof Graph/helper\n */import{forceX as d3ForceX,forceY as d3ForceY,forceSimulation as d3ForceSimulation,forceManyBody as d3ForceManyBody}from\"d3-force\";import CONST from\"./graph.const\";import DEFAULT_CONFIG from\"./graph.config\";import ERRORS from\"../err\";import{isDeepEqual,isEmptyObject,merge,pick,antiPick,throwErr,throwWarning}from\"../utils\";import{computeNodeDegree}from\"./collapse.helper\";var NODE_PROPS_WHITELIST=[\"id\",\"highlighted\",\"x\",\"y\",\"index\",\"vy\",\"vx\"];var LINK_PROPS_WHITELIST=[\"index\",\"source\",\"target\",\"isHidden\"];/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */function _createForceSimulation(width,height,gravity){var frx=d3ForceX(width/2).strength(CONST.FORCE_X);var fry=d3ForceY(height/2).strength(CONST.FORCE_Y);var forceStrength=gravity;return d3ForceSimulation().force(\"charge\",d3ForceManyBody().strength(forceStrength)).force(\"x\",frx).force(\"y\",fry);}/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */function _initializeLinks(graphLinks,config){return graphLinks.reduce(function(links,l){var source=getId(l.source);var target=getId(l.target);if(!links[source]){links[source]={};}if(!links[target]){links[target]={};}var value=config.collapsible&&l.isHidden?0:l.value||1;links[source][target]=value;if(!config.directed){links[target][source]=value;}return links;},{});}/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */function _initializeNodes(graphNodes){var nodes={};var n=graphNodes.length;for(var i=0;i<n;i++){var node=graphNodes[i];node.highlighted=false;if(!Object.prototype.hasOwnProperty.call(node,\"x\")){node.x=// eslint-disable-next-line no-restricted-globals\nscreen.width/3;}if(!Object.prototype.hasOwnProperty.call(node,\"y\")){node.y=// eslint-disable-next-line no-restricted-globals\nscreen.height/3+i*100;}nodes[node.id.toString()]=node;}return nodes;}/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */function _mergeDataLinkWithD3Link(link,index){var d3Links=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var config=arguments.length>3?arguments[3]:undefined;var state=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};// find the matching link if it exists\nvar tmp=d3Links.find(function(l){return l.source.id===link.source&&l.target.id===link.target;});var d3Link=tmp&&pick(tmp,LINK_PROPS_WHITELIST);var customProps=antiPick(link,[\"source\",\"target\"]);if(d3Link){var toggledDirected=state.config&&Object.prototype.hasOwnProperty.call(state.config,\"directed\")&&config.directed!==state.config.directed;var refinedD3Link=_objectSpread(_objectSpread({index:index},d3Link),customProps);// every time we toggle directed config all links should be visible again\nif(toggledDirected){return _objectSpread(_objectSpread({},refinedD3Link),{},{isHidden:false});}// every time we disable collapsible (collapsible is false) all links should be visible again\nreturn config.collapsible?refinedD3Link:_objectSpread(_objectSpread({},refinedD3Link),{},{isHidden:false});}var highlighted=false;var source={id:link.source,highlighted:highlighted};var target={id:link.target,highlighted:highlighted};return _objectSpread({index:index,source:source,target:target},customProps);}/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */function _tagOrphanNodes(nodes,linksMatrix){return Object.keys(nodes).reduce(function(acc,nodeId){var _computeNodeDegree=computeNodeDegree(nodeId,linksMatrix),inDegree=_computeNodeDegree.inDegree,outDegree=_computeNodeDegree.outDegree;var node=nodes[nodeId];var taggedNode=inDegree===0&&outDegree===0?_objectSpread(_objectSpread({},node),{},{_orphan:true}):node;acc[nodeId]=taggedNode;return acc;},{});}/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided\n * @returns {undefined}\n * @memberof Graph/helper\n */function _validateGraphData(data){if(!data.nodes||!data.nodes.length){throwErr(\"Graph\",ERRORS.INSUFFICIENT_DATA);}if(!data.links||!data.links.length){throwWarning(\"Graph\",ERRORS.INSUFFICIENT_LINKS);data.links=[];}var n=data.links.length;var _loop=function _loop(i){var l=data.links[i];if(!data.nodes.find(function(n){return n.id===l.source;})){throwErr(\"Graph\",\"\".concat(ERRORS.INVALID_LINKS,\" - \\\"\").concat(l.source,\"\\\" is not a valid source node id\"));}if(!data.nodes.find(function(n){return n.id===l.target;})){throwErr(\"Graph\",\"\".concat(ERRORS.INVALID_LINKS,\" - \\\"\").concat(l.target,\"\\\" is not a valid target node id\"));}if(l&&l.value!==undefined&&typeof l.value!==\"number\"){throwErr(\"Graph\",\"\".concat(ERRORS.INVALID_LINK_VALUE,\" - found in link with source \\\"\").concat(l.source,\"\\\" and target \\\"\").concat(l.target,\"\\\"\"));}};for(var i=0;i<n;i++){_loop(i);}}// list of properties that are of no interest when it comes to nodes and links comparison\nvar NODE_PROPERTIES_DISCARD_TO_COMPARE=[\"x\",\"y\",\"vx\",\"vy\",\"index\"];/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */function _pickId(o){return pick(o,[\"id\"]);}/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */function _pickSourceAndTarget(o){return pick(o,[\"source\",\"target\"]);}/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */function checkForGraphElementsChanges(nextProps,currentState){var nextNodes=nextProps.data.nodes.map(function(n){return antiPick(n,NODE_PROPERTIES_DISCARD_TO_COMPARE);});var nextLinks=nextProps.data.links;var stateD3Nodes=currentState.d3Nodes.map(function(n){return antiPick(n,NODE_PROPERTIES_DISCARD_TO_COMPARE);});var stateD3Links=currentState.d3Links.map(function(l){return{source:getId(l.source),target:getId(l.target)};});var graphElementsUpdated=!(isDeepEqual(nextNodes,stateD3Nodes)&&isDeepEqual(nextLinks,stateD3Links));var newGraphElements=nextNodes.length!==stateD3Nodes.length||nextLinks.length!==stateD3Links.length||!isDeepEqual(nextNodes.map(_pickId),stateD3Nodes.map(_pickId))||!isDeepEqual(nextLinks.map(_pickSourceAndTarget),stateD3Links.map(_pickSourceAndTarget));return{graphElementsUpdated:graphElementsUpdated,newGraphElements:newGraphElements};}/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */function checkForGraphConfigChanges(nextProps,currentState){var newConfig=nextProps.config||{};var configUpdated=newConfig&&!isEmptyObject(newConfig)&&!isDeepEqual(newConfig,currentState.config);var d3ConfigUpdated=newConfig&&newConfig.d3&&!isDeepEqual(newConfig.d3,currentState.config.d3);return{configUpdated:configUpdated,d3ConfigUpdated:d3ConfigUpdated};}/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */function getCenterAndZoomTransformation(d3Node,config){if(!d3Node){return;}var width=config.width,height=config.height,focusZoom=config.focusZoom;return\"\\n        translate(\".concat(width/2,\", \").concat(height/2,\")\\n        scale(\").concat(focusZoom,\")\\n        translate(\").concat(-d3Node.x,\", \").concat(-d3Node.y,\")\\n    \");}/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */function getId(sot){return sot.id!==undefined&&sot.id!==null?sot.id:sot;}/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */function initializeGraphState(_ref,state){var data=_ref.data,id=_ref.id,config=_ref.config,algoData=_ref.algoData;_validateGraphData(data);var graph;if(state&&state.nodes){graph={nodes:data.nodes.map(function(n){return state.nodes[n.id]?_objectSpread(_objectSpread({},n),pick(state.nodes[n.id],NODE_PROPS_WHITELIST)):_objectSpread({},n);}),links:data.links.map(function(l,index){return _mergeDataLinkWithD3Link(l,index,state&&state.d3Links,config,state);})};}else{graph={nodes:data.nodes.map(function(n){return _objectSpread({},n);}),links:data.links.map(function(l){return _objectSpread({},l);})};}var newConfig=_objectSpread({},merge(DEFAULT_CONFIG,config||{})),links=_initializeLinks(graph.links,newConfig),// matrix of graph connections\nnodes=_tagOrphanNodes(_initializeNodes(graph.nodes),links);var _graph=graph,d3Nodes=_graph.nodes,d3Links=_graph.links;var formatedId=id.replace(/ /g,\"_\");var simulation=_createForceSimulation(newConfig.width,newConfig.height,newConfig.d3&&newConfig.d3.gravity);var minZoom=newConfig.minZoom,maxZoom=newConfig.maxZoom,focusZoom=newConfig.focusZoom;if(focusZoom>maxZoom){newConfig.focusZoom=maxZoom;}else if(focusZoom<minZoom){newConfig.focusZoom=minZoom;}return{id:formatedId,config:newConfig,links:links,d3Links:d3Links,nodes:nodes,d3Nodes:d3Nodes,highlightedNode:\"\",simulation:simulation,newGraphElements:false,configUpdated:false,transform:1,draggedNode:null};}/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */function updateNodeHighlightedValue(nodes,links,config,id){var value=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var highlightedNode=value?id:\"\";var node=_objectSpread(_objectSpread({},nodes[id]),{},{highlighted:value});var updatedNodes=_objectSpread(_objectSpread({},nodes),{},_defineProperty({},id,node));// when highlightDegree is 0 we want only to highlight selected node\nif(links[id]&&config.highlightDegree!==0){updatedNodes=Object.keys(links[id]).reduce(function(acc,linkId){var updatedNode=_objectSpread(_objectSpread({},updatedNodes[linkId]),{},{highlighted:value});acc[linkId]=updatedNode;return acc;},updatedNodes);}return{nodes:updatedNodes,highlightedNode:highlightedNode};}export{checkForGraphConfigChanges,checkForGraphElementsChanges,getCenterAndZoomTransformation,getId,initializeGraphState,updateNodeHighlightedValue};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/Tree/Graph/graph/graph.helper.js"],"names":["forceX","d3ForceX","forceY","d3ForceY","forceSimulation","d3ForceSimulation","forceManyBody","d3ForceManyBody","CONST","DEFAULT_CONFIG","ERRORS","isDeepEqual","isEmptyObject","merge","pick","antiPick","throwErr","throwWarning","computeNodeDegree","NODE_PROPS_WHITELIST","LINK_PROPS_WHITELIST","_createForceSimulation","width","height","gravity","frx","strength","FORCE_X","fry","FORCE_Y","forceStrength","force","_initializeLinks","graphLinks","config","reduce","links","l","source","getId","target","value","collapsible","isHidden","directed","_initializeNodes","graphNodes","nodes","n","length","i","node","highlighted","Object","prototype","hasOwnProperty","call","x","screen","y","id","toString","_mergeDataLinkWithD3Link","link","index","d3Links","state","tmp","find","d3Link","customProps","toggledDirected","refinedD3Link","_tagOrphanNodes","linksMatrix","keys","acc","nodeId","inDegree","outDegree","taggedNode","_orphan","_validateGraphData","data","INSUFFICIENT_DATA","INSUFFICIENT_LINKS","INVALID_LINKS","undefined","INVALID_LINK_VALUE","NODE_PROPERTIES_DISCARD_TO_COMPARE","_pickId","o","_pickSourceAndTarget","checkForGraphElementsChanges","nextProps","currentState","nextNodes","map","nextLinks","stateD3Nodes","d3Nodes","stateD3Links","graphElementsUpdated","newGraphElements","checkForGraphConfigChanges","newConfig","configUpdated","d3ConfigUpdated","d3","getCenterAndZoomTransformation","d3Node","focusZoom","sot","initializeGraphState","algoData","graph","formatedId","replace","simulation","minZoom","maxZoom","highlightedNode","transform","draggedNode","updateNodeHighlightedValue","updatedNodes","highlightDegree","linkId","updatedNode"],"mappings":"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","sourcesContent":["/**\n * @module Graph/helper\n * @description\n * Offers a series of methods that isolate logic of Graph component and also from Graph rendering methods.\n */\n/**\n * @typedef {Object} Link\n * @property {string} source - the node id of the source in the link.\n * @property {string} target - the node id of the target in the link.\n * @memberof Graph/helper\n */\n/**\n * @typedef {Object} Node\n * @property {string} id - the id of the node.\n * @property {string} [color=] - color of the node (optional).\n * @property {string} [fontColor=] - node text label font color (optional).\n * @property {string} [size=] - size of the node (optional).\n * @property {string} [symbolType=] - symbol type of the node (optional).\n * @property {string} [svg=] - custom svg for node (optional).\n * @memberof Graph/helper\n */\nimport {\n  forceX as d3ForceX,\n  forceY as d3ForceY,\n  forceSimulation as d3ForceSimulation,\n  forceManyBody as d3ForceManyBody,\n} from \"d3-force\";\n\nimport CONST from \"./graph.const\";\nimport DEFAULT_CONFIG from \"./graph.config\";\nimport ERRORS from \"../err\";\n\nimport {\n  isDeepEqual,\n  isEmptyObject,\n  merge,\n  pick,\n  antiPick,\n  throwErr,\n  throwWarning,\n} from \"../utils\";\nimport { computeNodeDegree } from \"./collapse.helper\";\n\nconst NODE_PROPS_WHITELIST = [\n  \"id\",\n  \"highlighted\",\n  \"x\",\n  \"y\",\n  \"index\",\n  \"vy\",\n  \"vx\",\n];\nconst LINK_PROPS_WHITELIST = [\"index\", \"source\", \"target\", \"isHidden\"];\n\n/**\n * Create d3 forceSimulation to be applied on the graph.<br/>\n * {@link https://github.com/d3/d3-force#forceSimulation|d3-force#forceSimulation}<br/>\n * {@link https://github.com/d3/d3-force#simulation_force|d3-force#simulation_force}<br/>\n * Wtf is a force? {@link https://github.com/d3/d3-force#forces| here}\n * @param  {number} width - the width of the container area of the graph.\n * @param  {number} height - the height of the container area of the graph.\n * @param  {number} gravity - the force strength applied to the graph.\n * @returns {Object} returns the simulation instance to be consumed.\n * @memberof Graph/helper\n */\nfunction _createForceSimulation(width, height, gravity) {\n  const frx = d3ForceX(width / 2).strength(CONST.FORCE_X);\n  const fry = d3ForceY(height / 2).strength(CONST.FORCE_Y);\n  const forceStrength = gravity;\n\n  return d3ForceSimulation()\n    .force(\"charge\", d3ForceManyBody().strength(forceStrength))\n    .force(\"x\", frx)\n    .force(\"y\", fry);\n}\n\n/**\n * Receives a matrix of the graph with the links source and target as concrete node instances and it transforms it\n * in a lightweight matrix containing only links with source and target being strings representative of some node id\n * and the respective link value (if non existent will default to 1).\n * @param  {Array.<Link>} graphLinks - an array of all graph links.\n * @param  {Object} config - the graph config.\n * @returns {Object.<string, Object>} an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @memberof Graph/helper\n */\nfunction _initializeLinks(graphLinks, config) {\n  return graphLinks.reduce((links, l) => {\n    const source = getId(l.source);\n    const target = getId(l.target);\n\n    if (!links[source]) {\n      links[source] = {};\n    }\n\n    if (!links[target]) {\n      links[target] = {};\n    }\n\n    const value = config.collapsible && l.isHidden ? 0 : l.value || 1;\n\n    links[source][target] = value;\n\n    if (!config.directed) {\n      links[target][source] = value;\n    }\n\n    return links;\n  }, {});\n}\n\n/**\n * Method that initialize graph nodes provided by rd3g consumer and adds additional default mandatory properties\n * that are optional for the user. Also it generates an index mapping, this maps nodes ids the their index in the array\n * of nodes. This is needed because d3 callbacks such as node click and link click return the index of the node.\n * @param  {Array.<Node>} graphNodes - the array of nodes provided by the rd3g consumer.\n * @returns {Object.<string, Object>} returns the nodes ready to be used within rd3g with additional properties such as x, y\n * and highlighted values.\n * @memberof Graph/helper\n */\nfunction _initializeNodes(graphNodes) {\n  let nodes = {};\n  const n = graphNodes.length;\n\n  for (let i = 0; i < n; i++) {\n    const node = graphNodes[i];\n\n    node.highlighted = false;\n    if (!Object.prototype.hasOwnProperty.call(node, \"x\")) {\n      node.x =\n        // eslint-disable-next-line no-restricted-globals\n        screen.width / 3;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(node, \"y\")) {\n      node.y =\n        // eslint-disable-next-line no-restricted-globals\n        screen.height / 3 + i * 100;\n    }\n\n    nodes[node.id.toString()] = node;\n  }\n\n  return nodes;\n}\n\n/**\n * Maps an input link (with format `{ source: 'sourceId', target: 'targetId' }`) to a d3Link\n * (with format `{ source: { id: 'sourceId' }, target: { id: 'targetId' } }`). If d3Link with\n * given index exists already that same d3Link is returned.\n * @param {Object} link - input link.\n * @param {number} index - index of the input link.\n * @param {Array.<Object>} d3Links - all d3Links.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a d3Link.\n * @memberof Graph/helper\n */\nfunction _mergeDataLinkWithD3Link(\n  link,\n  index,\n  d3Links = [],\n  config,\n  state = {}\n) {\n  // find the matching link if it exists\n  const tmp = d3Links.find(\n    (l) => l.source.id === link.source && l.target.id === link.target\n  );\n  const d3Link = tmp && pick(tmp, LINK_PROPS_WHITELIST);\n  const customProps = antiPick(link, [\"source\", \"target\"]);\n\n  if (d3Link) {\n    const toggledDirected =\n      state.config &&\n      Object.prototype.hasOwnProperty.call(state.config, \"directed\") &&\n      config.directed !== state.config.directed;\n    const refinedD3Link = {\n      index,\n      ...d3Link,\n      ...customProps,\n    };\n\n    // every time we toggle directed config all links should be visible again\n    if (toggledDirected) {\n      return { ...refinedD3Link, isHidden: false };\n    }\n\n    // every time we disable collapsible (collapsible is false) all links should be visible again\n    return config.collapsible\n      ? refinedD3Link\n      : { ...refinedD3Link, isHidden: false };\n  }\n\n  const highlighted = false;\n  const source = {\n    id: link.source,\n    highlighted,\n  };\n  const target = {\n    id: link.target,\n    highlighted,\n  };\n\n  return {\n    index,\n    source,\n    target,\n    ...customProps,\n  };\n}\n\n/**\n * Tags orphan nodes with a `_orphan` flag.\n * @param {Object.<string, Object>} nodes - nodes mapped by their id.\n * @param {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an object that maps adjacent nodes ids (string) and their values (number).\n * @returns {Object.<string, Object>} same input nodes structure with tagged orphans nodes where applicable.\n * @memberof Graph/helper\n */\nfunction _tagOrphanNodes(nodes, linksMatrix) {\n  return Object.keys(nodes).reduce((acc, nodeId) => {\n    const { inDegree, outDegree } = computeNodeDegree(nodeId, linksMatrix);\n    const node = nodes[nodeId];\n    const taggedNode =\n      inDegree === 0 && outDegree === 0 ? { ...node, _orphan: true } : node;\n\n    acc[nodeId] = taggedNode;\n\n    return acc;\n  }, {});\n}\n\n/**\n * Some integrity validations on links and nodes structure. If some validation fails the function will\n * throw an error.\n * @param  {Object} data - Same as {@link #initializeGraphState|data in initializeGraphState}.\n * @throws can throw the following error or warning msg:\n * INSUFFICIENT_DATA - msg if no nodes are provided\n * INVALID_LINKS - if links point to nonexistent nodes\n * INSUFFICIENT_LINKS - if no links are provided\n * @returns {undefined}\n * @memberof Graph/helper\n */\nfunction _validateGraphData(data) {\n  if (!data.nodes || !data.nodes.length) {\n    throwErr(\"Graph\", ERRORS.INSUFFICIENT_DATA);\n  }\n\n  if (!data.links || !data.links.length) {\n    throwWarning(\"Graph\", ERRORS.INSUFFICIENT_LINKS);\n    data.links = [];\n  }\n\n  const n = data.links.length;\n\n  for (let i = 0; i < n; i++) {\n    const l = data.links[i];\n\n    if (!data.nodes.find((n) => n.id === l.source)) {\n      throwErr(\n        \"Graph\",\n        `${ERRORS.INVALID_LINKS} - \"${l.source}\" is not a valid source node id`\n      );\n    }\n\n    if (!data.nodes.find((n) => n.id === l.target)) {\n      throwErr(\n        \"Graph\",\n        `${ERRORS.INVALID_LINKS} - \"${l.target}\" is not a valid target node id`\n      );\n    }\n\n    if (l && l.value !== undefined && typeof l.value !== \"number\") {\n      throwErr(\n        \"Graph\",\n        `${ERRORS.INVALID_LINK_VALUE} - found in link with source \"${l.source}\" and target \"${l.target}\"`\n      );\n    }\n  }\n}\n\n// list of properties that are of no interest when it comes to nodes and links comparison\nconst NODE_PROPERTIES_DISCARD_TO_COMPARE = [\"x\", \"y\", \"vx\", \"vy\", \"index\"];\n\n/**\n * Picks the id.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with id property only.\n * @memberof Graph/helper\n */\nfunction _pickId(o) {\n  return pick(o, [\"id\"]);\n}\n\n/**\n * Picks source and target.\n * @param {Object} o object to pick from.\n * @returns {Object} new object with source and target only.\n * @memberof Graph/helper\n */\nfunction _pickSourceAndTarget(o) {\n  return pick(o, [\"source\", \"target\"]);\n}\n\n/**\n * This function checks for graph elements (nodes and links) changes, in two different\n * levels of significance, updated elements (whether some property has changed in some\n * node or link) and new elements (whether some new elements or added/removed from the graph).\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - newGraphElements - flag that indicates whether new graph elements were added.\n * - graphElementsUpdated - flag that indicates whether some graph elements have\n * updated (some property that is not in NODE_PROPERTIES_DISCARD_TO_COMPARE was added to\n * some node or link or was updated).\n * @memberof Graph/helper\n */\n\nfunction checkForGraphElementsChanges(nextProps, currentState) {\n  const nextNodes = nextProps.data.nodes.map((n) =>\n    antiPick(n, NODE_PROPERTIES_DISCARD_TO_COMPARE)\n  );\n  const nextLinks = nextProps.data.links;\n  const stateD3Nodes = currentState.d3Nodes.map((n) =>\n    antiPick(n, NODE_PROPERTIES_DISCARD_TO_COMPARE)\n  );\n  const stateD3Links = currentState.d3Links.map((l) => ({\n    source: getId(l.source),\n    target: getId(l.target),\n  }));\n  const graphElementsUpdated = !(\n    isDeepEqual(nextNodes, stateD3Nodes) && isDeepEqual(nextLinks, stateD3Links)\n  );\n  const newGraphElements =\n    nextNodes.length !== stateD3Nodes.length ||\n    nextLinks.length !== stateD3Links.length ||\n    !isDeepEqual(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) ||\n    !isDeepEqual(\n      nextLinks.map(_pickSourceAndTarget),\n      stateD3Links.map(_pickSourceAndTarget)\n    );\n\n  return { graphElementsUpdated, newGraphElements };\n}\n\n/**\n * Logic to check for changes in graph config.\n * @param {Object} nextProps - nextProps that graph will receive.\n * @param {Object} currentState - the current state of the graph.\n * @returns {Object.<string, boolean>} returns object containing update check flags:\n * - configUpdated - global flag that indicates if any property was updated.\n * - d3ConfigUpdated - specific flag that indicates changes in d3 configurations.\n * @memberof Graph/helper\n */\nfunction checkForGraphConfigChanges(nextProps, currentState) {\n  const newConfig = nextProps.config || {};\n  const configUpdated =\n    newConfig &&\n    !isEmptyObject(newConfig) &&\n    !isDeepEqual(newConfig, currentState.config);\n  const d3ConfigUpdated =\n    newConfig &&\n    newConfig.d3 &&\n    !isDeepEqual(newConfig.d3, currentState.config.d3);\n\n  return { configUpdated, d3ConfigUpdated };\n}\n\n/**\n * Returns the transformation to apply in order to center the graph on the\n * selected node.\n * @param {Object} d3Node - node to focus the graph view on.\n * @param {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @returns {string|undefined} transform rule to apply.\n * @memberof Graph/helper\n */\nfunction getCenterAndZoomTransformation(d3Node, config) {\n  if (!d3Node) {\n    return;\n  }\n\n  const { width, height, focusZoom } = config;\n\n  return `\n        translate(${width / 2}, ${height / 2})\n        scale(${focusZoom})\n        translate(${-d3Node.x}, ${-d3Node.y})\n    `;\n}\n\n/**\n * This function extracts an id from a link.\n * **Why this function?**\n * According to [d3-force](https://github.com/d3/d3-force#link_links)\n * d3 links might be initialized with \"source\" and \"target\"\n * properties as numbers or strings, but after initialization they\n * are converted to an object. This small utility functions ensures\n * that weather in initialization or further into the lifetime of the graph\n * we always get the id.\n * @param {Object|string|number} sot source or target\n * of the link to extract id.\n * we want to extract an id.\n * @returns {string|number} the id of the link.\n * @memberof Graph/helper\n */\nfunction getId(sot) {\n  return sot.id !== undefined && sot.id !== null ? sot.id : sot;\n}\n\n/**\n * Encapsulates common procedures to initialize graph.\n * @param {Object} props - Graph component props, object that holds data, id and config.\n * @param {Object} props.data - Data object holds links (array of **Link**) and nodes (array of **Node**).\n * @param {string} props.id - the graph id.\n * @param {Object} props.config - same as {@link #graphrenderer|config in renderGraph}.\n * @param {Object} state - Graph component current state (same format as returned object on this function).\n * @returns {Object} a fully (re)initialized graph state object.\n * @memberof Graph/helper\n */\nfunction initializeGraphState({ data, id, config, algoData }, state) {\n  _validateGraphData(data);\n\n  let graph;\n\n  if (state && state.nodes) {\n    graph = {\n      nodes: data.nodes.map((n) =>\n        state.nodes[n.id]\n          ? { ...n, ...pick(state.nodes[n.id], NODE_PROPS_WHITELIST) }\n          : { ...n }\n      ),\n      links: data.links.map((l, index) =>\n        _mergeDataLinkWithD3Link(\n          l,\n          index,\n          state && state.d3Links,\n          config,\n          state\n        )\n      ),\n    };\n  } else {\n    graph = {\n      nodes: data.nodes.map((n) => ({ ...n })),\n      links: data.links.map((l) => ({ ...l })),\n    };\n  }\n\n  let newConfig = { ...merge(DEFAULT_CONFIG, config || {}) },\n    links = _initializeLinks(graph.links, newConfig), // matrix of graph connections\n    nodes = _tagOrphanNodes(_initializeNodes(graph.nodes), links);\n  const { nodes: d3Nodes, links: d3Links } = graph;\n  const formatedId = id.replace(/ /g, \"_\");\n  const simulation = _createForceSimulation(\n    newConfig.width,\n    newConfig.height,\n    newConfig.d3 && newConfig.d3.gravity\n  );\n  const { minZoom, maxZoom, focusZoom } = newConfig;\n\n  if (focusZoom > maxZoom) {\n    newConfig.focusZoom = maxZoom;\n  } else if (focusZoom < minZoom) {\n    newConfig.focusZoom = minZoom;\n  }\n\n  return {\n    id: formatedId,\n    config: newConfig,\n    links,\n    d3Links,\n    nodes,\n    d3Nodes,\n    highlightedNode: \"\",\n    simulation,\n    newGraphElements: false,\n    configUpdated: false,\n    transform: 1,\n    draggedNode: null,\n  };\n}\n\n/**\n * This function updates the highlighted value for a given node and also updates highlight props.\n * @param {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param {Object.<string, Object>} links - an object containing a matrix of connections of the graph.\n * @param {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param {string} id - identifier of node to update.\n * @param {string} value - new highlight value for given node.\n * @returns {Object} returns an object containing the updated nodes\n * and the id of the highlighted node.\n * @memberof Graph/helper\n */\nfunction updateNodeHighlightedValue(nodes, links, config, id, value = false) {\n  const highlightedNode = value ? id : \"\";\n  const node = { ...nodes[id], highlighted: value };\n\n  let updatedNodes = { ...nodes, [id]: node };\n\n  // when highlightDegree is 0 we want only to highlight selected node\n  if (links[id] && config.highlightDegree !== 0) {\n    updatedNodes = Object.keys(links[id]).reduce((acc, linkId) => {\n      const updatedNode = { ...updatedNodes[linkId], highlighted: value };\n\n      acc[linkId] = updatedNode;\n\n      return acc;\n    }, updatedNodes);\n  }\n\n  return {\n    nodes: updatedNodes,\n    highlightedNode,\n  };\n}\n\nexport {\n  checkForGraphConfigChanges,\n  checkForGraphElementsChanges,\n  getCenterAndZoomTransformation,\n  getId,\n  initializeGraphState,\n  updateNodeHighlightedValue,\n};\n"]},"metadata":{},"sourceType":"module"}