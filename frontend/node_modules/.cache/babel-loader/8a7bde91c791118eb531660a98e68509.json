{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/Draggable.jsx\";\nimport React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\n\nclass Draggable extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //Are we dragging bool\n      isDragging: false,\n      //coordinates of first mouse click\n      originalX: 0,\n      originalY: 0,\n      //stores translation\n      translateX: 0,\n      translateY: 0,\n      //coordinates of where dragging stopped\n      lastTranslateX: 0,\n      lastTranslateY: 0\n    };\n\n    this.handleMouseDown = ({\n      clientX,\n      clientY\n    }) => {\n      window.addEventListener('mousemove', this.handleMouseMove);\n      window.addEventListener('mouseup', this.handleMouseUp);\n\n      if (this.props.onDragStart) {\n        this.props.onDragStart();\n      }\n\n      this.setState({\n        originalX: clientX,\n        originalY: clientY,\n        isDragging: true\n      });\n    };\n\n    this.handleMouseMove = ({\n      clientX,\n      clientY\n    }) => {\n      const {\n        isDragging\n      } = this.state;\n      const {\n        onDrag\n      } = this.props;\n\n      if (!isDragging) {\n        return;\n      }\n\n      this.setState(prevState => ({\n        translateX: clientX - prevState.originalX + prevState.lastTranslateX,\n        translateY: clientY - prevState.originalY + prevState.lastTranslateY\n      }), () => {\n        if (onDrag) {\n          onDrag({\n            translateX: this.state.translateX,\n            translateY: this.state.translateY\n          });\n        }\n      });\n    };\n\n    this.handleMouseUp = () => {\n      window.removeEventListener('mousemove', this.handleMouseMove);\n      window.removeEventListener('mouseup', this.handleMouseUp);\n      this.setState({\n        originalX: 0,\n        originalY: 0,\n        lastTranslateX: this.state.translateX,\n        lastTranslateY: this.state.translateY,\n        isDragging: false\n      }, () => {\n        if (this.props.onDragEnd) {\n          this.props.onDragEnd();\n        }\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('mousemove', this.handleMouseMove);\n    window.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  render() {\n    //children being components being wrapped by this component - in our case Node components\n    const {\n      children\n    } = this.props; //state that is being passed to the wrapped component  \n\n    const {\n      translateX,\n      translateY,\n      isDragging\n    } = this.state;\n    return React.createElement(Container, {\n      onMouseDown: this.handleMouseDown,\n      x: translateX,\n      y: translateY,\n      isDragging: isDragging,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, children);\n  }\n\n} //styled div that is our wrapper\n\n\nconst Container = styled.div.attrs({\n  styles: ({\n    x,\n    y\n  }) => ({\n    transform: `translate(${x}px, ${y}px)`\n  })\n})`\n            cursor: grab;\n            \n            ${({\n  isDragging\n}) => isDragging && css`\n              opacity: 0.8;\n              cursor: grabbing;\n            `};\n          `;\nexport default Draggable;","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Node/Draggable.jsx"],"names":["React","Component","styled","css","Draggable","state","isDragging","originalX","originalY","translateX","translateY","lastTranslateX","lastTranslateY","handleMouseDown","clientX","clientY","window","addEventListener","handleMouseMove","handleMouseUp","props","onDragStart","setState","onDrag","prevState","removeEventListener","onDragEnd","componentWillUnmount","render","children","Container","div","attrs","styles","x","y","transform"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport styled, {css} from 'styled-components'\n\nclass Draggable extends Component {\n\n    state = {\n        //Are we dragging bool\n        isDragging: false,\n        //coordinates of first mouse click\n        originalX: 0, \n        originalY: 0,\n        //stores translation\n        translateX: 0,\n        translateY: 0,\n        //coordinates of where dragging stopped\n        lastTranslateX: 0,\n        lastTranslateY: 0\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n      }\n    \n      handleMouseDown = ({ clientX, clientY }) => {\n        window.addEventListener('mousemove', this.handleMouseMove);\n        window.addEventListener('mouseup', this.handleMouseUp);\n    \n        if (this.props.onDragStart) {\n          this.props.onDragStart();\n        }\n    \n        this.setState({\n          originalX: clientX,\n          originalY: clientY,\n          isDragging: true\n        });\n      };\n    \n      handleMouseMove = ({ clientX, clientY }) => {\n        const { isDragging } = this.state;\n        const { onDrag } = this.props;\n    \n        if (!isDragging) {\n          return;\n        }\n    \n        this.setState(prevState => ({\n          translateX: clientX - prevState.originalX + prevState.lastTranslateX,\n          translateY: clientY - prevState.originalY + prevState.lastTranslateY\n        }), () => {\n          if (onDrag) {\n            onDrag({\n              translateX: this.state.translateX,\n              translateY: this.state.translateY\n            });\n          }\n        });\n      };\n    \n      handleMouseUp = () => {\n        window.removeEventListener('mousemove', this.handleMouseMove);\n        window.removeEventListener('mouseup', this.handleMouseUp);\n    \n        this.setState(\n          {\n            originalX: 0,\n            originalY: 0,\n            lastTranslateX: this.state.translateX,\n            lastTranslateY: this.state.translateY,\n    \n            isDragging: false\n          },\n          () => {\n            if (this.props.onDragEnd) {\n              this.props.onDragEnd();\n            }\n          }\n        );\n      };\n    \n\n    render () {\n        //children being components being wrapped by this component - in our case Node components\n        const {children} = this.props;\n        //state that is being passed to the wrapped component  \n        const {translateX, translateY, isDragging} = this.state;\n\n        return (\n            <Container\n                onMouseDown={this.handleMouseDown}\n                x={translateX}\n                y={translateY}\n                isDragging={isDragging}\n            >\n                {children}\n            </Container>\n        );\n    }\n}\n\n        //styled div that is our wrapper\n        const Container = styled.div.attrs({\n            styles: ({ x, y }) => ({\n              transform: `translate(${x}px, ${y}px)`\n            }),\n          })`\n            cursor: grab;\n            \n            ${({ isDragging }) =>\n            isDragging && css`\n              opacity: 0.8;\n              cursor: grabbing;\n            `};\n          `;\n\nexport default Draggable"]},"metadata":{},"sourceType":"module"}