{"ast":null,"code":"var _jsxFileName = \"/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx\";\nimport React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\"; //import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n// Graph Visualizer component to be called in visualizer page.\n\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props); // Default data used by the Graph component\n\n    this.appendNode = () => {\n      //get link list tail and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode();\n      this.state.listOrder.push(newNode.id);\n      console.log(\"List order\", this.state.listOrfer); //find the new tail index\n\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.tail;\n      }); //create instance of the tail node\n\n      const tailNode = { ...this.state.data.nodes[tailIndex]\n      }; //assign current tail to new node\n\n      tailNode.next = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //update copy of nodes\n\n      newNodes[tailIndex] = tailNode; //update tail to point to the new tail node\n\n      listInfo.tail = newNode.nodeid; //update state of nodes and tail state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      }); //update link state\n\n      this.state.data.links.push({\n        source: tailNode.id,\n        target: newNode.id\n      });\n    };\n\n    this.prependNode = () => {\n      //get link list head and the newest added node\n      let listInfo = this.state.listInfo;\n      let newNode = this.getNewNode();\n      this.state.listOrder.upshift(newNode.id);\n      console.log(\"List order\", this.state.listOrfer); //find the current head node\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === listInfo.head;\n      }); //create instance of the head node\n\n      const headNode = { ...this.state.data.nodes[headIndex]\n      }; //update head positioning\n\n      newNode.next = headNode.nodeid;\n      listInfo.head = newNode.nodeid; //copy of the array of nodes\n\n      let newNodes = [...this.state.data.nodes]; //get index of newNode and update node array\n\n      let lastIndex = newNodes.lastIndexOf();\n      newNodes[lastIndex] = newNode; //update state of nodes\n\n      const data = {\n        nodes: newNodes\n      };\n      this.setState(data); //head state\n\n      this.setState({\n        listInfo: listInfo\n      });\n      this.state.data.links.push({\n        source: newNode.id,\n        target: headNode.id\n      });\n    };\n\n    this.handleMiddleConnection = update => {\n      this.forceUpdate(() => this.onClickAddLink(update)); //setTimeout(() => this.onClickAddLink(update), 500);\n    };\n\n    this.updateConnection = () => {\n      console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo);\n      let removeName = this.state.removeNodeName;\n      let listInfo = this.state.listInfo;\n      let removeIndex = this.state.data.nodes.findIndex(node => {\n        return node.id === removeName;\n      });\n      let newNodes = [...this.state.data.nodes];\n      let removeNode = newNodes[removeIndex];\n\n      if (this.state.data.nodes.length === 0) {\n        console.log(\"Remove last node\");\n        console.log(\"Length\", this.state.data.nodes.length);\n        listInfo.head = null;\n        listInfo.tail = null;\n      } else if (listInfo.head === removeNode.nodeid) {\n        console.log(\"Remove Head\");\n        listInfo.head = removeNode.next;\n        removeNode.next = null;\n        newNodes[removeIndex] = removeNode;\n      } else if (listInfo.tail === removeNode.nodeid) {\n        console.log(\"Remove Tail\");\n        let newTailIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let newTailNode = newNodes[newTailIndex];\n        listInfo.tail = newTailNode.nodeid;\n        newTailNode.next = null;\n        newNodes[newTailIndex] = newTailNode;\n      } else {\n        console.log(\"Remove middle node\");\n        let prevIndex = this.state.data.nodes.findIndex(node => {\n          return node.next === removeNode.nodeid;\n        });\n        let prevNode = newNodes[prevIndex];\n        prevNode.next = removeNode.next;\n        removeNode.next = null;\n        newNodes[prevIndex] = prevNode;\n        newNodes[removeIndex] = removeNode;\n        let middleIndex = this.state.data.links.findIndex(link => {\n          return link.target === removeNode.id;\n        });\n        let removeLinkIndex = this.state.data.links.findIndex(link => {\n          return link.source === removeNode.id;\n        }); //update link\n\n        let newLinks = [...this.state.data.links];\n        let modifyRemoveLink = newLinks[removeLinkIndex];\n        newLinks[middleIndex] = { ...newLinks[middleIndex],\n          target: modifyRemoveLink.target\n        };\n        let updateMiddle = newLinks[middleIndex]; //remove link\n\n        let newLink = [...this.state.data.links];\n        let updateLink = newLink.filter((node, index) => {\n          return index !== middleIndex;\n        });\n        console.log(\"updated middle\", updateLink);\n        this.setState({ ...(this.state.data.links = updateLink)\n        });\n        this.forceUpdate(() => this.onClickAddLink(updateMiddle));\n      } //remove node\n\n\n      let updateNode = newNodes.filter((node, index) => {\n        return index !== removeIndex;\n      });\n      this.setState({ ...(this.state.data.nodes = updateNode)\n      });\n      this.setState({\n        listInfo: listInfo\n      });\n      let links = [...this.state.data.links];\n      let removeLinkIndex = links.findIndex(link => {\n        return link.source === removeNode.id;\n      }); //remove link\n\n      let updateLinks = links.filter((link, index) => {\n        return index !== removeLinkIndex;\n      });\n      this.setState({ ...(this.state.data.links = updateLinks)\n      });\n      console.log(\"Link Update\", this.state.data.links);\n    };\n\n    this.updateListColor = index => {\n      console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo); //get index of head and tail\n\n      let headIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.head;\n      });\n      let tailIndex = this.state.data.nodes.findIndex(node => {\n        return node.nodeid === index.tail;\n      }); //copy of array\n\n      let newNodes = [...this.state.data.nodes]; //set all nodes to original color\n\n      newNodes.forEach(node => {\n        node.color = this.state.nodeColor;\n      }); //update new head or tail with color\n\n      newNodes[headIndex].color = \"blue\";\n      newNodes[tailIndex].color = \"red\"; //update display head and tail\n\n      let headName = newNodes[headIndex].id;\n      let tailName = newNodes[tailIndex].id; //update state of nodes\n\n      this.setState({ ...(this.state.data.nodes = newNodes)\n      });\n      this.setState({\n        headName: headName,\n        tailName: tailName\n      });\n    };\n\n    this.getCount = () => {\n      let curCount = this.state.data.nodes.length + Math.floor(Math.random() * 100);\n      curCount = curCount + Math.floor(Math.random() * 100);\n      return curCount;\n    };\n\n    this.getNewNode = () => {\n      let length = this.state.data.nodes.length;\n      return this.state.data.nodes[length - 1];\n    };\n\n    this.nodePosHandler = pos => {\n      let newPos = 0;\n      let nodePos = this.state.nodePos;\n\n      if (pos === \"app\") {\n        newPos = this.state.nodePos.appAcc;\n        newPos += 1;\n        nodePos.appAcc = newPos;\n        this.setState({\n          nodePos: nodePos\n        });\n      } else {\n        newPos = this.state.nodePos.preAcc;\n        newPos += 1;\n        nodePos.preAcc = newPos;\n        this.setState({\n          nodePos: nodePos\n        });\n      }\n    };\n\n    this.onClickAppNode = () => {\n      console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.addNodeName === \"\") {\n        this.setState({\n          addNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.addNodeName}`;\n        this.nodePosHandler(\"app\"); //create unique node id\n\n        let newid = this.getCount(); //add node id\n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2 + 120 * this.state.nodePos.appAcc,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.appendNode(); //call to update head and tail color\n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n      this.setState({\n        addNodeName: \"\",\n        addNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickPreNode = () => {\n      console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo); // Checks if the addNodeName is an empty string\n\n      if (this.state.preNodeName === \"\") {\n        this.setState({\n          preNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      } // Adds node to the nodes array in the state's data\n\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        const newNode = `${this.state.preNodeName}`;\n        this.nodePosHandler(\"pre\"); //create unique node id\n\n        let newid = this.getCount(); //add node id\n\n        this.state.data.nodes.push({\n          id: newNode,\n          nodeid: newid,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2 - 120 * this.state.nodePos.preAcc,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5\n        });\n        this.setState({\n          data: this.state.data\n        });\n      } else {\n        // 1st node\n        const data = {\n          nodes: [{\n            id: \"Node 1\"\n          }],\n          links: []\n        };\n        this.setState({\n          data\n        });\n      } //decides to use either append or prepend based on button event\n\n\n      this.prependNode(); //call to update head and tail color\n\n      let index = this.state.listInfo;\n      this.updateListColor(index); //console test -> please use for debug\n\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n      this.setState({\n        preNodeName: \"\",\n        preNodePlaceholder: \"Enter node to add\"\n      });\n      console.log(\"Links\", this.state.data.links);\n    };\n\n    this.onClickRemoveNode = () => {\n      console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo);\n\n      if (this.state.removeNodeName === \"\") {\n        this.setState({\n          removeNodePlaceholder: \"Please enter a value!\"\n        });\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n        const nodes = this.state.data.nodes.filter(l => l.id !== this.state.removeNodeName);\n        const links = this.state.data.links.filter(l => l.source !== this.state.removeNodeName && l.target !== this.state.removeNodeName);\n        const data = {\n          nodes,\n          links\n        }; //remove node helper function\n\n        this.updateConnection(); //update color state\n\n        let index = this.state.listInfo;\n        this.updateListColor(index); //test\n\n        console.log(\"nodes\", this.state.data.nodes);\n        console.log(\"listInfo\", this.state.listInfo);\n        this.setState({\n          data,\n          removeNodeName: \"\",\n          removeNodePlaceholder: \"Enter node to remove\"\n        });\n      }\n    };\n\n    this.onClickAddLink = middleNode => {\n      //creat copy \n      let link = this.state.data.links;\n      link.push({\n        source: middleNode.source,\n        target: middleNode.target\n      }); //update links with copy\n\n      this.setState({\n        links: link\n      });\n      /*\n      if (this.state.addLink === \"\") {\n        return;\n      }\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n         let source, target;\n        [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n         var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n         for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n         if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\",\n          });\n          return;\n        } */\n\n      /*\n        for (var j = 0; j < this.state.data.links.length; j++) {\n          if (\n            this.state.data.links[j].source === source &&\n            this.state.data.links[j].target === target\n          ) {\n            console.log(\"ALREADY EXISTS!\");\n            this.setState({\n              addLink: \"\",\n              addLinkPlaceholder: \"Enter as: source, target\",\n            });\n            return;\n          }\n        } */\n\n      /*\n      this.state.data.links.push({\n        source: middleNode.source,\n        target: middleNode.target,\n      }); */\n    };\n\n    this.onClickRemoveLink = () => {\n      if (this.state.removeLink === \"\") {\n        return;\n      }\n\n      if (this.state.data.nodes && this.state.data.nodes.length) {\n        let source, target;\n        [source, target] = this.state.removeLink.split(/[ ,]+/).filter(function (e) {\n          return e.trim().length > 0;\n        });\n        var sourceExists, targetExists;\n        sourceExists = targetExists = false;\n\n        for (var i = 0; i < this.state.data.nodes.length; i++) {\n          if (this.state.data.nodes[i].id === source) {\n            sourceExists = true;\n          }\n\n          if (this.state.data.nodes[i].id === target) {\n            targetExists = true;\n          }\n        }\n\n        if (!sourceExists || !targetExists) {\n          console.log(\"NODE DOES NOT EXIST!\");\n          this.setState({\n            removeLink: \"\",\n            removeLinkPlaceholder: \"Enter as: source, target\"\n          });\n          return;\n        }\n\n        const links = this.state.data.links.filter(l => l.source !== source && l.target !== target);\n        const data = {\n          nodes: this.state.data.nodes,\n          links\n        };\n\n        for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n          if (source in this.state.algoData.neighbors[i]) {\n            this.state.algoData.neighbors[i][source] = this.state.algoData.neighbors[i][source].filter(l => l !== target);\n          }\n        }\n\n        this.setState({\n          data: data,\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\"\n        });\n      }\n    };\n\n    this._addNodeHandleChange = event => {\n      this.setState({\n        addNodeName: event.target.value\n      });\n    };\n\n    this._preNodeHandleChange = event => {\n      this.setState({\n        preNodeName: event.target.value\n      });\n    };\n\n    this._removeNodeHandleChange = event => {\n      this.setState({\n        removeNodeName: event.target.value\n      });\n    };\n\n    this._addLinkHandleChange = event => {\n      this.setState({\n        addLink: event.target.value\n      });\n    };\n\n    this._removeLinkHandleChange = event => {\n      this.setState({\n        removeLink: event.target.value\n      });\n    };\n\n    this._addStartNodeHandleChange = event => {\n      const algoData = {\n        startNode: event.target.value,\n        keyNode: this.state.algoData.keyNode,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._addKeyNodeHandleChange = event => {\n      const algoData = {\n        startNode: this.state.algoData.startNode,\n        keyNode: event.target.value,\n        neighbors: this.state.algoData.neighbors,\n        algorithm: this.state.algoData.algorithm,\n        startAlgorithm: this.state.algoData.startAlgorithm,\n        stack: this.state.algoData.stack\n      };\n      this.setState({\n        algoData\n      });\n    };\n\n    this._handleAddKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickAppNode();\n      }\n    };\n\n    this._handlePreKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickPreNode();\n      }\n    };\n\n    this._handleRemoveKeyEnter = e => {\n      if (e.key === \"Enter\") {\n        this.onClickRemoveNode();\n      }\n    };\n\n    this._onRightClickNode = () => {\n      console.log(\"RIGHT CLICK\");\n    };\n\n    this.nodeSizeHandler = size => {\n      const config = this.state.config;\n      config.node.size = size;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.nodeColorHandler = color => {\n      const config = this.state.config;\n      config.node.color = color;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkSizeHandler = linkSize => {\n      const config = this.state.config;\n      config.link.strokeWidth = linkSize;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.linkColorHandler = linkColor => {\n      const config = this.state.config;\n      config.link.color = linkColor;\n      this.setState({\n        config: config\n      });\n    };\n\n    this.startAlgorithm = () => {\n      // don't need to check for other algorithms\n      // if (this.state.algoData.algorithm === \"search\") {\n      this.linearSearch();\n      /*\n      } else if (this.state.algoData.algorithm === \"bfs\") {\n        this.breadthFirstSearch();\n      } else if (this.state.algoData.algorithm === \"djk\") {\n      }\n      */\n    };\n\n    this.linearSearch = () => {\n      //console.log(this.state.algoData.keyNode)\n      var counter = 0;\n\n      for (let i = 0; i < this.state.data.nodes.length; i++) {\n        // check if keyNode string equals current node's id string\n        if (this.state.algoData.keyNode === this.state.data.nodes[i].id) {\n          console.log(\"found key node\");\n\n          for (let j = 0; j < 5; j++) {\n            setTimeout(() => this.foundTarget(this.state.algoData.keyNode), 1200 * counter);\n            counter++;\n          }\n\n          break;\n        }\n\n        setTimeout(() => this.highlightHandler(this.state.data.nodes[i].id, counter), 1000 * (counter + 1));\n        counter++;\n      }\n\n      this.resetState(counter);\n    };\n\n    this.rotateHandler = () => {\n      //provide index \"i\" to invoke a delay\n      this.state.data.nodes.forEach((node, i) => {\n        setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n      });\n    };\n\n    this.resetState = counter => {\n      const myP = new Promise(function (resolve, reject) {\n        // promise for time delay\n        setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n      });\n\n      this.sucessHandler = msg => {\n        // If things go well\n        console.log(msg); //check console for msg from resolve\n\n        const origNodes = this.state.data.nodes;\n        origNodes.forEach(node => {\n          node.color = this.state.nodeColor;\n          node.strokeColor = this.state.strokeColor;\n        });\n        this.updateListColor(this.state.listInfo);\n        this.setState({ ...(this.state.data.nodes = origNodes)\n        });\n      }; //calls when promise is resolved\n\n\n      myP.then(this.sucessHandler);\n    };\n\n    this.highlightHandler = id => {\n      console.log(id); //Get index of the node\n\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      }; //Set colors for new node\n\n      newNode.color = \"gold\";\n      newNode.strokeColor = \"orange\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes]; //store newNode updates at the proper index of the copy\n\n      nodes[nodeIndex] = newNode; //update original state with the new state\n\n      this.setState({ ...(this.state.data.nodes = nodes)\n      }); //call to reset back to original state\n      //this.resetState(origNode, nodeIndex);\n    };\n\n    this.foundTarget = id => {\n      //Get index of the node\n      const nodeIndex = this.state.data.nodes.findIndex(node => {\n        //return node index that matches the passed id\n        return node.id === id;\n      });\n      console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n      const origNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      const newNode = { ...this.state.data.nodes[nodeIndex]\n      };\n      origNode.color = \"gold\";\n      origNode.strokeColor = \"orange\"; //node outer color\n      //Set colors for new node\n\n      newNode.color = \"#28f655\";\n      newNode.strokeColor = \"#009f23\"; //node outer color\n      //create a copy of the entire nodes state\n\n      const nodes = [...this.state.data.nodes];\n\n      for (let i = 0; i < 5; i++) {\n        console.log(i); //store newNode updates at the proper index of the copy\n\n        nodes[nodeIndex] = newNode;\n        this.setState({ ...(this.state.data.nodes = nodes)\n        });\n        setTimeout(() => {\n          console.log(\"POP\");\n          nodes[nodeIndex] = origNode;\n          this.setState({ ...(this.state.data.nodes = nodes)\n          });\n        }, 500);\n      }\n    };\n\n    const _data = {\n      //nodeid gives each node a unique index\n      //next is our pointer\n      nodes: [{\n        id: \"Michael\",\n        nodeid: 1,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5\n      }],\n      links: [// { source: \"\", target: \"\" },\n      ]\n    }; //private info for linked list, head & tail refers to nodeid attribute of a node\n\n    const _listInfo = {\n      head: 1,\n      tail: 1\n    };\n    const _nodePos = {\n      preAcc: 0,\n      appAcc: 0\n    };\n    const listOrder = [\"Michael\"]; // Default configurations used by the Graph component\n\n    const _config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      //staticGraphWithDragAndDrop: true,\n      staticGraph: true,\n      directed: true,\n      rederLabel: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\"\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        type: \"STRAIGHT\"\n      }\n    };\n    const neighbors = [];\n    const _algoData = {\n      startNode: _data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: []\n    }; // Class states\n\n    this.state = {\n      config: _config,\n      generatedConfig: {},\n      data: _data,\n      algoData: _algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo: _listInfo,\n      nodePos: _nodePos,\n      headName: \"\",\n      tailName: \"\",\n      listOrder\n    };\n  } // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n  //LINK LIST METHODS\n\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const head = {\n      color: \"blue\",\n      margin: \"13px\"\n    };\n    const tail = {\n      color: \"red\",\n      margin: \"13px\"\n    };\n    return (// Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      React.createElement(\"div\", {\n        class: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 929\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"listInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        style: head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 931\n        },\n        __self: this\n      }, `Head: ${this.state.headName}`), React.createElement(\"h5\", {\n        style: tail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }, `Tail: ${this.state.tailName}`)), React.createElement(\"div\", {\n        class: \"leftWindow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 936\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Graph Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 937\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-gear\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 945\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 953\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 958\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-3 h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968\n        },\n        __self: this\n      }, \" Node Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"size\",\n        type: \"text\",\n        placeholder: \"Enter node size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeSizeHandler(document.getElementById(\"size\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 970\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984\n        },\n        __self: this\n      }, \" Node Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"color\",\n        type: \"text\",\n        name: \"nodeColor\",\n        placeholder: \"Enter node color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.nodeColorHandler(document.getElementById(\"color\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1001\n        },\n        __self: this\n      }, \" Link Size \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1002\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"linkSize\",\n        type: \"text\",\n        placeholder: \"Enter link size\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkSizeHandler(document.getElementById(\"linkSize\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1003\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1017\n        },\n        __self: this\n      }, \" Link Color \"), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1018\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L linkColor\",\n        id: \"linkColor\",\n        type: \"text\",\n        name: \"linkColor\",\n        placeholder: \"Enter link color\",\n        onKeyPress: e => {\n          if (e.key === \"Enter\") this.linkColorHandler(document.getElementById(\"linkColor\").value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1019\n        },\n        __self: this\n      })))), React.createElement(Dropdown, {\n        id: \"algo\",\n        className: \"pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Algorithm Settings\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1044\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-code-slash\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1062\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mt-2 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1063\n        },\n        __self: this\n      }, React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"direct\",\n        label: \"Directed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064\n        },\n        __self: this\n      }), React.createElement(Form.Check, {\n        className: \"checkboxes\",\n        type: \"checkbox\",\n        id: \"weight\",\n        label: \"Weighted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1070\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"node\",\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1077\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light h6 pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1078\n        },\n        __self: this\n      }, \" Target Value \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1079\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"L\",\n        id: \"keyNode\",\n        type: \"text\",\n        name: \"keyNode\",\n        placeholder: \"Enter as: name\",\n        value: this.state.algoData.keyNode,\n        onChange: this._addKeyNodeHandleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1080\n        },\n        __self: this\n      })), React.createElement(Button, {\n        className: \"submit mt-2 font-weight-normal\",\n        type: \"submit\" // start the Linear Search Algorithm\n        ,\n        variant: \"outline-success\",\n        onClick: () => this.startAlgorithm(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090\n        },\n        __self: this\n      }, \"Start Search\")))), React.createElement(Dropdown, {\n        id: \"graphConfig\",\n        className: \"LeftWindow pt-3 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1102\n        },\n        __self: this\n      }, React.createElement(Dropdown.Toggle, {\n        \"data-tip\": \"Nodes & Links\",\n        \"data-for\": \"buttons\",\n        variant: \"outline-danger\",\n        id: \"dropdown-basic\",\n        className: \"dropdown font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1110\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        class: \"bi bi-bounding-box-circles\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 16 16\",\n        fill: \"currentColor\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1111\n        },\n        __self: this\n      }, React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1119\n        },\n        __self: this\n      }), React.createElement(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        d: \"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\",\n        \"clip-rule\": \"evenodd\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1124\n        },\n        __self: this\n      })))), React.createElement(Dropdown.Menu, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1133\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1134\n        },\n        __self: this\n      }, \" Append node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1136\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickAppNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1137\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1143\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"addNodeName\",\n        placeholder: this.state.addNodePlaceholder,\n        value: this.state.addNodeName,\n        onChange: this._addNodeHandleChange,\n        onKeyPress: this._handleAddKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light pt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1157\n        },\n        __self: this\n      }, \" Prepend node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1158\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1159\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickPreNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1160\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166\n        },\n        __self: this\n      }, \" + \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"preNodeName\",\n        placeholder: this.state.preNodePlaceholder,\n        value: this.state.preNodeName,\n        onChange: this._preNodeHandleChange,\n        onKeyPress: this._handlePreKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1169\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        class: \"font-weight-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180\n        },\n        __self: this\n      }, \" Remove node: \"), React.createElement(\"div\", {\n        class: \"input-group mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"input-group-prepend\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1182\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.onClickRemoveNode,\n        type: \"button\",\n        class: \"btn btn-outline-danger pl-3 pr-2.5\",\n        id: \"button-addon1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1183\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        class: \"align-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189\n        },\n        __self: this\n      }, \" - \"))), React.createElement(\"input\", {\n        type: \"text\",\n        class: \"nodeInput\",\n        name: \"removeNodeName\",\n        placeholder: this.state.removeNodePlaceholder,\n        value: this.state.removeNodeName,\n        onChange: this._removeNodeHandleChange,\n        onKeyPress: this._handleRemoveKeyEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1192\n        },\n        __self: this\n      }))))), React.createElement(ReactTooltip, {\n        id: \"buttons\",\n        place: \"right\",\n        backgroundColor: \"#c34f6b\",\n        effect: \"solid\",\n        multiline: true,\n        className: \"extraClass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206\n        },\n        __self: this\n      }), React.createElement(Graph //Entry point for passing data to library to be displayed\n      , {\n        id: \"graph-id\",\n        data: this.state.data,\n        config: this.state.config,\n        onRightClickNode: this._onRightClickNode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1215\n        },\n        __self: this\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/acarn506/Desktop/SWE-Project/s2020-djma/algo_interact/frontend/src/components/Visualizer/LinkedList/LinkedListVisualizer.jsx"],"names":["React","Graph","ReactTooltip","Dropdown","Form","Button","GraphVisualizer","Component","constructor","props","appendNode","listInfo","state","newNode","getNewNode","listOrder","push","id","console","log","listOrfer","tailIndex","data","nodes","findIndex","node","nodeid","tail","tailNode","next","newNodes","setState","links","source","target","prependNode","upshift","headIndex","head","headNode","lastIndex","lastIndexOf","handleMiddleConnection","update","forceUpdate","onClickAddLink","updateConnection","removeName","removeNodeName","removeIndex","removeNode","length","newTailIndex","newTailNode","prevIndex","prevNode","middleIndex","link","removeLinkIndex","newLinks","modifyRemoveLink","updateMiddle","newLink","updateLink","filter","index","updateNode","updateLinks","updateListColor","forEach","color","nodeColor","headName","tailName","getCount","curCount","Math","floor","random","nodePosHandler","pos","newPos","nodePos","appAcc","preAcc","onClickAppNode","addNodeName","addNodePlaceholder","newid","x","screen","width","y","onClickPreNode","preNodeName","preNodePlaceholder","onClickRemoveNode","removeNodePlaceholder","l","middleNode","onClickRemoveLink","removeLink","split","e","trim","sourceExists","targetExists","i","removeLinkPlaceholder","algoData","neighbors","_addNodeHandleChange","event","value","_preNodeHandleChange","_removeNodeHandleChange","_addLinkHandleChange","addLink","_removeLinkHandleChange","_addStartNodeHandleChange","startNode","keyNode","algorithm","startAlgorithm","stack","_addKeyNodeHandleChange","_handleAddKeyEnter","key","_handlePreKeyEnter","_handleRemoveKeyEnter","_onRightClickNode","nodeSizeHandler","size","config","nodeColorHandler","linkSizeHandler","linkSize","strokeWidth","linkColorHandler","linkColor","linearSearch","counter","j","setTimeout","foundTarget","highlightHandler","resetState","rotateHandler","myP","Promise","resolve","reject","sucessHandler","msg","origNodes","strokeColor","then","nodeIndex","origNode","nodeHighlightBehavior","automaticRearrangeAfterDropNode","staticGraph","directed","rederLabel","height","window","innerHeight","innerWidth","highlightStrokeColor","symbolType","highlightColor","type","queue","generatedConfig","nodeIdToBeRemoved","addLinkPlaceholder","render","margin","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Graph from \"./Graph/graph/Graph\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Dropdown, Form, Button } from \"react-bootstrap\";\nimport \"./LinkedListVisualizer.css\";\n//import LeftWindow from \"../../LeftVdWindow/LeftWindow\";\n\n// Graph Visualizer component to be called in visualizer page.\nexport default class GraphVisualizer extends React.Component {\n  // constructor of the GraphVisualizer class. Contains the states:\n  // config: the configuration used for the Graph component\n  // generatedConfig:\n  // data: the data used for the Graph component\n  // nodeIdToBeRemoved: id of the node to be removed which is used in the onClickRemoveNode function\n  // addNodeName: a string used by the onClickAddNode function to set the new node name\n  // removeNodeName: a string used by the onClickRemoveNode function to delete the desired node\n  // addNodePlaceholder: a string used by the addNode input box\n  // removeNodePlaceholder: a string used by the removeNode input box\n  constructor(props) {\n    super(props);\n    // Default data used by the Graph component\n    const data = {\n      //nodeid gives each node a unique index\n      //next is our pointer\n      nodes: [\n        {\n          id: \"Michael\",\n          nodeid: 1,\n          next: null,\n          color: \"\",\n          // eslint-disable-next-line no-restricted-globals\n          x: screen.width / 2,\n          // eslint-disable-next-line no-restricted-globals\n          y: screen.width / 5,\n        },\n      ],\n      links: [\n        // { source: \"\", target: \"\" },\n      ],\n    };\n    //private info for linked list, head & tail refers to nodeid attribute of a node\n    const listInfo = {\n      head: 1,\n      tail: 1,\n    };\n\n    const nodePos = {\n      preAcc: 0,\n      appAcc: 0,\n    };\n\n    const listOrder = [\n      \"Michael\",\n\n    ]\n   \n    // Default configurations used by the Graph component\n    const config = {\n      nodeHighlightBehavior: true,\n      automaticRearrangeAfterDropNode: true,\n      //staticGraphWithDragAndDrop: true,\n      staticGraph: true,\n      directed: true,\n      rederLabel: true,\n      height: window.innerHeight * 0.86,\n      width: window.innerWidth,\n      node: {\n        color: \"#c34f6b\",\n        size: 500,\n        highlightStrokeColor: \"blue\",\n        symbolType: \"square\",\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        type: \"STRAIGHT\",\n      },\n    };\n\n    const neighbors = [];\n\n    const algoData = {\n      startNode: data.nodes[0].id,\n      keyNode: \"\",\n      neighbors: neighbors,\n      algorithm: \"search\",\n      stack: [],\n      queue: [],\n    };\n\n    // Class states\n    this.state = {\n      config,\n      generatedConfig: {},\n      data,\n      algoData,\n      nodeColor: \"#c34f6b\",\n      strokeColor: \"\",\n      nodeIdToBeRemoved: null,\n      addNodeName: \"\",\n      preNodeName: \"\",\n      removeNodeName: \"\",\n      addLink: \"\",\n      addNodePlaceholder: \"Enter node to append\",\n      preNodePlaceholder: \"Enter node to prepend\",\n      removeNodePlaceholder: \"Enter node to remove\",\n      addLinkPlaceholder: \"Enter as: source, target\",\n      removeLinkPlaceholder: \"Enter as: source, target\",\n      listInfo,\n      nodePos,\n      headName: \"\",\n      tailName: \"\",\n      listOrder\n    };\n  }\n\n  // Function called by the addButton. Makes sure the addNodeName state is not an\n  // empty string. Then checks that the data.nodes array in the state is NOT empty and\n  // that the length is greater than 0. Then it creates a new node with the value of the\n  // addNoneName and links it to a target node if given. Then it updates the state of\n  // data array of the class and resets the addNodeName and addNodePlaceholder.\n\n  //LINK LIST METHODS\n\n  appendNode = () => {\n    //get link list tail and the newest added node\n    let listInfo = this.state.listInfo;\n    let newNode = this.getNewNode();\n    this.state.listOrder.push(newNode.id)\n    console.log(\"List order\", this.state.listOrfer)\n    //find the new tail index\n    let tailIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === listInfo.tail;\n    });\n    //create instance of the tail node\n    const tailNode = {\n      ...this.state.data.nodes[tailIndex],\n    };\n    //assign current tail to new node\n    tailNode.next = newNode.nodeid;\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes];\n    //update copy of nodes\n    newNodes[tailIndex] = tailNode;\n    //update tail to point to the new tail node\n    listInfo.tail = newNode.nodeid;\n    //update state of nodes and tail state\n    this.setState({\n      listInfo: listInfo,\n    });\n\n    this.setState({\n      ...(this.state.data.nodes = newNodes),\n    });\n    //update link state\n    this.state.data.links.push({\n      source: tailNode.id,\n      target: newNode.id,\n    });\n  };\n\n  prependNode = () => {\n    //get link list head and the newest added node\n    let listInfo = this.state.listInfo;\n    let newNode = this.getNewNode();\n    this.state.listOrder.upshift(newNode.id)\n    console.log(\"List order\", this.state.listOrfer)\n    //find the current head node\n    let headIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === listInfo.head;\n    });\n    //create instance of the head node\n    const headNode = {\n      ...this.state.data.nodes[headIndex],\n    };\n    //update head positioning\n    newNode.next = headNode.nodeid;\n    listInfo.head = newNode.nodeid;\n    //copy of the array of nodes\n    let newNodes = [...this.state.data.nodes];\n    //get index of newNode and update node array\n    let lastIndex = newNodes.lastIndexOf();\n    newNodes[lastIndex] = newNode;\n\n    //update state of nodes\n    const data = { nodes: newNodes };\n    this.setState(data);\n    //head state\n    this.setState({\n      listInfo: listInfo,\n    });\n\n    this.state.data.links.push({\n      source: newNode.id,\n      target: headNode.id,\n    });\n  };\n  //Add links between two nodes when middle is removed\n  handleMiddleConnection = (update) => {\n    this.forceUpdate(() => this.onClickAddLink(update));\n    //setTimeout(() => this.onClickAddLink(update), 500);\n  };\n\n  //Helper function for remove node\n  updateConnection = () => {\n    console.log(\"REMOVE\", this.state.data.nodes, this.state.listInfo);\n    let removeName = this.state.removeNodeName;\n    let listInfo = this.state.listInfo;\n\n    let removeIndex = this.state.data.nodes.findIndex((node) => {\n      return node.id === removeName;\n    });\n\n    let newNodes = [...this.state.data.nodes];\n\n    let removeNode = newNodes[removeIndex];\n\n    if (this.state.data.nodes.length === 0) {\n      console.log(\"Remove last node\");\n      console.log(\"Length\", this.state.data.nodes.length);\n      listInfo.head = null;\n      listInfo.tail = null;\n    } else if (listInfo.head === removeNode.nodeid) {\n      console.log(\"Remove Head\");\n      listInfo.head = removeNode.next;\n      removeNode.next = null;\n      newNodes[removeIndex] = removeNode;\n    } else if (listInfo.tail === removeNode.nodeid) {\n      console.log(\"Remove Tail\");\n      let newTailIndex = this.state.data.nodes.findIndex((node) => {\n        return node.next === removeNode.nodeid;\n      });\n\n      let newTailNode = newNodes[newTailIndex];\n\n      listInfo.tail = newTailNode.nodeid;\n      newTailNode.next = null;\n      newNodes[newTailIndex] = newTailNode;\n    } else {\n      console.log(\"Remove middle node\");\n      let prevIndex = this.state.data.nodes.findIndex((node) => {\n        return node.next === removeNode.nodeid;\n      });\n      let prevNode = newNodes[prevIndex];\n      prevNode.next = removeNode.next;\n      removeNode.next = null;\n      newNodes[prevIndex] = prevNode;\n      newNodes[removeIndex] = removeNode;\n\n      let middleIndex = this.state.data.links.findIndex((link) => {\n        return link.target === removeNode.id;\n      });\n\n      let removeLinkIndex = this.state.data.links.findIndex((link) => {\n        return link.source === removeNode.id;\n      });\n      //update link\n      let newLinks = [...this.state.data.links];\n\n      let modifyRemoveLink = newLinks[removeLinkIndex];\n\n      newLinks[middleIndex] = {\n        ...newLinks[middleIndex],\n        target: modifyRemoveLink.target,\n      };\n\n      let updateMiddle = newLinks[middleIndex];\n      //remove link\n      let newLink = [...this.state.data.links];\n\n      let updateLink = newLink.filter((node, index) => {\n        return index !== middleIndex;\n      });\n\n      console.log(\"updated middle\", updateLink);\n\n      this.setState({\n        ...(this.state.data.links = updateLink),\n      });\n\n      this.forceUpdate(() => this.onClickAddLink(updateMiddle));\n    }\n\n    //remove node\n    let updateNode = newNodes.filter((node, index) => {\n      return index !== removeIndex;\n    });\n\n    this.setState({\n      ...(this.state.data.nodes = updateNode),\n    });\n\n    this.setState({\n      listInfo: listInfo,\n    });\n\n    let links = [...this.state.data.links];\n\n    let removeLinkIndex = links.findIndex((link) => {\n      return link.source === removeNode.id;\n    });\n    //remove link\n    let updateLinks = links.filter((link, index) => {\n      return index !== removeLinkIndex;\n    });\n\n    this.setState({\n      ...(this.state.data.links = updateLinks),\n    });\n\n    console.log(\"Link Update\", this.state.data.links);\n  };\n\n  //set head and tail colors\n  updateListColor = (index) => {\n    console.log(\"updateColor\", this.state.data.nodes, this.state.listInfo);\n    //get index of head and tail\n    let headIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === index.head;\n    });\n\n    let tailIndex = this.state.data.nodes.findIndex((node) => {\n      return node.nodeid === index.tail;\n    });\n    //copy of array\n    let newNodes = [...this.state.data.nodes];\n    //set all nodes to original color\n    newNodes.forEach((node) => {\n      node.color = this.state.nodeColor;\n    });\n    //update new head or tail with color\n    newNodes[headIndex].color = \"blue\";\n    newNodes[tailIndex].color = \"red\";\n    //update display head and tail\n    let headName = newNodes[headIndex].id;\n    let tailName = newNodes[tailIndex].id;\n\n    //update state of nodes\n    this.setState({\n      ...(this.state.data.nodes = newNodes),\n    });\n\n    this.setState({\n      headName: headName,\n      tailName: tailName,\n    });\n  };\n\n  //used for assigning new nodes with a unique node id\n  getCount = () => {\n    let curCount =\n      this.state.data.nodes.length + Math.floor(Math.random() * 100);\n    curCount = curCount + Math.floor(Math.random() * 100);\n    return curCount;\n  };\n  //retrieve new node\n  getNewNode = () => {\n    let length = this.state.data.nodes.length;\n    return this.state.data.nodes[length - 1];\n  };\n\n  nodePosHandler = (pos) => {\n    let newPos = 0;\n    let nodePos = this.state.nodePos;\n    if (pos === \"app\") {\n      newPos = this.state.nodePos.appAcc;\n      newPos += 1;\n      nodePos.appAcc = newPos;\n      this.setState({\n        nodePos: nodePos,\n      });\n    } else {\n      newPos = this.state.nodePos.preAcc;\n      newPos += 1;\n      nodePos.preAcc = newPos;\n      this.setState({\n        nodePos: nodePos,\n      });\n    }\n  };\n  //appends or prepends node\n  onClickAppNode = () => {\n    console.log(\"APPEND\", this.state.data.nodes, this.state.listInfo);\n    // Checks if the addNodeName is an empty string\n    if (this.state.addNodeName === \"\") {\n      this.setState({\n        addNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.addNodeName}`;\n      this.nodePosHandler(\"app\");\n      //create unique node id\n      let newid = this.getCount();\n\n      //add node id\n      this.state.data.nodes.push({\n        id: newNode,\n        nodeid: newid,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2 + 120 * this.state.nodePos.appAcc,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5,\n      });\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.appendNode();\n\n    //call to update head and tail color\n    let index = this.state.listInfo;\n    this.updateListColor(index);\n\n    //console test -> please use for debug\n    console.log(\"nodes\", this.state.data.nodes);\n    console.log(\"listInfo\", this.state.listInfo);\n\n    this.setState({\n      addNodeName: \"\",\n      addNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links);\n  };\n\n  onClickPreNode = () => {\n    console.log(\"PREPEND\", this.state.data.nodes, this.state.listInfo);\n    // Checks if the addNodeName is an empty string\n    if (this.state.preNodeName === \"\") {\n      this.setState({\n        preNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n\n    // Adds node to the nodes array in the state's data\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      const newNode = `${this.state.preNodeName}`;\n      this.nodePosHandler(\"pre\");\n      //create unique node id\n      let newid = this.getCount();\n      //add node id\n      this.state.data.nodes.push({\n        id: newNode,\n        nodeid: newid,\n        next: null,\n        color: \"\",\n        // eslint-disable-next-line no-restricted-globals\n        x: screen.width / 2 - 120 * this.state.nodePos.preAcc,\n        // eslint-disable-next-line no-restricted-globals\n        y: screen.width / 5,\n      });\n\n      this.setState({\n        data: this.state.data,\n      });\n    } else {\n      // 1st node\n      const data = {\n        nodes: [{ id: \"Node 1\" }],\n        links: [],\n      };\n\n      this.setState({ data });\n    }\n    //decides to use either append or prepend based on button event\n    this.prependNode();\n\n    //call to update head and tail color\n    let index = this.state.listInfo;\n    this.updateListColor(index);\n\n    //console test -> please use for debug\n    console.log(\"nodes\", this.state.data.nodes);\n    console.log(\"listInfo\", this.state.listInfo);\n\n    this.setState({\n      preNodeName: \"\",\n      preNodePlaceholder: \"Enter node to add\",\n    });\n    console.log(\"Links\", this.state.data.links);\n  };\n\n  // Function called by the removeNode button. Makes sure the removeNodeName is not an empty string.\n  // Then, makes sure the data.nodes array in the class state is NOT empty and the data.nodes.length\n  // is greater than 0. Then filters the original nodes and links arrays in the data array using the\n  // removeNodeName of the class state. THen update the class data state along with resetting\n  // removeNodeName and removeNodePlaceholder.\n  onClickRemoveNode = () => {\n    console.log(\"REMOVENode\", this.state.data.nodes, this.state.listInfo);\n\n    if (this.state.removeNodeName === \"\") {\n      this.setState({\n        removeNodePlaceholder: \"Please enter a value!\",\n      });\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length >= 1) {\n      const nodes = this.state.data.nodes.filter(\n        (l) => l.id !== this.state.removeNodeName\n      );\n      const links = this.state.data.links.filter(\n        (l) =>\n          l.source !== this.state.removeNodeName &&\n          l.target !== this.state.removeNodeName\n      );\n      const data = { nodes, links };\n\n      //remove node helper function\n      this.updateConnection();\n      //update color state\n      let index = this.state.listInfo;\n      this.updateListColor(index);\n\n      //test\n      console.log(\"nodes\", this.state.data.nodes);\n      console.log(\"listInfo\", this.state.listInfo);\n\n      this.setState({\n        data,\n        removeNodeName: \"\",\n        removeNodePlaceholder: \"Enter node to remove\",\n      });\n    }\n  };\n\n  onClickAddLink = (middleNode) => {\n    //creat copy \n    let link = this.state.data.links\n    link.push({source: middleNode.source, target: middleNode.target})\n    //update links with copy\n    this.setState({\n      links : link\n    })\n    /*\n    if (this.state.addLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n\n      let source, target;\n      [source, target] = this.state.addLink.split(/[ ,]+/).filter(function (e) {\n        return e.trim().length > 0;\n      });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          addLink: \"\",\n          addLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      } */\n    /*\n      for (var j = 0; j < this.state.data.links.length; j++) {\n        if (\n          this.state.data.links[j].source === source &&\n          this.state.data.links[j].target === target\n        ) {\n          console.log(\"ALREADY EXISTS!\");\n          this.setState({\n            addLink: \"\",\n            addLinkPlaceholder: \"Enter as: source, target\",\n          });\n          return;\n        }\n      } */\n    /*\n    this.state.data.links.push({\n      source: middleNode.source,\n      target: middleNode.target,\n    }); */\n  };\n\n  onClickRemoveLink = () => {\n    if (this.state.removeLink === \"\") {\n      return;\n    }\n    if (this.state.data.nodes && this.state.data.nodes.length) {\n      let source, target;\n      [source, target] = this.state.removeLink\n        .split(/[ ,]+/)\n        .filter(function (e) {\n          return e.trim().length > 0;\n        });\n\n      var sourceExists, targetExists;\n      sourceExists = targetExists = false;\n\n      for (var i = 0; i < this.state.data.nodes.length; i++) {\n        if (this.state.data.nodes[i].id === source) {\n          sourceExists = true;\n        }\n        if (this.state.data.nodes[i].id === target) {\n          targetExists = true;\n        }\n      }\n\n      if (!sourceExists || !targetExists) {\n        console.log(\"NODE DOES NOT EXIST!\");\n        this.setState({\n          removeLink: \"\",\n          removeLinkPlaceholder: \"Enter as: source, target\",\n        });\n        return;\n      }\n\n      const links = this.state.data.links.filter(\n        (l) => l.source !== source && l.target !== target\n      );\n\n      const data = { nodes: this.state.data.nodes, links };\n\n      for (let i = 0; i < this.state.algoData.neighbors.length; i++) {\n        if (source in this.state.algoData.neighbors[i]) {\n          this.state.algoData.neighbors[i][\n            source\n          ] = this.state.algoData.neighbors[i][source].filter(\n            (l) => l !== target\n          );\n        }\n      }\n\n      this.setState({\n        data: data,\n        removeLink: \"\",\n        removeLinkPlaceholder: \"Enter as: source, target\",\n      });\n    }\n  };\n\n  // Handler function that is used by the addNode input box, keeps track of the changes\n  // and then updates the addNodeName of the state accordingly.\n  _addNodeHandleChange = (event) => {\n    this.setState({ addNodeName: event.target.value });\n  };\n\n  _preNodeHandleChange = (event) => {\n    this.setState({ preNodeName: event.target.value });\n  };\n\n  // Handler function that is used by the removeNode input box, keeps track of the changes\n  // and then updates the removeNodeName of the state accordingly.\n  _removeNodeHandleChange = (event) => {\n    this.setState({ removeNodeName: event.target.value });\n  };\n\n  _addLinkHandleChange = (event) => {\n    this.setState({ addLink: event.target.value });\n  };\n\n  _removeLinkHandleChange = (event) => {\n    this.setState({ removeLink: event.target.value });\n  };\n\n  _addStartNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: event.target.value,\n      keyNode: this.state.algoData.keyNode,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n\n  _addKeyNodeHandleChange = (event) => {\n    const algoData = {\n      startNode: this.state.algoData.startNode,\n      keyNode: event.target.value,\n      neighbors: this.state.algoData.neighbors,\n      algorithm: this.state.algoData.algorithm,\n      startAlgorithm: this.state.algoData.startAlgorithm,\n      stack: this.state.algoData.stack,\n    };\n\n    this.setState({ algoData });\n  };\n  // Handler function that listens to the Remove key press\n  // and calls the onClickAppNode function.\n  _handleAddKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickAppNode();\n    }\n  };\n\n  _handlePreKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickPreNode();\n    }\n  };\n\n  // Handler function that listens to the Enter key press\n  // and calls the onClickRemoveNode function.\n  _handleRemoveKeyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.onClickRemoveNode();\n    }\n  };\n\n  _onRightClickNode = () => {\n    console.log(\"RIGHT CLICK\");\n  };\n\n  //Functions for state handling\n  nodeSizeHandler = (size) => {\n    const config = this.state.config;\n\n    config.node.size = size;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  nodeColorHandler = (color) => {\n    const config = this.state.config;\n\n    config.node.color = color;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkSizeHandler = (linkSize) => {\n    const config = this.state.config;\n\n    config.link.strokeWidth = linkSize;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  linkColorHandler = (linkColor) => {\n    const config = this.state.config;\n\n    config.link.color = linkColor;\n\n    this.setState({\n      config: config,\n    });\n  };\n\n  startAlgorithm = () => {\n    // don't need to check for other algorithms\n    // if (this.state.algoData.algorithm === \"search\") {\n    this.linearSearch();\n    /*\n    } else if (this.state.algoData.algorithm === \"bfs\") {\n      this.breadthFirstSearch();\n    } else if (this.state.algoData.algorithm === \"djk\") {\n    }\n    */\n  };\n\n  linearSearch = () => {\n    //console.log(this.state.algoData.keyNode)\n    var counter = 0;\n    for (let i = 0; i < this.state.data.nodes.length; i++) {\n      // check if keyNode string equals current node's id string\n      if (this.state.algoData.keyNode === this.state.data.nodes[i].id) {\n        console.log(\"found key node\");\n        for (let j = 0; j < 5; j++) {\n          setTimeout(\n            () => this.foundTarget(this.state.algoData.keyNode),\n            1200 * counter\n          );\n          counter++;\n        }\n        break;\n      }\n      setTimeout(\n        () => this.highlightHandler(this.state.data.nodes[i].id, counter),\n        1000 * (counter + 1)\n      );\n      counter++;\n    }\n    this.resetState(counter);\n  };\n\n  //Node Highlight Rotation Test -- Use Algorithm functions in replace\n  rotateHandler = () => {\n    //provide index \"i\" to invoke a delay\n    this.state.data.nodes.forEach((node, i) => {\n      setTimeout(() => this.highlightHandler(node.id, i), 1500 * (i + 1));\n    });\n  };\n\n  //reset node color back to original\n  resetState = (counter) => {\n    const myP = new Promise(function (resolve, reject) {\n      // promise for time delay\n      setTimeout(() => resolve(\"Successful Switch!\"), 2000 * (counter - 2));\n    });\n\n    this.sucessHandler = (msg) => {\n      // If things go well\n      console.log(msg); //check console for msg from resolve\n      const origNodes = this.state.data.nodes;\n\n      origNodes.forEach((node) => {\n        node.color = this.state.nodeColor;\n        node.strokeColor = this.state.strokeColor;\n      });\n      this.updateListColor(this.state.listInfo);\n\n      this.setState({\n        ...(this.state.data.nodes = origNodes),\n      });\n    };\n    //calls when promise is resolved\n    myP.then(this.sucessHandler);\n  };\n\n  //Highlight Node -> Parameter: Node id\n  highlightHandler = (id) => {\n    console.log(id);\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    //Set colors for new node\n    newNode.color = \"gold\";\n    newNode.strokeColor = \"orange\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n    //store newNode updates at the proper index of the copy\n    nodes[nodeIndex] = newNode;\n\n    //update original state with the new state\n    this.setState({\n      ...(this.state.data.nodes = nodes),\n    });\n    //call to reset back to original state\n    //this.resetState(origNode, nodeIndex);\n  };\n\n  foundTarget = (id) => {\n    //Get index of the node\n    const nodeIndex = this.state.data.nodes.findIndex((node) => {\n      //return node index that matches the passed id\n      return node.id === id;\n    });\n    console.log(\"Found target \" + this.state.data.nodes[nodeIndex].id);\n\n    const origNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    const newNode = {\n      ...this.state.data.nodes[nodeIndex],\n    };\n\n    origNode.color = \"gold\";\n    origNode.strokeColor = \"orange\"; //node outer color\n\n    //Set colors for new node\n    newNode.color = \"#28f655\";\n    newNode.strokeColor = \"#009f23\"; //node outer color\n\n    //create a copy of the entire nodes state\n    const nodes = [...this.state.data.nodes];\n\n    for (let i = 0; i < 5; i++) {\n      console.log(i);\n      //store newNode updates at the proper index of the copy\n      nodes[nodeIndex] = newNode;\n      this.setState({\n        ...(this.state.data.nodes = nodes),\n      });\n\n      setTimeout(() => {\n        console.log(\"POP\");\n        nodes[nodeIndex] = origNode;\n        this.setState({ ...(this.state.data.nodes = nodes) });\n      }, 500);\n    }\n  };\n\n  // Main function of the React component. Returns what is displayed to the user. This includes\n  // the left window, right window, the traversal log and the main graph visualizer component.\n  render() {\n    const head = { color: \"blue\", margin: \"13px\" };\n    const tail = { color: \"red\", margin: \"13px\" };\n\n    return (\n      // Main display which contains the leftWindow, rightWindow, and the Graph Visualizer\n      <div class=\"box\">\n        <div className=\"listInfo\">\n          <h5 style={head}>{`Head: ${this.state.headName}`}</h5>\n          <h5 style={tail}>{`Tail: ${this.state.tailName}`}</h5>\n        </div>\n\n        <div class=\"leftWindow\">\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Graph Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-gear\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8.837 1.626c-.246-.835-1.428-.835-1.674 0l-.094.319A1.873 1.873 0 014.377 3.06l-.292-.16c-.764-.415-1.6.42-1.184 1.185l.159.292a1.873 1.873 0 01-1.115 2.692l-.319.094c-.835.246-.835 1.428 0 1.674l.319.094a1.873 1.873 0 011.115 2.693l-.16.291c-.415.764.42 1.6 1.185 1.184l.292-.159a1.873 1.873 0 012.692 1.116l.094.318c.246.835 1.428.835 1.674 0l.094-.319a1.873 1.873 0 012.693-1.115l.291.16c.764.415 1.6-.42 1.184-1.185l-.159-.291a1.873 1.873 0 011.116-2.693l.318-.094c.835-.246.835-1.428 0-1.674l-.319-.094a1.873 1.873 0 01-1.115-2.692l.16-.292c.415-.764-.42-1.6-1.185-1.184l-.291.159A1.873 1.873 0 018.93 1.945l-.094-.319zm-2.633-.283c.527-1.79 3.065-1.79 3.592 0l.094.319a.873.873 0 001.255.52l.292-.16c1.64-.892 3.434.901 2.54 2.541l-.159.292a.873.873 0 00.52 1.255l.319.094c1.79.527 1.79 3.065 0 3.592l-.319.094a.873.873 0 00-.52 1.255l.16.292c.893 1.64-.902 3.434-2.541 2.54l-.292-.159a.873.873 0 00-1.255.52l-.094.319c-.527 1.79-3.065 1.79-3.592 0l-.094-.319a.873.873 0 00-1.255-.52l-.292.16c-1.64.893-3.433-.902-2.54-2.541l.159-.292a.873.873 0 00-.52-1.255l-.319-.094c-1.79-.527-1.79-3.065 0-3.592l.319-.094a.873.873 0 00.52-1.255l-.16-.292c-.892-1.64.902-3.433 2.541-2.54l.292.159a.873.873 0 001.255-.52l.094-.319z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 5.754a2.246 2.246 0 100 4.492 2.246 2.246 0 000-4.492zM4.754 8a3.246 3.246 0 116.492 0 3.246 3.246 0 01-6.492 0z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-3 h6\"> Node Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"size\"\n                  type=\"text\"\n                  placeholder=\"Enter node size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeSizeHandler(\n                        document.getElementById(\"size\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Node Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"color\"\n                  type=\"text\"\n                  name=\"nodeColor\"\n                  placeholder=\"Enter node color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.nodeColorHandler(\n                        document.getElementById(\"color\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Size </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L\"\n                  id=\"linkSize\"\n                  type=\"text\"\n                  placeholder=\"Enter link size\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkSizeHandler(\n                        document.getElementById(\"linkSize\").value\n                      );\n                  }}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light h6\"> Link Color </h5>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <input\n                  class=\"L linkColor\"\n                  id=\"linkColor\"\n                  type=\"text\"\n                  name=\"linkColor\"\n                  placeholder=\"Enter link color\"\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\")\n                      this.linkColorHandler(\n                        document.getElementById(\"linkColor\").value\n                      );\n                  }}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"algo\" className=\"pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Algorithm Settings\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-code-slash\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M4.854 4.146a.5.5 0 010 .708L1.707 8l3.147 3.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0zm6.292 0a.5.5 0 000 .708L14.293 8l-3.147 3.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 00-.708 0zm-.999-3.124a.5.5 0 01.33.625l-4 13a.5.5 0 01-.955-.294l4-13a.5.5 0 01.625-.33z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <div className=\"mt-2 mb-2\">\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"direct\"\n                  label=\"Directed\"\n                />\n                <Form.Check\n                  className=\"checkboxes\"\n                  type=\"checkbox\"\n                  id=\"weight\"\n                  label=\"Weighted\"\n                />\n              </div>\n              <div id=\"node\" class=\"input-group mb-3\">\n                <h5 class=\"font-weight-light h6 pt-3\"> Target Value </h5>\n                <div class=\"input-group mb-3\">\n                  <input\n                    class=\"L\"\n                    id=\"keyNode\"\n                    type=\"text\"\n                    name=\"keyNode\"\n                    placeholder=\"Enter as: name\"\n                    value={this.state.algoData.keyNode}\n                    onChange={this._addKeyNodeHandleChange}\n                  />\n                </div>\n                <Button\n                  className=\"submit mt-2 font-weight-normal\"\n                  type=\"submit\" // start the Linear Search Algorithm\n                  variant=\"outline-success\"\n                  onClick={() => this.startAlgorithm()}\n                >\n                  Start Search\n                </Button>\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <Dropdown id=\"graphConfig\" className=\"LeftWindow pt-3 ml-2\">\n            <Dropdown.Toggle\n              data-tip=\"Nodes & Links\"\n              data-for=\"buttons\"\n              variant=\"outline-danger\"\n              id=\"dropdown-basic\"\n              className=\"dropdown font-weight-light\"\n            >\n              <div class=\"icon\">\n                <svg\n                  class=\"bi bi-bounding-box-circles\"\n                  width=\"1em\"\n                  height=\"1em\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"currentColor\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M12.5 2h-9V1h9v1zm-10 1.5v9h-1v-9h1zm11 9v-9h1v9h-1zM3.5 14h9v1h-9v-1z\"\n                    clip-rule=\"evenodd\"\n                  />\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M14 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zM2 3a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4zm0 11a1 1 0 100-2 1 1 0 000 2zm0 1a2 2 0 100-4 2 2 0 000 4z\"\n                    clip-rule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <h5 class=\"font-weight-light pt-2\"> Append node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickAppNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"addNodeName\"\n                  placeholder={this.state.addNodePlaceholder}\n                  value={this.state.addNodeName}\n                  onChange={this._addNodeHandleChange}\n                  onKeyPress={this._handleAddKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light pt-2\"> Prepend node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickPreNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> + </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"preNodeName\"\n                  placeholder={this.state.preNodePlaceholder}\n                  value={this.state.preNodeName}\n                  onChange={this._preNodeHandleChange}\n                  onKeyPress={this._handlePreKeyEnter}\n                />\n              </div>\n\n              <h5 class=\"font-weight-light\"> Remove node: </h5>\n              <div class=\"input-group mb-3\">\n                <div class=\"input-group-prepend\">\n                  <button\n                    onClick={this.onClickRemoveNode}\n                    type=\"button\"\n                    class=\"btn btn-outline-danger pl-3 pr-2.5\"\n                    id=\"button-addon1\"\n                  >\n                    <h6 class=\"align-middle\"> - </h6>\n                  </button>\n                </div>\n                <input\n                  type=\"text\"\n                  class=\"nodeInput\"\n                  name=\"removeNodeName\"\n                  placeholder={this.state.removeNodePlaceholder}\n                  value={this.state.removeNodeName}\n                  onChange={this._removeNodeHandleChange}\n                  onKeyPress={this._handleRemoveKeyEnter}\n                />\n              </div>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n\n        <ReactTooltip\n          id=\"buttons\"\n          place=\"right\"\n          backgroundColor=\"#c34f6b\"\n          effect=\"solid\"\n          multiline={true}\n          className=\"extraClass\"\n        />\n\n        <Graph\n          //Entry point for passing data to library to be displayed\n          id=\"graph-id\"\n          data={this.state.data}\n          config={this.state.config}\n          onRightClickNode={this._onRightClickNode}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}