{"ast":null,"code":"/**\n * @module utils\n * @description\n * Offers a series of generic methods for object manipulation, and other operations\n * that are common across rd3g such as error logging.\n */ // This variable assures that recursive methods such as merge and isDeepEqual do not fall on\n// circular JSON structure evaluation.\nvar MAX_DEPTH=20;/**\n * Checks whether a certain object property is from object type and is a non empty object.\n * @param  {Object} o - the object.\n * @param  {string} k - the object property.\n * @returns {boolean} returns true if o[k] is an non empty object.\n * @memberof utils\n */function _isPropertyNestedObject(o,k){return!!o&&Object.prototype.hasOwnProperty.call(o,k)&&typeof o[k]===\"object\"&&o[k]!==null&&!isEmptyObject(o[k]);}/**\n * Generic deep comparison between javascript simple or complex objects.\n * @param  {Object} o1 - one of the objects to be compared.\n * @param  {Object} o2 - second object to compare with first.\n * @param  {number} [_depth=0] - this parameter serves only for internal usage.\n * @returns {boolean} returns true if o1 and o2 have exactly the same content, or are exactly the same object reference.\n * @memberof utils\n */function isDeepEqual(o1,o2){var _depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var diffs=[];if(_depth===0&&o1===o2){return true;}if(isEmptyObject(o1)&&!isEmptyObject(o2)||!isEmptyObject(o1)&&isEmptyObject(o2)){return false;}var o1Keys=Object.keys(o1);var o2Keys=Object.keys(o2);if(o1Keys.length!==o2Keys.length){return false;}for(var _i=0,_o1Keys=o1Keys;_i<_o1Keys.length;_i++){var k=_o1Keys[_i];var nestedO=_isPropertyNestedObject(o1,k)&&_isPropertyNestedObject(o2,k);if(nestedO&&_depth<MAX_DEPTH){diffs.push(isDeepEqual(o1[k],o2[k],_depth+1));}else{var r=isEmptyObject(o1[k])&&isEmptyObject(o2[k])||Object.prototype.hasOwnProperty.call(o2,k)&&o2[k]===o1[k];diffs.push(r);if(!r){break;}}}return diffs.indexOf(false)===-1;}/**\n * Checks whether or not a certain object is empty.\n * NOTE: If the passed parameter is not an object the method return false.\n * @param  {Object}  o - object whom emptiness we want to check.\n * @returns {boolean} true if the given object is n ft and object and is empty.\n * @memberof utils\n */function isEmptyObject(o){return!!o&&typeof o===\"object\"&&!Object.keys(o).length;}/**\n * Function to deep clone plain javascript objects.\n * @param {Object} o - the object to clone.\n * @param {Object} _clone - carries the cloned output throughout the\n * recursive calls. Parameter serves only for internal usage.\n * @param {number} _depth - this parameter serves only for internal usage.\n * @returns {Object} - the cloned object.\n * @memberof utils\n */function deepClone(o){var _clone=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var oKeys=Object.keys(o);for(var _i2=0,_oKeys=oKeys;_i2<_oKeys.length;_i2++){var k=_oKeys[_i2];var nested=_isPropertyNestedObject(o,k);_clone[k]=nested&&_depth<MAX_DEPTH?deepClone(o[k],{},_depth+1):o[k];}return _clone;}/**\n * This function merges two objects o1 and o2, where o2 properties override existent o1 properties, and\n * if o2 doesn't posses some o1 property the fallback will be the o1 property.\n * @param  {Object} o1 - object.\n * @param  {Object} o2 - object that will override o1 properties.\n * @param  {int} [_depth=0] - the depth at which we are merging the object.\n * @returns {Object} object that is the result of merging o1 and o2, being o2 properties priority overriding\n * existent o1 properties.\n * @memberof utils\n */function merge(){var o1=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var o2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _depth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var o={};if(Object.keys(o1||{}).length===0){return o2&&!isEmptyObject(o2)?o2:{};}for(var _i3=0,_Object$keys=Object.keys(o1);_i3<_Object$keys.length;_i3++){var k=_Object$keys[_i3];var nestedO=!!(o2[k]&&typeof o2[k]===\"object\"&&typeof o1[k]===\"object\"&&_depth<MAX_DEPTH);if(nestedO){(function(){var r=merge(o1[k],o2[k],_depth+1);o[k]=Object.prototype.hasOwnProperty.call(o1[k],\"length\")&&Object.prototype.hasOwnProperty.call(o2[k],\"length\")?Object.keys(r).map(function(rk){return r[rk];}):r;})();}else{o[k]=Object.prototype.hasOwnProperty.call(o2,k)?o2[k]:o1[k];}}return o;}/**\n * Create new object from the inputted one only with the props passed\n * in the props list.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we want to pick from o.\n * @returns {Object} the object resultant from the picking operation.\n * @memberof utils\n */function pick(o){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];return props.reduce(function(acc,k){if(Object.prototype.hasOwnProperty.call(o,k)){acc[k]=o[k];}return acc;},{});}/**\n * Picks all props except the ones passed in the props array.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we DON'T want to pick from o.\n * @returns {Object} the object resultant from the anti picking operation.\n * @memberof utils\n */function antiPick(o){var props=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var wanted=Object.keys(o).filter(function(k){return!props.includes(k);});return pick(o,wanted);}/**\n * Helper function for customized error logging.\n * @param  {string} component - the name of the component where the error is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Error} the thrown error.\n * @memberof utils\n */function throwErr(component,msg){var error=\"react-d3-graph :: \".concat(component,\" :: \").concat(msg);throw Error(error);}/**\n * Helper function for customized warning logging.\n * @param  {string} component - the name of the component where the warning is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Warning} the thrown warning.\n * @memberof utils\n */function throwWarning(component,msg){var warning=\"react-d3-graph :: \".concat(component,\" :: \").concat(msg);console.warn(warning);}export{isDeepEqual,isEmptyObject,deepClone,merge,pick,antiPick,throwErr,throwWarning};","map":{"version":3,"sources":["/Users/anthonycarnero/Documents/GitHub/algointeract_App/frontend/src/components/Visualizer/Tree/Graph/utils.js"],"names":["MAX_DEPTH","_isPropertyNestedObject","o","k","Object","prototype","hasOwnProperty","call","isEmptyObject","isDeepEqual","o1","o2","_depth","diffs","o1Keys","keys","o2Keys","length","nestedO","push","r","indexOf","deepClone","_clone","oKeys","nested","merge","map","rk","pick","props","reduce","acc","antiPick","wanted","filter","includes","throwErr","component","msg","error","Error","throwWarning","warning","console","warn"],"mappings":"AAAA;;;;;IAOA;AACA;AACA,GAAMA,CAAAA,SAAS,CAAG,EAAlB,CAEA;;;;;;GAOA,QAASC,CAAAA,uBAAT,CAAiCC,CAAjC,CAAoCC,CAApC,CAAuC,CACrC,MACE,CAAC,CAACD,CAAF,EACAE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,CAArC,CAAwCC,CAAxC,CADA,EAEA,MAAOD,CAAAA,CAAC,CAACC,CAAD,CAAR,GAAgB,QAFhB,EAGAD,CAAC,CAACC,CAAD,CAAD,GAAS,IAHT,EAIA,CAACK,aAAa,CAACN,CAAC,CAACC,CAAD,CAAF,CALhB,CAOD,CAED;;;;;;;GAQA,QAASM,CAAAA,WAAT,CAAqBC,EAArB,CAAyBC,EAAzB,CAAyC,IAAZC,CAAAA,MAAY,2DAAH,CAAG,CACvC,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA,GAAID,MAAM,GAAK,CAAX,EAAgBF,EAAE,GAAKC,EAA3B,CAA+B,CAC7B,MAAO,KAAP,CACD,CAED,GACGH,aAAa,CAACE,EAAD,CAAb,EAAqB,CAACF,aAAa,CAACG,EAAD,CAApC,EACC,CAACH,aAAa,CAACE,EAAD,CAAd,EAAsBF,aAAa,CAACG,EAAD,CAFtC,CAGE,CACA,MAAO,MAAP,CACD,CAED,GAAMG,CAAAA,MAAM,CAAGV,MAAM,CAACW,IAAP,CAAYL,EAAZ,CAAf,CACA,GAAMM,CAAAA,MAAM,CAAGZ,MAAM,CAACW,IAAP,CAAYJ,EAAZ,CAAf,CAEA,GAAIG,MAAM,CAACG,MAAP,GAAkBD,MAAM,CAACC,MAA7B,CAAqC,CACnC,MAAO,MAAP,CACD,CAED,qBAAcH,MAAd,wBAAsB,CAAjB,GAAIX,CAAAA,CAAC,YAAL,CACH,GAAMe,CAAAA,OAAO,CACXjB,uBAAuB,CAACS,EAAD,CAAKP,CAAL,CAAvB,EAAkCF,uBAAuB,CAACU,EAAD,CAAKR,CAAL,CAD3D,CAGA,GAAIe,OAAO,EAAIN,MAAM,CAAGZ,SAAxB,CAAmC,CACjCa,KAAK,CAACM,IAAN,CAAWV,WAAW,CAACC,EAAE,CAACP,CAAD,CAAH,CAAQQ,EAAE,CAACR,CAAD,CAAV,CAAeS,MAAM,CAAG,CAAxB,CAAtB,EACD,CAFD,IAEO,CACL,GAAMQ,CAAAA,CAAC,CACJZ,aAAa,CAACE,EAAE,CAACP,CAAD,CAAH,CAAb,EAAwBK,aAAa,CAACG,EAAE,CAACR,CAAD,CAAH,CAAtC,EACCC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCI,EAArC,CAAyCR,CAAzC,GAA+CQ,EAAE,CAACR,CAAD,CAAF,GAAUO,EAAE,CAACP,CAAD,CAF9D,CAIAU,KAAK,CAACM,IAAN,CAAWC,CAAX,EAEA,GAAI,CAACA,CAAL,CAAQ,CACN,MACD,CACF,CACF,CAED,MAAOP,CAAAA,KAAK,CAACQ,OAAN,CAAc,KAAd,IAAyB,CAAC,CAAjC,CACD,CAED;;;;;;GAOA,QAASb,CAAAA,aAAT,CAAuBN,CAAvB,CAA0B,CACxB,MAAO,CAAC,CAACA,CAAF,EAAO,MAAOA,CAAAA,CAAP,GAAa,QAApB,EAAgC,CAACE,MAAM,CAACW,IAAP,CAAYb,CAAZ,EAAee,MAAvD,CACD,CAED;;;;;;;;GASA,QAASK,CAAAA,SAAT,CAAmBpB,CAAnB,CAA+C,IAAzBqB,CAAAA,MAAyB,2DAAhB,EAAgB,IAAZX,CAAAA,MAAY,2DAAH,CAAG,CAC7C,GAAMY,CAAAA,KAAK,CAAGpB,MAAM,CAACW,IAAP,CAAYb,CAAZ,CAAd,CAEA,qBAAcsB,KAAd,yBAAqB,CAAhB,GAAIrB,CAAAA,CAAC,YAAL,CACH,GAAMsB,CAAAA,MAAM,CAAGxB,uBAAuB,CAACC,CAAD,CAAIC,CAAJ,CAAtC,CAEAoB,MAAM,CAACpB,CAAD,CAAN,CACEsB,MAAM,EAAIb,MAAM,CAAGZ,SAAnB,CAA+BsB,SAAS,CAACpB,CAAC,CAACC,CAAD,CAAF,CAAO,EAAP,CAAWS,MAAM,CAAG,CAApB,CAAxC,CAAiEV,CAAC,CAACC,CAAD,CADpE,CAED,CAED,MAAOoB,CAAAA,MAAP,CACD,CAED;;;;;;;;;GAUA,QAASG,CAAAA,KAAT,EAA6C,IAA9BhB,CAAAA,EAA8B,2DAAzB,EAAyB,IAArBC,CAAAA,EAAqB,2DAAhB,EAAgB,IAAZC,CAAAA,MAAY,2DAAH,CAAG,CAC3C,GAAIV,CAAAA,CAAC,CAAG,EAAR,CAEA,GAAIE,MAAM,CAACW,IAAP,CAAYL,EAAE,EAAI,EAAlB,EAAsBO,MAAtB,GAAiC,CAArC,CAAwC,CACtC,MAAON,CAAAA,EAAE,EAAI,CAACH,aAAa,CAACG,EAAD,CAApB,CAA2BA,EAA3B,CAAgC,EAAvC,CACD,CAED,2BAAcP,MAAM,CAACW,IAAP,CAAYL,EAAZ,CAAd,+BAA+B,CAA1B,GAAIP,CAAAA,CAAC,kBAAL,CACH,GAAMe,CAAAA,OAAO,CAAG,CAAC,EACfP,EAAE,CAACR,CAAD,CAAF,EACA,MAAOQ,CAAAA,EAAE,CAACR,CAAD,CAAT,GAAiB,QADjB,EAEA,MAAOO,CAAAA,EAAE,CAACP,CAAD,CAAT,GAAiB,QAFjB,EAGAS,MAAM,CAAGZ,SAJM,CAAjB,CAOA,GAAIkB,OAAJ,CAAa,aACX,GAAME,CAAAA,CAAC,CAAGM,KAAK,CAAChB,EAAE,CAACP,CAAD,CAAH,CAAQQ,EAAE,CAACR,CAAD,CAAV,CAAeS,MAAM,CAAG,CAAxB,CAAf,CAEAV,CAAC,CAACC,CAAD,CAAD,CACEC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCG,EAAE,CAACP,CAAD,CAAvC,CAA4C,QAA5C,GACAC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCI,EAAE,CAACR,CAAD,CAAvC,CAA4C,QAA5C,CADA,CAEIC,MAAM,CAACW,IAAP,CAAYK,CAAZ,EAAeO,GAAf,CAAmB,SAAAC,EAAE,QAAIR,CAAAA,CAAC,CAACQ,EAAD,CAAL,EAArB,CAFJ,CAGIR,CAJN,CAHW,KAQZ,CARD,IAQO,CACLlB,CAAC,CAACC,CAAD,CAAD,CAAOC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCI,EAArC,CAAyCR,CAAzC,EAA8CQ,EAAE,CAACR,CAAD,CAAhD,CAAsDO,EAAE,CAACP,CAAD,CAA/D,CACD,CACF,CAED,MAAOD,CAAAA,CAAP,CACD,CAED;;;;;;;GAQA,QAAS2B,CAAAA,IAAT,CAAc3B,CAAd,CAA6B,IAAZ4B,CAAAA,KAAY,2DAAJ,EAAI,CAC3B,MAAOA,CAAAA,KAAK,CAACC,MAAN,CAAa,SAACC,GAAD,CAAM7B,CAAN,CAAY,CAC9B,GAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,CAArC,CAAwCC,CAAxC,CAAJ,CAAgD,CAC9C6B,GAAG,CAAC7B,CAAD,CAAH,CAASD,CAAC,CAACC,CAAD,CAAV,CACD,CAED,MAAO6B,CAAAA,GAAP,CACD,CANM,CAMJ,EANI,CAAP,CAOD,CAED;;;;;;GAOA,QAASC,CAAAA,QAAT,CAAkB/B,CAAlB,CAAiC,IAAZ4B,CAAAA,KAAY,2DAAJ,EAAI,CAC/B,GAAMI,CAAAA,MAAM,CAAG9B,MAAM,CAACW,IAAP,CAAYb,CAAZ,EAAeiC,MAAf,CAAsB,SAAAhC,CAAC,QAAI,CAAC2B,KAAK,CAACM,QAAN,CAAejC,CAAf,CAAL,EAAvB,CAAf,CAEA,MAAO0B,CAAAA,IAAI,CAAC3B,CAAD,CAAIgC,MAAJ,CAAX,CACD,CAED;;;;;;GAOA,QAASG,CAAAA,QAAT,CAAkBC,SAAlB,CAA6BC,GAA7B,CAAkC,CAChC,GAAMC,CAAAA,KAAK,6BAAwBF,SAAxB,gBAAwCC,GAAxC,CAAX,CAEA,KAAME,CAAAA,KAAK,CAACD,KAAD,CAAX,CACD,CAED;;;;;;GAOA,QAASE,CAAAA,YAAT,CAAsBJ,SAAtB,CAAiCC,GAAjC,CAAsC,CACpC,GAAMI,CAAAA,OAAO,6BAAwBL,SAAxB,gBAAwCC,GAAxC,CAAb,CAEAK,OAAO,CAACC,IAAR,CAAaF,OAAb,EACD,CAED,OACElC,WADF,CAEED,aAFF,CAGEc,SAHF,CAIEI,KAJF,CAKEG,IALF,CAMEI,QANF,CAOEI,QAPF,CAQEK,YARF","sourcesContent":["/**\n * @module utils\n * @description\n * Offers a series of generic methods for object manipulation, and other operations\n * that are common across rd3g such as error logging.\n */\n\n// This variable assures that recursive methods such as merge and isDeepEqual do not fall on\n// circular JSON structure evaluation.\nconst MAX_DEPTH = 20;\n\n/**\n * Checks whether a certain object property is from object type and is a non empty object.\n * @param  {Object} o - the object.\n * @param  {string} k - the object property.\n * @returns {boolean} returns true if o[k] is an non empty object.\n * @memberof utils\n */\nfunction _isPropertyNestedObject(o, k) {\n  return (\n    !!o &&\n    Object.prototype.hasOwnProperty.call(o, k) &&\n    typeof o[k] === \"object\" &&\n    o[k] !== null &&\n    !isEmptyObject(o[k])\n  );\n}\n\n/**\n * Generic deep comparison between javascript simple or complex objects.\n * @param  {Object} o1 - one of the objects to be compared.\n * @param  {Object} o2 - second object to compare with first.\n * @param  {number} [_depth=0] - this parameter serves only for internal usage.\n * @returns {boolean} returns true if o1 and o2 have exactly the same content, or are exactly the same object reference.\n * @memberof utils\n */\nfunction isDeepEqual(o1, o2, _depth = 0) {\n  let diffs = [];\n\n  if (_depth === 0 && o1 === o2) {\n    return true;\n  }\n\n  if (\n    (isEmptyObject(o1) && !isEmptyObject(o2)) ||\n    (!isEmptyObject(o1) && isEmptyObject(o2))\n  ) {\n    return false;\n  }\n\n  const o1Keys = Object.keys(o1);\n  const o2Keys = Object.keys(o2);\n\n  if (o1Keys.length !== o2Keys.length) {\n    return false;\n  }\n\n  for (let k of o1Keys) {\n    const nestedO =\n      _isPropertyNestedObject(o1, k) && _isPropertyNestedObject(o2, k);\n\n    if (nestedO && _depth < MAX_DEPTH) {\n      diffs.push(isDeepEqual(o1[k], o2[k], _depth + 1));\n    } else {\n      const r =\n        (isEmptyObject(o1[k]) && isEmptyObject(o2[k])) ||\n        (Object.prototype.hasOwnProperty.call(o2, k) && o2[k] === o1[k]);\n\n      diffs.push(r);\n\n      if (!r) {\n        break;\n      }\n    }\n  }\n\n  return diffs.indexOf(false) === -1;\n}\n\n/**\n * Checks whether or not a certain object is empty.\n * NOTE: If the passed parameter is not an object the method return false.\n * @param  {Object}  o - object whom emptiness we want to check.\n * @returns {boolean} true if the given object is n ft and object and is empty.\n * @memberof utils\n */\nfunction isEmptyObject(o) {\n  return !!o && typeof o === \"object\" && !Object.keys(o).length;\n}\n\n/**\n * Function to deep clone plain javascript objects.\n * @param {Object} o - the object to clone.\n * @param {Object} _clone - carries the cloned output throughout the\n * recursive calls. Parameter serves only for internal usage.\n * @param {number} _depth - this parameter serves only for internal usage.\n * @returns {Object} - the cloned object.\n * @memberof utils\n */\nfunction deepClone(o, _clone = {}, _depth = 0) {\n  const oKeys = Object.keys(o);\n\n  for (let k of oKeys) {\n    const nested = _isPropertyNestedObject(o, k);\n\n    _clone[k] =\n      nested && _depth < MAX_DEPTH ? deepClone(o[k], {}, _depth + 1) : o[k];\n  }\n\n  return _clone;\n}\n\n/**\n * This function merges two objects o1 and o2, where o2 properties override existent o1 properties, and\n * if o2 doesn't posses some o1 property the fallback will be the o1 property.\n * @param  {Object} o1 - object.\n * @param  {Object} o2 - object that will override o1 properties.\n * @param  {int} [_depth=0] - the depth at which we are merging the object.\n * @returns {Object} object that is the result of merging o1 and o2, being o2 properties priority overriding\n * existent o1 properties.\n * @memberof utils\n */\nfunction merge(o1 = {}, o2 = {}, _depth = 0) {\n  let o = {};\n\n  if (Object.keys(o1 || {}).length === 0) {\n    return o2 && !isEmptyObject(o2) ? o2 : {};\n  }\n\n  for (let k of Object.keys(o1)) {\n    const nestedO = !!(\n      o2[k] &&\n      typeof o2[k] === \"object\" &&\n      typeof o1[k] === \"object\" &&\n      _depth < MAX_DEPTH\n    );\n\n    if (nestedO) {\n      const r = merge(o1[k], o2[k], _depth + 1);\n\n      o[k] =\n        Object.prototype.hasOwnProperty.call(o1[k], \"length\") &&\n        Object.prototype.hasOwnProperty.call(o2[k], \"length\")\n          ? Object.keys(r).map(rk => r[rk])\n          : r;\n    } else {\n      o[k] = Object.prototype.hasOwnProperty.call(o2, k) ? o2[k] : o1[k];\n    }\n  }\n\n  return o;\n}\n\n/**\n * Create new object from the inputted one only with the props passed\n * in the props list.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we want to pick from o.\n * @returns {Object} the object resultant from the picking operation.\n * @memberof utils\n */\nfunction pick(o, props = []) {\n  return props.reduce((acc, k) => {\n    if (Object.prototype.hasOwnProperty.call(o, k)) {\n      acc[k] = o[k];\n    }\n\n    return acc;\n  }, {});\n}\n\n/**\n * Picks all props except the ones passed in the props array.\n * @param {Object} o - the object to pick props from.\n * @param {Array.<string>} props - list of props that we DON'T want to pick from o.\n * @returns {Object} the object resultant from the anti picking operation.\n * @memberof utils\n */\nfunction antiPick(o, props = []) {\n  const wanted = Object.keys(o).filter(k => !props.includes(k));\n\n  return pick(o, wanted);\n}\n\n/**\n * Helper function for customized error logging.\n * @param  {string} component - the name of the component where the error is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Error} the thrown error.\n * @memberof utils\n */\nfunction throwErr(component, msg) {\n  const error = `react-d3-graph :: ${component} :: ${msg}`;\n\n  throw Error(error);\n}\n\n/**\n * Helper function for customized warning logging.\n * @param  {string} component - the name of the component where the warning is to be thrown.\n * @param  {string} msg - the message contain a more detailed explanation about the error.\n * @returns {Warning} the thrown warning.\n * @memberof utils\n */\nfunction throwWarning(component, msg) {\n  const warning = `react-d3-graph :: ${component} :: ${msg}`;\n\n  console.warn(warning);\n}\n\nexport {\n  isDeepEqual,\n  isEmptyObject,\n  deepClone,\n  merge,\n  pick,\n  antiPick,\n  throwErr,\n  throwWarning\n};\n"]},"metadata":{},"sourceType":"module"}